
Door_locker_security_system_MC2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00002e34  00002ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800082  00800082  00002eea  2**0
                  ALLOC
  3 .stab         00003288  00000000  00000000  00002eec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000169a  00000000  00000000  00006174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000780e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000794e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007abe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009707  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a5f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b500  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b78d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 18 17 	jmp	0x2e30	; 0x2e30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a7 16 	jmp	0x2d4e	; 0x2d4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cf 16 	jmp	0x2d9e	; 0x2d9e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

/* global variable flag to indicate the state of the password comparison */
uint8 g_PasswordCorrectFlag = 0;

int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ef 97       	sbiw	r28, 0x3f	; 63
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/* For debugging and showing that program works fine only */
	LCD_init();
     b5a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <LCD_init>

	/* Initialize the TWI/I2C Driver with dynamic configuration */
	/*TWI_ConfigType TWI_Structure={P_1,FAST_MODE,0b00000010};*/
	/*TWI_init(&TWI_Structure);*/

	TWI_init();				/* Initialize the TWI/I2C Driver */
     b5e:	0e 94 c8 14 	call	0x2990	; 0x2990 <TWI_init>
	DcMotor_Init();			/* Initialize DC motor driver*/
     b62:	0e 94 42 14 	call	0x2884	; 0x2884 <DcMotor_Init>
	Buzzer_Init();			/* Initialize buzzer driver*/
     b66:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <Buzzer_Init>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec, 1 stop bit, disabled parity and 8 bit character */
	UART_ConfigType UART_Structure={9600,ONE_BIT,DISABLED,EIGHT_BIT};
     b6a:	9e 01       	movw	r18, r28
     b6c:	20 5f       	subi	r18, 0xF0	; 240
     b6e:	3f 4f       	sbci	r19, 0xFF	; 255
     b70:	3c af       	std	Y+60, r19	; 0x3c
     b72:	2b af       	std	Y+59, r18	; 0x3b
     b74:	8a e7       	ldi	r24, 0x7A	; 122
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	9e af       	std	Y+62, r25	; 0x3e
     b7a:	8d af       	std	Y+61, r24	; 0x3d
     b7c:	97 e0       	ldi	r25, 0x07	; 7
     b7e:	9f af       	std	Y+63, r25	; 0x3f
     b80:	ed ad       	ldd	r30, Y+61	; 0x3d
     b82:	fe ad       	ldd	r31, Y+62	; 0x3e
     b84:	00 80       	ld	r0, Z
     b86:	2d ad       	ldd	r18, Y+61	; 0x3d
     b88:	3e ad       	ldd	r19, Y+62	; 0x3e
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	3e af       	std	Y+62, r19	; 0x3e
     b90:	2d af       	std	Y+61, r18	; 0x3d
     b92:	eb ad       	ldd	r30, Y+59	; 0x3b
     b94:	fc ad       	ldd	r31, Y+60	; 0x3c
     b96:	00 82       	st	Z, r0
     b98:	2b ad       	ldd	r18, Y+59	; 0x3b
     b9a:	3c ad       	ldd	r19, Y+60	; 0x3c
     b9c:	2f 5f       	subi	r18, 0xFF	; 255
     b9e:	3f 4f       	sbci	r19, 0xFF	; 255
     ba0:	3c af       	std	Y+60, r19	; 0x3c
     ba2:	2b af       	std	Y+59, r18	; 0x3b
     ba4:	3f ad       	ldd	r19, Y+63	; 0x3f
     ba6:	31 50       	subi	r19, 0x01	; 1
     ba8:	3f af       	std	Y+63, r19	; 0x3f
     baa:	8f ad       	ldd	r24, Y+63	; 0x3f
     bac:	88 23       	and	r24, r24
     bae:	41 f7       	brne	.-48     	; 0xb80 <main+0x3a>
	UART_Init(&UART_Structure);
     bb0:	ce 01       	movw	r24, r28
     bb2:	40 96       	adiw	r24, 0x10	; 16
     bb4:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <UART_Init>
	while(1)
	{

		/*Receive the chosen function from MC1 */
		uint8 ChosenFunction;
		ChosenFunction = UART_recieveByte();
     bb8:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
     bbc:	8f 87       	std	Y+15, r24	; 0x0f

		switch(ChosenFunction)
     bbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc0:	e8 2f       	mov	r30, r24
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	fa af       	std	Y+58, r31	; 0x3a
     bc6:	e9 af       	std	Y+57, r30	; 0x39
     bc8:	29 ad       	ldd	r18, Y+57	; 0x39
     bca:	3a ad       	ldd	r19, Y+58	; 0x3a
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <main+0x8e>
     bd2:	a5 c0       	rjmp	.+330    	; 0xd1e <main+0x1d8>
     bd4:	89 ad       	ldd	r24, Y+57	; 0x39
     bd6:	9a ad       	ldd	r25, Y+58	; 0x3a
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	91 05       	cpc	r25, r1
     bdc:	3c f4       	brge	.+14     	; 0xbec <main+0xa6>
     bde:	e9 ad       	ldd	r30, Y+57	; 0x39
     be0:	fa ad       	ldd	r31, Y+58	; 0x3a
     be2:	e1 30       	cpi	r30, 0x01	; 1
     be4:	f1 05       	cpc	r31, r1
     be6:	09 f4       	brne	.+2      	; 0xbea <main+0xa4>
     be8:	91 c0       	rjmp	.+290    	; 0xd0c <main+0x1c6>
     bea:	a1 c0       	rjmp	.+322    	; 0xd2e <main+0x1e8>
     bec:	29 ad       	ldd	r18, Y+57	; 0x39
     bee:	3a ad       	ldd	r19, Y+58	; 0x3a
     bf0:	25 30       	cpi	r18, 0x05	; 5
     bf2:	31 05       	cpc	r19, r1
     bf4:	39 f0       	breq	.+14     	; 0xc04 <main+0xbe>
     bf6:	89 ad       	ldd	r24, Y+57	; 0x39
     bf8:	9a ad       	ldd	r25, Y+58	; 0x3a
     bfa:	89 30       	cpi	r24, 0x09	; 9
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <main+0xbc>
     c00:	7c c0       	rjmp	.+248    	; 0xcfa <main+0x1b4>
     c02:	95 c0       	rjmp	.+298    	; 0xd2e <main+0x1e8>
		{
		case SetFirstPasswordFn:
			CheckForPreviouslySavedPassword(Password_1, Password_2);
     c04:	ce 01       	movw	r24, r28
     c06:	47 96       	adiw	r24, 0x17	; 23
     c08:	9e 01       	movw	r18, r28
     c0a:	28 5d       	subi	r18, 0xD8	; 216
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	b9 01       	movw	r22, r18
     c10:	0e 94 57 08 	call	0x10ae	; 0x10ae <CheckForPreviouslySavedPassword>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	aa ef       	ldi	r26, 0xFA	; 250
     c1a:	b3 e4       	ldi	r27, 0x43	; 67
     c1c:	8b 87       	std	Y+11, r24	; 0x0b
     c1e:	9c 87       	std	Y+12, r25	; 0x0c
     c20:	ad 87       	std	Y+13, r26	; 0x0d
     c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c24:	6b 85       	ldd	r22, Y+11	; 0x0b
     c26:	7c 85       	ldd	r23, Y+12	; 0x0c
     c28:	8d 85       	ldd	r24, Y+13	; 0x0d
     c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	4a ef       	ldi	r20, 0xFA	; 250
     c32:	54 e4       	ldi	r21, 0x44	; 68
     c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	8f 83       	std	Y+7, r24	; 0x07
     c3e:	98 87       	std	Y+8, r25	; 0x08
     c40:	a9 87       	std	Y+9, r26	; 0x09
     c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c44:	6f 81       	ldd	r22, Y+7	; 0x07
     c46:	78 85       	ldd	r23, Y+8	; 0x08
     c48:	89 85       	ldd	r24, Y+9	; 0x09
     c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	40 e8       	ldi	r20, 0x80	; 128
     c52:	5f e3       	ldi	r21, 0x3F	; 63
     c54:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c58:	88 23       	and	r24, r24
     c5a:	2c f4       	brge	.+10     	; 0xc66 <main+0x120>
		__ticks = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	9e 83       	std	Y+6, r25	; 0x06
     c62:	8d 83       	std	Y+5, r24	; 0x05
     c64:	3f c0       	rjmp	.+126    	; 0xce4 <main+0x19e>
	else if (__tmp > 65535)
     c66:	6f 81       	ldd	r22, Y+7	; 0x07
     c68:	78 85       	ldd	r23, Y+8	; 0x08
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	3f ef       	ldi	r19, 0xFF	; 255
     c72:	4f e7       	ldi	r20, 0x7F	; 127
     c74:	57 e4       	ldi	r21, 0x47	; 71
     c76:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c7a:	18 16       	cp	r1, r24
     c7c:	4c f5       	brge	.+82     	; 0xcd0 <main+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c80:	7c 85       	ldd	r23, Y+12	; 0x0c
     c82:	8d 85       	ldd	r24, Y+13	; 0x0d
     c84:	9e 85       	ldd	r25, Y+14	; 0x0e
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e2       	ldi	r20, 0x20	; 32
     c8c:	51 e4       	ldi	r21, 0x41	; 65
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	bc 01       	movw	r22, r24
     c98:	cd 01       	movw	r24, r26
     c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	9e 83       	std	Y+6, r25	; 0x06
     ca4:	8d 83       	std	Y+5, r24	; 0x05
     ca6:	0f c0       	rjmp	.+30     	; 0xcc6 <main+0x180>
     ca8:	88 ec       	ldi	r24, 0xC8	; 200
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	9c 81       	ldd	r25, Y+4	; 0x04
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <main+0x16e>
     cb8:	9c 83       	std	Y+4, r25	; 0x04
     cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	9e 81       	ldd	r25, Y+6	; 0x06
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	9e 83       	std	Y+6, r25	; 0x06
     cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cc6:	8d 81       	ldd	r24, Y+5	; 0x05
     cc8:	9e 81       	ldd	r25, Y+6	; 0x06
     cca:	00 97       	sbiw	r24, 0x00	; 0
     ccc:	69 f7       	brne	.-38     	; 0xca8 <main+0x162>
     cce:	2f c0       	rjmp	.+94     	; 0xd2e <main+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cd0:	6f 81       	ldd	r22, Y+7	; 0x07
     cd2:	78 85       	ldd	r23, Y+8	; 0x08
     cd4:	89 85       	ldd	r24, Y+9	; 0x09
     cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
     cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	9e 83       	std	Y+6, r25	; 0x06
     ce2:	8d 83       	std	Y+5, r24	; 0x05
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	9a 83       	std	Y+2, r25	; 0x02
     cea:	89 83       	std	Y+1, r24	; 0x01
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <main+0x1aa>
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
     cf8:	1a c0       	rjmp	.+52     	; 0xd2e <main+0x1e8>
			_delay_ms(500);
			break;

		case SetNewPasswordFn:
			ChangePassword(Password_1, Password_2);
     cfa:	ce 01       	movw	r24, r28
     cfc:	47 96       	adiw	r24, 0x17	; 23
     cfe:	9e 01       	movw	r18, r28
     d00:	28 5d       	subi	r18, 0xD8	; 216
     d02:	3f 4f       	sbci	r19, 0xFF	; 255
     d04:	b9 01       	movw	r22, r18
     d06:	0e 94 09 08 	call	0x1012	; 0x1012 <ChangePassword>
     d0a:	11 c0       	rjmp	.+34     	; 0xd2e <main+0x1e8>
			break;

		case GetOptionsFn:
			UserChoice(Password_1, Password_2);
     d0c:	ce 01       	movw	r24, r28
     d0e:	47 96       	adiw	r24, 0x17	; 23
     d10:	9e 01       	movw	r18, r28
     d12:	28 5d       	subi	r18, 0xD8	; 216
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	b9 01       	movw	r22, r18
     d18:	0e 94 b6 06 	call	0xd6c	; 0xd6c <UserChoice>
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <main+0x1e8>
			break;

		case EnterPasswordFn:
			CheckPassword(Password_1, Password_2);
     d1e:	ce 01       	movw	r24, r28
     d20:	47 96       	adiw	r24, 0x17	; 23
     d22:	9e 01       	movw	r18, r28
     d24:	28 5d       	subi	r18, 0xD8	; 216
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	b9 01       	movw	r22, r18
     d2a:	0e 94 29 08 	call	0x1052	; 0x1052 <CheckPassword>

		}


		/*For debugging and displaying that code works propperly only */
		LCD_displayStringRowColumn(0,0,Password_1);
     d2e:	9e 01       	movw	r18, r28
     d30:	29 5e       	subi	r18, 0xE9	; 233
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	60 e0       	ldi	r22, 0x00	; 0
     d38:	a9 01       	movw	r20, r18
     d3a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,Password_2);
     d3e:	9e 01       	movw	r18, r28
     d40:	28 5d       	subi	r18, 0xD8	; 216
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	a9 01       	movw	r20, r18
     d4a:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(0,8,"inEEPROM");
     d4e:	20 e6       	ldi	r18, 0x60	; 96
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	68 e0       	ldi	r22, 0x08	; 8
     d56:	a9 01       	movw	r20, r18
     d58:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,8,"Debugger");
     d5c:	29 e6       	ldi	r18, 0x69	; 105
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	68 e0       	ldi	r22, 0x08	; 8
     d64:	a9 01       	movw	r20, r18
     d66:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <LCD_displayStringRowColumn>
     d6a:	26 cf       	rjmp	.-436    	; 0xbb8 <main+0x72>

00000d6c <UserChoice>:
 *
 * OUTPUTS:N/A
 */

void UserChoice(uint8 * PassPtr1, uint8 * PassPtr2)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	27 97       	sbiw	r28, 0x07	; 7
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	de bf       	out	0x3e, r29	; 62
     d7c:	0f be       	out	0x3f, r0	; 63
     d7e:	cd bf       	out	0x3d, r28	; 61
     d80:	9b 83       	std	Y+3, r25	; 0x03
     d82:	8a 83       	std	Y+2, r24	; 0x02
     d84:	7d 83       	std	Y+5, r23	; 0x05
     d86:	6c 83       	std	Y+4, r22	; 0x04
	uint8 choice;
	static uint8 FailureCounter=0;
	choice = UART_recieveByte();
     d88:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
     d8c:	89 83       	std	Y+1, r24	; 0x01
	switch(choice){
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	3f 83       	std	Y+7, r19	; 0x07
     d96:	2e 83       	std	Y+6, r18	; 0x06
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	8b 32       	cpi	r24, 0x2B	; 43
     d9e:	91 05       	cpc	r25, r1
     da0:	31 f0       	breq	.+12     	; 0xdae <UserChoice+0x42>
     da2:	2e 81       	ldd	r18, Y+6	; 0x06
     da4:	3f 81       	ldd	r19, Y+7	; 0x07
     da6:	2d 32       	cpi	r18, 0x2D	; 45
     da8:	31 05       	cpc	r19, r1
     daa:	49 f1       	breq	.+82     	; 0xdfe <UserChoice+0x92>
     dac:	55 c0       	rjmp	.+170    	; 0xe58 <UserChoice+0xec>
	case '+':
		UART_sendByte(OpenDoorFn);	/* Inform MC1 about the selected choice*/
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
		UART_recieveByte(); //dummy
     db4:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
		CheckPassword(PassPtr1, PassPtr2);
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	b9 01       	movw	r22, r18
     dc2:	0e 94 29 08 	call	0x1052	; 0x1052 <CheckPassword>
		if(g_PasswordCorrectFlag)
     dc6:	80 91 84 00 	lds	r24, 0x0084
     dca:	88 23       	and	r24, r24
     dcc:	29 f0       	breq	.+10     	; 0xdd8 <UserChoice+0x6c>
		{
			FailureCounter = 0;
     dce:	10 92 85 00 	sts	0x0085, r1
			OpenDoor();
     dd2:	0e 94 35 07 	call	0xe6a	; 0xe6a <OpenDoor>
     dd6:	40 c0       	rjmp	.+128    	; 0xe58 <UserChoice+0xec>
		}
		else
		{
			FailureCounter++;
     dd8:	80 91 85 00 	lds	r24, 0x0085
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	80 93 85 00 	sts	0x0085, r24
			if (FailureCounter==3)
     de2:	80 91 85 00 	lds	r24, 0x0085
     de6:	83 30       	cpi	r24, 0x03	; 3
     de8:	b9 f5       	brne	.+110    	; 0xe58 <UserChoice+0xec>
			{
				Buzzer_ON();
     dea:	0e 94 8d 0b 	call	0x171a	; 0x171a <Buzzer_ON>
				CountByTimer0(60);
     dee:	8c e3       	ldi	r24, 0x3C	; 60
     df0:	0e 94 09 0a 	call	0x1412	; 0x1412 <CountByTimer0>
				Buzzer_OFF();
     df4:	0e 94 99 0b 	call	0x1732	; 0x1732 <Buzzer_OFF>
				FailureCounter = 0;
     df8:	10 92 85 00 	sts	0x0085, r1
     dfc:	2d c0       	rjmp	.+90     	; 0xe58 <UserChoice+0xec>
			}
		}
		break;
	case '-':
		InformMC1(ChangePasswordFn);
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 02 09 	call	0x1204	; 0x1204 <InformMC1>
		CheckPassword(PassPtr1, PassPtr2);
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	9b 81       	ldd	r25, Y+3	; 0x03
     e0a:	2c 81       	ldd	r18, Y+4	; 0x04
     e0c:	3d 81       	ldd	r19, Y+5	; 0x05
     e0e:	b9 01       	movw	r22, r18
     e10:	0e 94 29 08 	call	0x1052	; 0x1052 <CheckPassword>
		if(g_PasswordCorrectFlag)
     e14:	80 91 84 00 	lds	r24, 0x0084
     e18:	88 23       	and	r24, r24
     e1a:	61 f0       	breq	.+24     	; 0xe34 <UserChoice+0xc8>
			{
				FailureCounter = 0;
     e1c:	10 92 85 00 	sts	0x0085, r1
				UART_recieveByte(); //dummy
     e20:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
				ChangePassword(PassPtr1, PassPtr2);
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	9b 81       	ldd	r25, Y+3	; 0x03
     e28:	2c 81       	ldd	r18, Y+4	; 0x04
     e2a:	3d 81       	ldd	r19, Y+5	; 0x05
     e2c:	b9 01       	movw	r22, r18
     e2e:	0e 94 09 08 	call	0x1012	; 0x1012 <ChangePassword>
     e32:	12 c0       	rjmp	.+36     	; 0xe58 <UserChoice+0xec>
			}
			else
			{
				FailureCounter++;
     e34:	80 91 85 00 	lds	r24, 0x0085
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 85 00 	sts	0x0085, r24
				if (FailureCounter==3)
     e3e:	80 91 85 00 	lds	r24, 0x0085
     e42:	83 30       	cpi	r24, 0x03	; 3
     e44:	49 f4       	brne	.+18     	; 0xe58 <UserChoice+0xec>
				{
					Buzzer_ON();
     e46:	0e 94 8d 0b 	call	0x171a	; 0x171a <Buzzer_ON>
					CountByTimer0(60);
     e4a:	8c e3       	ldi	r24, 0x3C	; 60
     e4c:	0e 94 09 0a 	call	0x1412	; 0x1412 <CountByTimer0>
					Buzzer_OFF();
     e50:	0e 94 99 0b 	call	0x1732	; 0x1732 <Buzzer_OFF>
					FailureCounter = 0;
     e54:	10 92 85 00 	sts	0x0085, r1
				}
			}
		break;
	}
}
     e58:	27 96       	adiw	r28, 0x07	; 7
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <OpenDoor>:
 *
 * OUTPUTS:	N/A
 */

void OpenDoor(void)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate (Clockwise,100);
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	64 e6       	ldi	r22, 0x64	; 100
     e76:	0e 94 67 14 	call	0x28ce	; 0x28ce <DcMotor_Rotate>
	CountByTimer0(15);
     e7a:	8f e0       	ldi	r24, 0x0F	; 15
     e7c:	0e 94 09 0a 	call	0x1412	; 0x1412 <CountByTimer0>
	DcMotor_Rotate (OFF,0);
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	0e 94 67 14 	call	0x28ce	; 0x28ce <DcMotor_Rotate>
	CountByTimer0(10);
     e88:	8a e0       	ldi	r24, 0x0A	; 10
     e8a:	0e 94 09 0a 	call	0x1412	; 0x1412 <CountByTimer0>
	DcMotor_Rotate (Counter_Clockwise,100);
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	64 e6       	ldi	r22, 0x64	; 100
     e92:	0e 94 67 14 	call	0x28ce	; 0x28ce <DcMotor_Rotate>
	CountByTimer0(15);
     e96:	8f e0       	ldi	r24, 0x0F	; 15
     e98:	0e 94 09 0a 	call	0x1412	; 0x1412 <CountByTimer0>
	DcMotor_Rotate (OFF,0);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	0e 94 67 14 	call	0x28ce	; 0x28ce <DcMotor_Rotate>
}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <ReadEnteredPassword>:
 *
 * OUTPUTS:N/A
 */

void ReadEnteredPassword(uint8 * PassPtr)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	62 97       	sbiw	r28, 0x12	; 18
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	f8 94       	cli
     eb8:	de bf       	out	0x3e, r29	; 62
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	cd bf       	out	0x3d, r28	; 61
     ebe:	9a 8b       	std	Y+18, r25	; 0x12
     ec0:	89 8b       	std	Y+17, r24	; 0x11
	uint8 RecievedCharacter, counter=0;
     ec2:	1f 86       	std	Y+15, r1	; 0x0f

	UART_sendByte(MC2_READY);	/* Send MC2_READY byte to MC1 to ask it to send the string */
     ec4:	87 e0       	ldi	r24, 0x07	; 7
     ec6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
	UART_receiveString(PassPtr);
     eca:	89 89       	ldd	r24, Y+17	; 0x11
     ecc:	9a 89       	ldd	r25, Y+18	; 0x12
     ece:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <UART_receiveString>
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	aa e7       	ldi	r26, 0x7A	; 122
     ed8:	b4 e4       	ldi	r27, 0x44	; 68
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	4a ef       	ldi	r20, 0xFA	; 250
     ef0:	54 e4       	ldi	r21, 0x44	; 68
     ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <ReadEnteredPassword+0x7a>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <ReadEnteredPassword+0xf8>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <ReadEnteredPassword+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <ReadEnteredPassword+0xda>
     f66:	88 ec       	ldi	r24, 0xC8	; 200
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <ReadEnteredPassword+0xc8>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <ReadEnteredPassword+0xbc>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <ReadEnteredPassword+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <ReadEnteredPassword+0x104>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
     fb6:	62 96       	adiw	r28, 0x12	; 18
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <SavePassword>:
 * OUTPUTS:N/A
 */


void SavePassword(uint8 * PassPtr1, uint8 * PassPtr2)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	00 d0       	rcall	.+0      	; 0xfce <SavePassword+0x6>
     fce:	00 d0       	rcall	.+0      	; 0xfd0 <SavePassword+0x8>
     fd0:	cd b7       	in	r28, 0x3d	; 61
     fd2:	de b7       	in	r29, 0x3e	; 62
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	7c 83       	std	Y+4, r23	; 0x04
     fda:	6b 83       	std	Y+3, r22	; 0x03
	if (!(strcmp(PassPtr1,PassPtr2))){
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	9a 81       	ldd	r25, Y+2	; 0x02
     fe0:	2b 81       	ldd	r18, Y+3	; 0x03
     fe2:	3c 81       	ldd	r19, Y+4	; 0x04
     fe4:	b9 01       	movw	r22, r18
     fe6:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	41 f4       	brne	.+16     	; 0xffe <SavePassword+0x36>

		UART_sendByte(TRUE);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
		EEPROMStorePassword(PassPtr2);
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	0e 94 0f 09 	call	0x121e	; 0x121e <EEPROMStorePassword>
     ffc:	03 c0       	rjmp	.+6      	; 0x1004 <SavePassword+0x3c>

	}
	else{
		UART_sendByte(FALSE);
     ffe:	80 e0       	ldi	r24, 0x00	; 0
    1000:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
	}
}
    1004:	0f 90       	pop	r0
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	08 95       	ret

00001012 <ChangePassword>:
 *
 * OUTPUTS:N/A
 */

void ChangePassword(uint8 * PassPtr1, uint8 * PassPtr2)
{
    1012:	df 93       	push	r29
    1014:	cf 93       	push	r28
    1016:	00 d0       	rcall	.+0      	; 0x1018 <ChangePassword+0x6>
    1018:	00 d0       	rcall	.+0      	; 0x101a <ChangePassword+0x8>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	7c 83       	std	Y+4, r23	; 0x04
    1024:	6b 83       	std	Y+3, r22	; 0x03
	//UART_sendByte(ChangePasswordFn);	/* Inform MC1 about the selected choice*/
	// error function decision byte read as password character ====================================
	ReadEnteredPassword(PassPtr1);
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	9a 81       	ldd	r25, Y+2	; 0x02
    102a:	0e 94 55 07 	call	0xeaa	; 0xeaa <ReadEnteredPassword>
	ReadEnteredPassword(PassPtr2);
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	0e 94 55 07 	call	0xeaa	; 0xeaa <ReadEnteredPassword>

	SavePassword(PassPtr1, PassPtr2);
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	2b 81       	ldd	r18, Y+3	; 0x03
    103c:	3c 81       	ldd	r19, Y+4	; 0x04
    103e:	b9 01       	movw	r22, r18
    1040:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <SavePassword>

}
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <CheckPassword>:
 *
 * OUTPUTS:N/A
 */

void CheckPassword(uint8 * PassPtr1, uint8 * PassPtr2)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <CheckPassword+0x6>
    1058:	00 d0       	rcall	.+0      	; 0x105a <CheckPassword+0x8>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	9a 83       	std	Y+2, r25	; 0x02
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	7c 83       	std	Y+4, r23	; 0x04
    1064:	6b 83       	std	Y+3, r22	; 0x03
	EEPROMRetrivePassword(PassPtr1);
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	9a 81       	ldd	r25, Y+2	; 0x02
    106a:	0e 94 b8 09 	call	0x1370	; 0x1370 <EEPROMRetrivePassword>
	ReadEnteredPassword(PassPtr2);
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	0e 94 55 07 	call	0xeaa	; 0xeaa <ReadEnteredPassword>
	if (!(strcmp(PassPtr1,PassPtr2))){
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	9a 81       	ldd	r25, Y+2	; 0x02
    107a:	2b 81       	ldd	r18, Y+3	; 0x03
    107c:	3c 81       	ldd	r19, Y+4	; 0x04
    107e:	b9 01       	movw	r22, r18
    1080:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <strcmp>
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	39 f4       	brne	.+14     	; 0x1096 <CheckPassword+0x44>
		UART_sendByte(TRUE);
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
		g_PasswordCorrectFlag=1;
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	80 93 84 00 	sts	0x0084, r24
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <CheckPassword+0x4e>
	}
	else{
		UART_sendByte(FALSE);
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
		g_PasswordCorrectFlag=0;
    109c:	10 92 84 00 	sts	0x0084, r1
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	cf 91       	pop	r28
    10aa:	df 91       	pop	r29
    10ac:	08 95       	ret

000010ae <CheckForPreviouslySavedPassword>:
 *
 * OUTPUTS:	N/A
 */

void CheckForPreviouslySavedPassword(uint8 * PassPtr1, uint8 * PassPtr2)
{
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	63 97       	sbiw	r28, 0x13	; 19
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	99 8b       	std	Y+17, r25	; 0x11
    10c4:	88 8b       	std	Y+16, r24	; 0x10
    10c6:	7b 8b       	std	Y+19, r23	; 0x13
    10c8:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 FirstSystemPassword_flag;
	EEPROM_readByte( 0x311, &FirstSystemPassword_flag ); /* Read current character in the external EEPROM*/
    10ca:	9e 01       	movw	r18, r28
    10cc:	21 5f       	subi	r18, 0xF1	; 241
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	81 e1       	ldi	r24, 0x11	; 17
    10d2:	93 e0       	ldi	r25, 0x03	; 3
    10d4:	b9 01       	movw	r22, r18
    10d6:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_readByte>
	if (FirstSystemPassword_flag)
    10da:	8f 85       	ldd	r24, Y+15	; 0x0f
    10dc:	88 23       	and	r24, r24
    10de:	41 f0       	breq	.+16     	; 0x10f0 <CheckForPreviouslySavedPassword+0x42>
	{
		EEPROMRetrivePassword(PassPtr1);
    10e0:	88 89       	ldd	r24, Y+16	; 0x10
    10e2:	99 89       	ldd	r25, Y+17	; 0x11
    10e4:	0e 94 b8 09 	call	0x1370	; 0x1370 <EEPROMRetrivePassword>
		UART_sendByte(TRUE);
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
    10ee:	81 c0       	rjmp	.+258    	; 0x11f2 <CheckForPreviouslySavedPassword+0x144>
	}
	else
	{
	EEPROM_writeByte( 0x311 , 1); /* Write current character in the external EEPROM */
    10f0:	81 e1       	ldi	r24, 0x11	; 17
    10f2:	93 e0       	ldi	r25, 0x03	; 3
    10f4:	61 e0       	ldi	r22, 0x01	; 1
    10f6:	0e 94 a5 0b 	call	0x174a	; 0x174a <EEPROM_writeByte>
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e2       	ldi	r26, 0x20	; 32
    1100:	b1 e4       	ldi	r27, 0x41	; 65
    1102:	8b 87       	std	Y+11, r24	; 0x0b
    1104:	9c 87       	std	Y+12, r25	; 0x0c
    1106:	ad 87       	std	Y+13, r26	; 0x0d
    1108:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	4a ef       	ldi	r20, 0xFA	; 250
    1118:	54 e4       	ldi	r21, 0x44	; 68
    111a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	8f 83       	std	Y+7, r24	; 0x07
    1124:	98 87       	std	Y+8, r25	; 0x08
    1126:	a9 87       	std	Y+9, r26	; 0x09
    1128:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    112a:	6f 81       	ldd	r22, Y+7	; 0x07
    112c:	78 85       	ldd	r23, Y+8	; 0x08
    112e:	89 85       	ldd	r24, Y+9	; 0x09
    1130:	9a 85       	ldd	r25, Y+10	; 0x0a
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e8       	ldi	r20, 0x80	; 128
    1138:	5f e3       	ldi	r21, 0x3F	; 63
    113a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113e:	88 23       	and	r24, r24
    1140:	2c f4       	brge	.+10     	; 0x114c <CheckForPreviouslySavedPassword+0x9e>
		__ticks = 1;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	3f c0       	rjmp	.+126    	; 0x11ca <CheckForPreviouslySavedPassword+0x11c>
	else if (__tmp > 65535)
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	3f ef       	ldi	r19, 0xFF	; 255
    1158:	4f e7       	ldi	r20, 0x7F	; 127
    115a:	57 e4       	ldi	r21, 0x47	; 71
    115c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1160:	18 16       	cp	r1, r24
    1162:	4c f5       	brge	.+82     	; 0x11b6 <CheckForPreviouslySavedPassword+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1164:	6b 85       	ldd	r22, Y+11	; 0x0b
    1166:	7c 85       	ldd	r23, Y+12	; 0x0c
    1168:	8d 85       	ldd	r24, Y+13	; 0x0d
    116a:	9e 85       	ldd	r25, Y+14	; 0x0e
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	bc 01       	movw	r22, r24
    117e:	cd 01       	movw	r24, r26
    1180:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	9e 83       	std	Y+6, r25	; 0x06
    118a:	8d 83       	std	Y+5, r24	; 0x05
    118c:	0f c0       	rjmp	.+30     	; 0x11ac <CheckForPreviouslySavedPassword+0xfe>
    118e:	88 ec       	ldi	r24, 0xC8	; 200
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <CheckForPreviouslySavedPassword+0xec>
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a2:	8d 81       	ldd	r24, Y+5	; 0x05
    11a4:	9e 81       	ldd	r25, Y+6	; 0x06
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ac:	8d 81       	ldd	r24, Y+5	; 0x05
    11ae:	9e 81       	ldd	r25, Y+6	; 0x06
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	69 f7       	brne	.-38     	; 0x118e <CheckForPreviouslySavedPassword+0xe0>
    11b4:	14 c0       	rjmp	.+40     	; 0x11de <CheckForPreviouslySavedPassword+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b6:	6f 81       	ldd	r22, Y+7	; 0x07
    11b8:	78 85       	ldd	r23, Y+8	; 0x08
    11ba:	89 85       	ldd	r24, Y+9	; 0x09
    11bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
    11ca:	8d 81       	ldd	r24, Y+5	; 0x05
    11cc:	9e 81       	ldd	r25, Y+6	; 0x06
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	89 81       	ldd	r24, Y+1	; 0x01
    11d4:	9a 81       	ldd	r25, Y+2	; 0x02
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	f1 f7       	brne	.-4      	; 0x11d6 <CheckForPreviouslySavedPassword+0x128>
    11da:	9a 83       	std	Y+2, r25	; 0x02
    11dc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	UART_sendByte(FALSE);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
	ChangePassword(PassPtr1, PassPtr2);
    11e4:	88 89       	ldd	r24, Y+16	; 0x10
    11e6:	99 89       	ldd	r25, Y+17	; 0x11
    11e8:	2a 89       	ldd	r18, Y+18	; 0x12
    11ea:	3b 89       	ldd	r19, Y+19	; 0x13
    11ec:	b9 01       	movw	r22, r18
    11ee:	0e 94 09 08 	call	0x1012	; 0x1012 <ChangePassword>
	}
}
    11f2:	63 96       	adiw	r28, 0x13	; 19
    11f4:	0f b6       	in	r0, 0x3f	; 63
    11f6:	f8 94       	cli
    11f8:	de bf       	out	0x3e, r29	; 62
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	cd bf       	out	0x3d, r28	; 61
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <InformMC1>:
/********************************************************************************************************/
void InformMC1(uint8 SelectedFn)
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	0f 92       	push	r0
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(SelectedFn);
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
}
    1216:	0f 90       	pop	r0
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <EEPROMStorePassword>:
 *
 * OUTPUTS:	N/A
 */

void EEPROMStorePassword(uint8 * PassPtr)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	64 97       	sbiw	r28, 0x14	; 20
    1228:	0f b6       	in	r0, 0x3f	; 63
    122a:	f8 94       	cli
    122c:	de bf       	out	0x3e, r29	; 62
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	cd bf       	out	0x3d, r28	; 61
    1232:	9c 8b       	std	Y+20, r25	; 0x14
    1234:	8b 8b       	std	Y+19, r24	; 0x13
	uint8 Character ,Counter= 0;
    1236:	19 8a       	std	Y+17, r1	; 0x11
	uint16 FirstAddress = 0x0312;
    1238:	82 e1       	ldi	r24, 0x12	; 18
    123a:	93 e0       	ldi	r25, 0x03	; 3
    123c:	98 8b       	std	Y+16, r25	; 0x10
    123e:	8f 87       	std	Y+15, r24	; 0x0f
	do
	{
		Character = PassPtr[Counter];
    1240:	89 89       	ldd	r24, Y+17	; 0x11
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	8b 89       	ldd	r24, Y+19	; 0x13
    1248:	9c 89       	ldd	r25, Y+20	; 0x14
    124a:	fc 01       	movw	r30, r24
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	80 81       	ld	r24, Z
    1252:	8a 8b       	std	Y+18, r24	; 0x12
		EEPROM_writeByte( FirstAddress + Counter , Character); /* Write current character in the external EEPROM */
    1254:	89 89       	ldd	r24, Y+17	; 0x11
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	8f 85       	ldd	r24, Y+15	; 0x0f
    125c:	98 89       	ldd	r25, Y+16	; 0x10
    125e:	82 0f       	add	r24, r18
    1260:	93 1f       	adc	r25, r19
    1262:	6a 89       	ldd	r22, Y+18	; 0x12
    1264:	0e 94 a5 0b 	call	0x174a	; 0x174a <EEPROM_writeByte>
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	a0 e2       	ldi	r26, 0x20	; 32
    126e:	b1 e4       	ldi	r27, 0x41	; 65
    1270:	8b 87       	std	Y+11, r24	; 0x0b
    1272:	9c 87       	std	Y+12, r25	; 0x0c
    1274:	ad 87       	std	Y+13, r26	; 0x0d
    1276:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1278:	6b 85       	ldd	r22, Y+11	; 0x0b
    127a:	7c 85       	ldd	r23, Y+12	; 0x0c
    127c:	8d 85       	ldd	r24, Y+13	; 0x0d
    127e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	4a ef       	ldi	r20, 0xFA	; 250
    1286:	54 e4       	ldi	r21, 0x44	; 68
    1288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128c:	dc 01       	movw	r26, r24
    128e:	cb 01       	movw	r24, r22
    1290:	8f 83       	std	Y+7, r24	; 0x07
    1292:	98 87       	std	Y+8, r25	; 0x08
    1294:	a9 87       	std	Y+9, r26	; 0x09
    1296:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1298:	6f 81       	ldd	r22, Y+7	; 0x07
    129a:	78 85       	ldd	r23, Y+8	; 0x08
    129c:	89 85       	ldd	r24, Y+9	; 0x09
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	40 e8       	ldi	r20, 0x80	; 128
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ac:	88 23       	and	r24, r24
    12ae:	2c f4       	brge	.+10     	; 0x12ba <EEPROMStorePassword+0x9c>
		__ticks = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
    12b8:	3f c0       	rjmp	.+126    	; 0x1338 <EEPROMStorePassword+0x11a>
	else if (__tmp > 65535)
    12ba:	6f 81       	ldd	r22, Y+7	; 0x07
    12bc:	78 85       	ldd	r23, Y+8	; 0x08
    12be:	89 85       	ldd	r24, Y+9	; 0x09
    12c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	3f ef       	ldi	r19, 0xFF	; 255
    12c6:	4f e7       	ldi	r20, 0x7F	; 127
    12c8:	57 e4       	ldi	r21, 0x47	; 71
    12ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ce:	18 16       	cp	r1, r24
    12d0:	4c f5       	brge	.+82     	; 0x1324 <EEPROMStorePassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
    12fa:	0f c0       	rjmp	.+30     	; 0x131a <EEPROMStorePassword+0xfc>
    12fc:	88 ec       	ldi	r24, 0xC8	; 200
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <EEPROMStorePassword+0xea>
    130c:	9c 83       	std	Y+4, r25	; 0x04
    130e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1310:	8d 81       	ldd	r24, Y+5	; 0x05
    1312:	9e 81       	ldd	r25, Y+6	; 0x06
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	9e 83       	std	Y+6, r25	; 0x06
    1318:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	69 f7       	brne	.-38     	; 0x12fc <EEPROMStorePassword+0xde>
    1322:	14 c0       	rjmp	.+40     	; 0x134c <EEPROMStorePassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1324:	6f 81       	ldd	r22, Y+7	; 0x07
    1326:	78 85       	ldd	r23, Y+8	; 0x08
    1328:	89 85       	ldd	r24, Y+9	; 0x09
    132a:	9a 85       	ldd	r25, Y+10	; 0x0a
    132c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	8d 81       	ldd	r24, Y+5	; 0x05
    133a:	9e 81       	ldd	r25, Y+6	; 0x06
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	9a 81       	ldd	r25, Y+2	; 0x02
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	f1 f7       	brne	.-4      	; 0x1344 <EEPROMStorePassword+0x126>
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		Counter++;
    134c:	89 89       	ldd	r24, Y+17	; 0x11
    134e:	8f 5f       	subi	r24, 0xFF	; 255
    1350:	89 8b       	std	Y+17, r24	; 0x11
	}
	while(Character != NULL_PTR);
    1352:	8a 89       	ldd	r24, Y+18	; 0x12
    1354:	88 2f       	mov	r24, r24
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	00 97       	sbiw	r24, 0x00	; 0
    135a:	09 f0       	breq	.+2      	; 0x135e <EEPROMStorePassword+0x140>
    135c:	71 cf       	rjmp	.-286    	; 0x1240 <EEPROMStorePassword+0x22>
}
    135e:	64 96       	adiw	r28, 0x14	; 20
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <EEPROMRetrivePassword>:
 *
 * OUTPUTS:	N/A
 */

void EEPROMRetrivePassword(uint8 * PassPtr)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <EEPROMRetrivePassword+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <EEPROMRetrivePassword+0x8>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9d 83       	std	Y+5, r25	; 0x05
    1380:	8c 83       	std	Y+4, r24	; 0x04
	uint8 Counter= 0;
    1382:	1b 82       	std	Y+3, r1	; 0x03
	uint16 FirstAddress = 0x0312;
    1384:	82 e1       	ldi	r24, 0x12	; 18
    1386:	93 e0       	ldi	r25, 0x03	; 3
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
	do
	{
	//_delay_ms(10);
	EEPROM_readByte( FirstAddress + Counter , PassPtr + Counter ); /* Write current character in the external EEPROM */
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	9a 81       	ldd	r25, Y+2	; 0x02
    1396:	a9 01       	movw	r20, r18
    1398:	48 0f       	add	r20, r24
    139a:	59 1f       	adc	r21, r25
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	28 0f       	add	r18, r24
    13a8:	39 1f       	adc	r19, r25
    13aa:	ca 01       	movw	r24, r20
    13ac:	b9 01       	movw	r22, r18
    13ae:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <EEPROM_readByte>
	Counter++;
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8b 83       	std	Y+3, r24	; 0x03
	}
	while(PassPtr[Counter-1] != NULL_PTR);
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	88 2f       	mov	r24, r24
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	9c 01       	movw	r18, r24
    13c0:	21 50       	subi	r18, 0x01	; 1
    13c2:	30 40       	sbci	r19, 0x00	; 0
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	fc 01       	movw	r30, r24
    13ca:	e2 0f       	add	r30, r18
    13cc:	f3 1f       	adc	r31, r19
    13ce:	80 81       	ld	r24, Z
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	d1 f6       	brne	.-76     	; 0x138c <EEPROMRetrivePassword+0x1c>
	//PassPtr[Counter] = NULL_PTR;
}
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	08 95       	ret

000013e8 <TickCounter>:
 *
 * OUTPUTS:	N/A
 */

void TickCounter(void)
{
    13e8:	df 93       	push	r29
    13ea:	cf 93       	push	r28
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    13f0:	80 91 82 00 	lds	r24, 0x0082
    13f4:	8f 5f       	subi	r24, 0xFF	; 255
    13f6:	80 93 82 00 	sts	0x0082, r24
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    13fa:	80 91 82 00 	lds	r24, 0x0082
    13fe:	8f 31       	cpi	r24, 0x1F	; 31
    1400:	29 f4       	brne	.+10     	; 0x140c <TickCounter+0x24>
	{
		g_FinshedCounting=1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 83 00 	sts	0x0083, r24
		g_tick = 0; //clear the tick counter again to count a new 0.5 second
    1408:	10 92 82 00 	sts	0x0082, r1
	}
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <CountByTimer0>:
 * 		uint8 Seconds: Number of desired seconds to delay
 *
 * OUTPUTS:	N/A
 */
void CountByTimer0(uint8 Seconds)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <CountByTimer0+0x6>
    1418:	00 d0       	rcall	.+0      	; 0x141a <CountByTimer0+0x8>
    141a:	00 d0       	rcall	.+0      	; 0x141c <CountByTimer0+0xa>
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	8e 83       	std	Y+6, r24	; 0x06
	Timer0_DeInit();
    1422:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Timer0_DeInit>
	Timer0_ConfigType Timer0_Structure={COMPARE,F_CPU_1024,0,250};
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	8a 83       	std	Y+2, r24	; 0x02
    142a:	85 e0       	ldi	r24, 0x05	; 5
    142c:	8b 83       	std	Y+3, r24	; 0x03
    142e:	1c 82       	std	Y+4, r1	; 0x04
    1430:	8a ef       	ldi	r24, 0xFA	; 250
    1432:	8d 83       	std	Y+5, r24	; 0x05
	Timer0_Init(&Timer0_Structure);
    1434:	ce 01       	movw	r24, r28
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	0e 94 a2 0a 	call	0x1544	; 0x1544 <Timer0_Init>
	Timer0_setCallBack(TickCounter);
    143c:	84 ef       	ldi	r24, 0xF4	; 244
    143e:	99 e0       	ldi	r25, 0x09	; 9
    1440:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Timer0_setCallBack>
	uint8 SecondsCounter=0;
    1444:	19 82       	std	Y+1, r1	; 0x01
	while(1)
    {

		if(g_FinshedCounting==1)
    1446:	80 91 83 00 	lds	r24, 0x0083
    144a:	81 30       	cpi	r24, 0x01	; 1
    144c:	29 f4       	brne	.+10     	; 0x1458 <CountByTimer0+0x46>
		{
			SecondsCounter++;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	89 83       	std	Y+1, r24	; 0x01
			g_FinshedCounting=0;
    1454:	10 92 83 00 	sts	0x0083, r1
		}

		if(SecondsCounter==Seconds)
    1458:	99 81       	ldd	r25, Y+1	; 0x01
    145a:	8e 81       	ldd	r24, Y+6	; 0x06
    145c:	98 17       	cp	r25, r24
    145e:	99 f7       	brne	.-26     	; 0x1446 <CountByTimer0+0x34>
		{
			SecondsCounter=0;
    1460:	19 82       	std	Y+1, r1	; 0x01
			Timer0_DeInit();
    1462:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <Timer0_DeInit>
			return;
		}
    }
}
    1466:	26 96       	adiw	r28, 0x06	; 6
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	2f 93       	push	r18
    1484:	3f 93       	push	r19
    1486:	4f 93       	push	r20
    1488:	5f 93       	push	r21
    148a:	6f 93       	push	r22
    148c:	7f 93       	push	r23
    148e:	8f 93       	push	r24
    1490:	9f 93       	push	r25
    1492:	af 93       	push	r26
    1494:	bf 93       	push	r27
    1496:	ef 93       	push	r30
    1498:	ff 93       	push	r31
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    14a2:	80 91 86 00 	lds	r24, 0x0086
    14a6:	90 91 87 00 	lds	r25, 0x0087
    14aa:	00 97       	sbiw	r24, 0x00	; 0
    14ac:	29 f0       	breq	.+10     	; 0x14b8 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    14ae:	e0 91 86 00 	lds	r30, 0x0086
    14b2:	f0 91 87 00 	lds	r31, 0x0087
    14b6:	09 95       	icall
		}
}
    14b8:	cf 91       	pop	r28
    14ba:	df 91       	pop	r29
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	0f 90       	pop	r0
    14da:	1f 90       	pop	r1
    14dc:	18 95       	reti

000014de <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    14de:	1f 92       	push	r1
    14e0:	0f 92       	push	r0
    14e2:	0f b6       	in	r0, 0x3f	; 63
    14e4:	0f 92       	push	r0
    14e6:	11 24       	eor	r1, r1
    14e8:	2f 93       	push	r18
    14ea:	3f 93       	push	r19
    14ec:	4f 93       	push	r20
    14ee:	5f 93       	push	r21
    14f0:	6f 93       	push	r22
    14f2:	7f 93       	push	r23
    14f4:	8f 93       	push	r24
    14f6:	9f 93       	push	r25
    14f8:	af 93       	push	r26
    14fa:	bf 93       	push	r27
    14fc:	ef 93       	push	r30
    14fe:	ff 93       	push	r31
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1508:	80 91 86 00 	lds	r24, 0x0086
    150c:	90 91 87 00 	lds	r25, 0x0087
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	29 f0       	breq	.+10     	; 0x151e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1514:	e0 91 86 00 	lds	r30, 0x0086
    1518:	f0 91 87 00 	lds	r31, 0x0087
    151c:	09 95       	icall
	}
}
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	ff 91       	pop	r31
    1524:	ef 91       	pop	r30
    1526:	bf 91       	pop	r27
    1528:	af 91       	pop	r26
    152a:	9f 91       	pop	r25
    152c:	8f 91       	pop	r24
    152e:	7f 91       	pop	r23
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <Timer0_Init+0xa>
    154e:	00 d0       	rcall	.+0      	; 0x1550 <Timer0_Init+0xc>
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9a 83       	std	Y+2, r25	; 0x02
    1556:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Timer0_OpMode){
    1558:	e9 81       	ldd	r30, Y+1	; 0x01
    155a:	fa 81       	ldd	r31, Y+2	; 0x02
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3c 83       	std	Y+4, r19	; 0x04
    1564:	2b 83       	std	Y+3, r18	; 0x03
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	9c 81       	ldd	r25, Y+4	; 0x04
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	91 05       	cpc	r25, r1
    156e:	71 f1       	breq	.+92     	; 0x15cc <Timer0_Init+0x88>
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	e2 30       	cpi	r30, 0x02	; 2
    1576:	f1 05       	cpc	r31, r1
    1578:	09 f4       	brne	.+2      	; 0x157c <Timer0_Init+0x38>
    157a:	50 c0       	rjmp	.+160    	; 0x161c <Timer0_Init+0xd8>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	21 15       	cp	r18, r1
    1582:	31 05       	cpc	r19, r1
    1584:	09 f0       	breq	.+2      	; 0x1588 <Timer0_Init+0x44>
    1586:	7f c0       	rjmp	.+254    	; 0x1686 <Timer0_Init+0x142>

		case OVERFLOW:

			SREG  |= (1<<7);           // Enable global interrupts in MC.
    1588:	af e5       	ldi	r26, 0x5F	; 95
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ef e5       	ldi	r30, 0x5F	; 95
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    1596:	a2 e5       	ldi	r26, 0x52	; 82
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e9 81       	ldd	r30, Y+1	; 0x01
    159c:	fa 81       	ldd	r31, Y+2	; 0x02
    159e:	82 81       	ldd	r24, Z+2	; 0x02
    15a0:	8c 93       	st	X, r24

			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8c 93       	st	X, r24

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    15b0:	a3 e5       	ldi	r26, 0x53	; 83
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	e9 81       	ldd	r30, Y+1	; 0x01
    15b6:	fa 81       	ldd	r31, Y+2	; 0x02
    15b8:	81 81       	ldd	r24, Z+1	; 0x01
    15ba:	8c 93       	st	X, r24
			/* Configure the timer control register
			* 1. Non PWM mode FOC0=1
			* 2. Normal Mode WGM01=0 & WGM00=0
			* 3. Normal Mode COM00=0 & COM01=0
			*/
			TCCR0 |= (1<<FOC0);
    15bc:	a3 e5       	ldi	r26, 0x53	; 83
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e3 e5       	ldi	r30, 0x53	; 83
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 68       	ori	r24, 0x80	; 128
    15c8:	8c 93       	st	X, r24
    15ca:	5d c0       	rjmp	.+186    	; 0x1686 <Timer0_Init+0x142>
			break;

		case COMPARE:

			SREG  |= (1<<7);           // Enable global interrupts in MC.
    15cc:	af e5       	ldi	r26, 0x5F	; 95
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	ef e5       	ldi	r30, 0x5F	; 95
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	80 68       	ori	r24, 0x80	; 128
    15d8:	8c 93       	st	X, r24

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    15da:	a2 e5       	ldi	r26, 0x52	; 82
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e9 81       	ldd	r30, Y+1	; 0x01
    15e0:	fa 81       	ldd	r31, Y+2	; 0x02
    15e2:	82 81       	ldd	r24, Z+2	; 0x02
    15e4:	8c 93       	st	X, r24

			OCR0  = Config_Ptr->Timer0_CompareValue; // Set Compare Value
    15e6:	ac e5       	ldi	r26, 0x5C	; 92
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	83 81       	ldd	r24, Z+3	; 0x03
    15f0:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    15f2:	a9 e5       	ldi	r26, 0x59	; 89
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e9 e5       	ldi	r30, 0x59	; 89
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	8c 93       	st	X, r24

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    1600:	a3 e5       	ldi	r26, 0x53	; 83
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e9 81       	ldd	r30, Y+1	; 0x01
    1606:	fa 81       	ldd	r31, Y+2	; 0x02
    1608:	81 81       	ldd	r24, Z+1	; 0x01
    160a:	8c 93       	st	X, r24

			/* Configure timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 */
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    160c:	a3 e5       	ldi	r26, 0x53	; 83
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e3 e5       	ldi	r30, 0x53	; 83
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	88 68       	ori	r24, 0x88	; 136
    1618:	8c 93       	st	X, r24
    161a:	35 c0       	rjmp	.+106    	; 0x1686 <Timer0_Init+0x142>

			break;

		case PWM:

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    161c:	a2 e5       	ldi	r26, 0x52	; 82
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	e9 81       	ldd	r30, Y+1	; 0x01
    1622:	fa 81       	ldd	r31, Y+2	; 0x02
    1624:	82 81       	ldd	r24, Z+2	; 0x02
    1626:	8c 93       	st	X, r24

			OCR0  = (uint8)(Config_Ptr->Timer0_CompareValue*255/100); // Set Compare Value
    1628:	0c e5       	ldi	r16, 0x5C	; 92
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	e9 81       	ldd	r30, Y+1	; 0x01
    162e:	fa 81       	ldd	r31, Y+2	; 0x02
    1630:	83 81       	ldd	r24, Z+3	; 0x03
    1632:	48 2f       	mov	r20, r24
    1634:	50 e0       	ldi	r21, 0x00	; 0
    1636:	ca 01       	movw	r24, r20
    1638:	9c 01       	movw	r18, r24
    163a:	22 0f       	add	r18, r18
    163c:	33 1f       	adc	r19, r19
    163e:	c9 01       	movw	r24, r18
    1640:	96 95       	lsr	r25
    1642:	98 2f       	mov	r25, r24
    1644:	88 27       	eor	r24, r24
    1646:	97 95       	ror	r25
    1648:	87 95       	ror	r24
    164a:	82 1b       	sub	r24, r18
    164c:	93 0b       	sbc	r25, r19
    164e:	84 0f       	add	r24, r20
    1650:	95 1f       	adc	r25, r21
    1652:	24 e6       	ldi	r18, 0x64	; 100
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <__divmodhi4>
    165c:	cb 01       	movw	r24, r22
    165e:	f8 01       	movw	r30, r16
    1660:	80 83       	st	Z, r24

			GPIO_setupPinDirection( PORTB_ID, PIN3_ID, PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	63 e0       	ldi	r22, 0x03	; 3
    1666:	41 e0       	ldi	r20, 0x01	; 1
    1668:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    166c:	a3 e5       	ldi	r26, 0x53	; 83
    166e:	b0 e0       	ldi	r27, 0x00	; 0
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	81 81       	ldd	r24, Z+1	; 0x01
    1676:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Fast PWM mode FOC0=0
			 * 2. Fast PWM Mode WGM01=1 & WGM00=1
			 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
			 */
			TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    1678:	a3 e5       	ldi	r26, 0x53	; 83
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e3 e5       	ldi	r30, 0x53	; 83
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	88 66       	ori	r24, 0x68	; 104
    1684:	8c 93       	st	X, r24
			break;
	}


}
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <Timer0_setCallBack>:


void Timer0_setCallBack(void(*a_ptr)(void))
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	00 d0       	rcall	.+0      	; 0x169e <Timer0_setCallBack+0x6>
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	9a 83       	std	Y+2, r25	; 0x02
    16a4:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    16a6:	89 81       	ldd	r24, Y+1	; 0x01
    16a8:	9a 81       	ldd	r25, Y+2	; 0x02
    16aa:	90 93 87 00 	sts	0x0087, r25
    16ae:	80 93 86 00 	sts	0x0086, r24
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCCR0 = 0;
    16c4:	e3 e5       	ldi	r30, 0x53	; 83
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	10 82       	st	Z, r1
	TCNT0 = 0;
    16ca:	e2 e5       	ldi	r30, 0x52	; 82
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
	OCR0  = 0;
    16d0:	ec e5       	ldi	r30, 0x5C	; 92
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	10 82       	st	Z, r1

	/* Disable the overflow and compare interrupts */
	TIMSK &= ~(1<<TOIE0);
    16d6:	a9 e5       	ldi	r26, 0x59	; 89
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e9 e5       	ldi	r30, 0x59	; 89
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8e 7f       	andi	r24, 0xFE	; 254
    16e2:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);
    16e4:	a9 e5       	ldi	r26, 0x59	; 89
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e9 e5       	ldi	r30, 0x59	; 89
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	8d 7f       	andi	r24, 0xFD	; 253
    16f0:	8c 93       	st	X, r24
}
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <Buzzer_Init>:
 * Description : Function to initialize the buzzer driver
 * 	1. Set the buzzer pin as output pin.
 * 	2. Write logical low on the buzzer pin.
 */
void Buzzer_Init(void)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Buzzer_PORT_ID, Buzzer_PIN_ID, PIN_OUTPUT);
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	41 e0       	ldi	r20, 0x01	; 1
    1706:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	60 e0       	ldi	r22, 0x00	; 0
    170e:	40 e0       	ldi	r20, 0x00	; 0
    1710:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>

}
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	08 95       	ret

0000171a <Buzzer_ON>:
 /*
 * Description : Function to turn the buzzer on:
 * 	1. write logical high on the buzzer pin.
 */
void Buzzer_ON(void)
{
    171a:	df 93       	push	r29
    171c:	cf 93       	push	r28
    171e:	cd b7       	in	r28, 0x3d	; 61
    1720:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_HIGH);
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	60 e0       	ldi	r22, 0x00	; 0
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <Buzzer_OFF>:
 /*
 * Description : Function to turn the buzzer off:
 * 	1. write logical low on the buzzer pin.
 */
void Buzzer_OFF(void)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Buzzer_PORT_ID, Buzzer_PIN_ID, LOGIC_LOW);
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	60 e0       	ldi	r22, 0x00	; 0
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
}
    1744:	cf 91       	pop	r28
    1746:	df 91       	pop	r29
    1748:	08 95       	ret

0000174a <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    174a:	df 93       	push	r29
    174c:	cf 93       	push	r28
    174e:	00 d0       	rcall	.+0      	; 0x1750 <EEPROM_writeByte+0x6>
    1750:	00 d0       	rcall	.+0      	; 0x1752 <EEPROM_writeByte+0x8>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
    175a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    175c:	0e 94 de 14 	call	0x29bc	; 0x29bc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1760:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    1764:	88 30       	cpi	r24, 0x08	; 8
    1766:	11 f0       	breq	.+4      	; 0x176c <EEPROM_writeByte+0x22>
        return ERROR;
    1768:	1c 82       	std	Y+4, r1	; 0x04
    176a:	28 c0       	rjmp	.+80     	; 0x17bc <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	80 70       	andi	r24, 0x00	; 0
    1772:	97 70       	andi	r25, 0x07	; 7
    1774:	88 0f       	add	r24, r24
    1776:	89 2f       	mov	r24, r25
    1778:	88 1f       	adc	r24, r24
    177a:	99 0b       	sbc	r25, r25
    177c:	91 95       	neg	r25
    177e:	80 6a       	ori	r24, 0xA0	; 160
    1780:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1784:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    1788:	88 31       	cpi	r24, 0x18	; 24
    178a:	11 f0       	breq	.+4      	; 0x1790 <EEPROM_writeByte+0x46>
        return ERROR; 
    178c:	1c 82       	std	Y+4, r1	; 0x04
    178e:	16 c0       	rjmp	.+44     	; 0x17bc <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1796:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    179a:	88 32       	cpi	r24, 0x28	; 40
    179c:	11 f0       	breq	.+4      	; 0x17a2 <EEPROM_writeByte+0x58>
        return ERROR;
    179e:	1c 82       	std	Y+4, r1	; 0x04
    17a0:	0d c0       	rjmp	.+26     	; 0x17bc <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17a8:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    17ac:	88 32       	cpi	r24, 0x28	; 40
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <EEPROM_writeByte+0x6a>
        return ERROR;
    17b0:	1c 82       	std	Y+4, r1	; 0x04
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17b4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <TWI_stop>
	
    return SUCCESS;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	8c 83       	std	Y+4, r24	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <EEPROM_readByte+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <EEPROM_readByte+0x8>
    17d4:	0f 92       	push	r0
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	9a 83       	std	Y+2, r25	; 0x02
    17dc:	89 83       	std	Y+1, r24	; 0x01
    17de:	7c 83       	std	Y+4, r23	; 0x04
    17e0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    17e2:	0e 94 de 14 	call	0x29bc	; 0x29bc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    17e6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    17ea:	88 30       	cpi	r24, 0x08	; 8
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <EEPROM_readByte+0x26>
        return ERROR;
    17ee:	1d 82       	std	Y+5, r1	; 0x05
    17f0:	44 c0       	rjmp	.+136    	; 0x187a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	9a 81       	ldd	r25, Y+2	; 0x02
    17f6:	80 70       	andi	r24, 0x00	; 0
    17f8:	97 70       	andi	r25, 0x07	; 7
    17fa:	88 0f       	add	r24, r24
    17fc:	89 2f       	mov	r24, r25
    17fe:	88 1f       	adc	r24, r24
    1800:	99 0b       	sbc	r25, r25
    1802:	91 95       	neg	r25
    1804:	80 6a       	ori	r24, 0xA0	; 160
    1806:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    180a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    180e:	88 31       	cpi	r24, 0x18	; 24
    1810:	11 f0       	breq	.+4      	; 0x1816 <EEPROM_readByte+0x4a>
        return ERROR;
    1812:	1d 82       	std	Y+5, r1	; 0x05
    1814:	32 c0       	rjmp	.+100    	; 0x187a <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    181c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    1820:	88 32       	cpi	r24, 0x28	; 40
    1822:	11 f0       	breq	.+4      	; 0x1828 <EEPROM_readByte+0x5c>
        return ERROR;
    1824:	1d 82       	std	Y+5, r1	; 0x05
    1826:	29 c0       	rjmp	.+82     	; 0x187a <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1828:	0e 94 de 14 	call	0x29bc	; 0x29bc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    182c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    1830:	80 31       	cpi	r24, 0x10	; 16
    1832:	11 f0       	breq	.+4      	; 0x1838 <EEPROM_readByte+0x6c>
        return ERROR;
    1834:	1d 82       	std	Y+5, r1	; 0x05
    1836:	21 c0       	rjmp	.+66     	; 0x187a <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	80 70       	andi	r24, 0x00	; 0
    183e:	97 70       	andi	r25, 0x07	; 7
    1840:	88 0f       	add	r24, r24
    1842:	89 2f       	mov	r24, r25
    1844:	88 1f       	adc	r24, r24
    1846:	99 0b       	sbc	r25, r25
    1848:	91 95       	neg	r25
    184a:	81 6a       	ori	r24, 0xA1	; 161
    184c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1850:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    1854:	80 34       	cpi	r24, 0x40	; 64
    1856:	11 f0       	breq	.+4      	; 0x185c <EEPROM_readByte+0x90>
        return ERROR;
    1858:	1d 82       	std	Y+5, r1	; 0x05
    185a:	0f c0       	rjmp	.+30     	; 0x187a <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    185c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <TWI_readByteWithNACK>
    1860:	eb 81       	ldd	r30, Y+3	; 0x03
    1862:	fc 81       	ldd	r31, Y+4	; 0x04
    1864:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1866:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <TWI_getStatus>
    186a:	88 35       	cpi	r24, 0x58	; 88
    186c:	11 f0       	breq	.+4      	; 0x1872 <EEPROM_readByte+0xa6>
        return ERROR;
    186e:	1d 82       	std	Y+5, r1	; 0x05
    1870:	04 c0       	rjmp	.+8      	; 0x187a <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1872:	0e 94 ee 14 	call	0x29dc	; 0x29dc <TWI_stop>

    return SUCCESS;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <GPIO_setupPinDirection+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <GPIO_setupPinDirection+0x8>
    1894:	0f 92       	push	r0
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
    189e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <GPIO_setupPinDirection+0x1c>
    18a6:	d5 c0       	rjmp	.+426    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <GPIO_setupPinDirection+0x24>
    18ae:	d1 c0       	rjmp	.+418    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3d 83       	std	Y+5, r19	; 0x05
    18b8:	2c 83       	std	Y+4, r18	; 0x04
    18ba:	8c 81       	ldd	r24, Y+4	; 0x04
    18bc:	9d 81       	ldd	r25, Y+5	; 0x05
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <GPIO_setupPinDirection+0x3a>
    18c4:	43 c0       	rjmp	.+134    	; 0x194c <GPIO_setupPinDirection+0xc0>
    18c6:	2c 81       	ldd	r18, Y+4	; 0x04
    18c8:	3d 81       	ldd	r19, Y+5	; 0x05
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	2c f4       	brge	.+10     	; 0x18da <GPIO_setupPinDirection+0x4e>
    18d0:	8c 81       	ldd	r24, Y+4	; 0x04
    18d2:	9d 81       	ldd	r25, Y+5	; 0x05
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	71 f0       	breq	.+28     	; 0x18f4 <GPIO_setupPinDirection+0x68>
    18d8:	bc c0       	rjmp	.+376    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
    18da:	2c 81       	ldd	r18, Y+4	; 0x04
    18dc:	3d 81       	ldd	r19, Y+5	; 0x05
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <GPIO_setupPinDirection+0x5a>
    18e4:	5f c0       	rjmp	.+190    	; 0x19a4 <GPIO_setupPinDirection+0x118>
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <GPIO_setupPinDirection+0x66>
    18f0:	85 c0       	rjmp	.+266    	; 0x19fc <GPIO_setupPinDirection+0x170>
    18f2:	af c0       	rjmp	.+350    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	a1 f4       	brne	.+40     	; 0x1922 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    18fa:	aa e3       	ldi	r26, 0x3A	; 58
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	ea e3       	ldi	r30, 0x3A	; 58
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_setupPinDirection+0x8c>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_setupPinDirection+0x88>
    191c:	84 2b       	or	r24, r20
    191e:	8c 93       	st	X, r24
    1920:	98 c0       	rjmp	.+304    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1922:	aa e3       	ldi	r26, 0x3A	; 58
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	ea e3       	ldi	r30, 0x3A	; 58
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	02 2e       	mov	r0, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <GPIO_setupPinDirection+0xb4>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	0a 94       	dec	r0
    1942:	e2 f7       	brpl	.-8      	; 0x193c <GPIO_setupPinDirection+0xb0>
    1944:	80 95       	com	r24
    1946:	84 23       	and	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	83 c0       	rjmp	.+262    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	81 30       	cpi	r24, 0x01	; 1
    1950:	a1 f4       	brne	.+40     	; 0x197a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1952:	a7 e3       	ldi	r26, 0x37	; 55
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e7 e3       	ldi	r30, 0x37	; 55
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_setupPinDirection+0xe4>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_setupPinDirection+0xe0>
    1974:	84 2b       	or	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	6c c0       	rjmp	.+216    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    197a:	a7 e3       	ldi	r26, 0x37	; 55
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e7 e3       	ldi	r30, 0x37	; 55
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <GPIO_setupPinDirection+0x10c>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <GPIO_setupPinDirection+0x108>
    199c:	80 95       	com	r24
    199e:	84 23       	and	r24, r20
    19a0:	8c 93       	st	X, r24
    19a2:	57 c0       	rjmp	.+174    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	81 30       	cpi	r24, 0x01	; 1
    19a8:	a1 f4       	brne	.+40     	; 0x19d2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19aa:	a4 e3       	ldi	r26, 0x34	; 52
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	e4 e3       	ldi	r30, 0x34	; 52
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 2e       	mov	r0, r18
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <GPIO_setupPinDirection+0x13c>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	0a 94       	dec	r0
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <GPIO_setupPinDirection+0x138>
    19cc:	84 2b       	or	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	40 c0       	rjmp	.+128    	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    19d2:	a4 e3       	ldi	r26, 0x34	; 52
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e4 e3       	ldi	r30, 0x34	; 52
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	48 2f       	mov	r20, r24
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	02 2e       	mov	r0, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <GPIO_setupPinDirection+0x164>
    19ec:	88 0f       	add	r24, r24
    19ee:	99 1f       	adc	r25, r25
    19f0:	0a 94       	dec	r0
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <GPIO_setupPinDirection+0x160>
    19f4:	80 95       	com	r24
    19f6:	84 23       	and	r24, r20
    19f8:	8c 93       	st	X, r24
    19fa:	2b c0       	rjmp	.+86     	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	a1 f4       	brne	.+40     	; 0x1a2a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a02:	a1 e3       	ldi	r26, 0x31	; 49
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e1 e3       	ldi	r30, 0x31	; 49
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	02 2e       	mov	r0, r18
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <GPIO_setupPinDirection+0x194>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	0a 94       	dec	r0
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <GPIO_setupPinDirection+0x190>
    1a24:	84 2b       	or	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a2a:	a1 e3       	ldi	r26, 0x31	; 49
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e1 e3       	ldi	r30, 0x31	; 49
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <GPIO_setupPinDirection+0x1bc>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <GPIO_setupPinDirection+0x1b8>
    1a4c:	80 95       	com	r24
    1a4e:	84 23       	and	r24, r20
    1a50:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <GPIO_writePin+0x6>
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <GPIO_writePin+0x8>
    1a6a:	0f 92       	push	r0
    1a6c:	cd b7       	in	r28, 0x3d	; 61
    1a6e:	de b7       	in	r29, 0x3e	; 62
    1a70:	89 83       	std	Y+1, r24	; 0x01
    1a72:	6a 83       	std	Y+2, r22	; 0x02
    1a74:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 30       	cpi	r24, 0x08	; 8
    1a7a:	08 f0       	brcs	.+2      	; 0x1a7e <GPIO_writePin+0x1c>
    1a7c:	d5 c0       	rjmp	.+426    	; 0x1c28 <GPIO_writePin+0x1c6>
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	08 f0       	brcs	.+2      	; 0x1a86 <GPIO_writePin+0x24>
    1a84:	d1 c0       	rjmp	.+418    	; 0x1c28 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	3d 83       	std	Y+5, r19	; 0x05
    1a8e:	2c 83       	std	Y+4, r18	; 0x04
    1a90:	8c 81       	ldd	r24, Y+4	; 0x04
    1a92:	9d 81       	ldd	r25, Y+5	; 0x05
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	09 f4       	brne	.+2      	; 0x1a9c <GPIO_writePin+0x3a>
    1a9a:	43 c0       	rjmp	.+134    	; 0x1b22 <GPIO_writePin+0xc0>
    1a9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <GPIO_writePin+0x4e>
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	71 f0       	breq	.+28     	; 0x1aca <GPIO_writePin+0x68>
    1aae:	bc c0       	rjmp	.+376    	; 0x1c28 <GPIO_writePin+0x1c6>
    1ab0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <GPIO_writePin+0x5a>
    1aba:	5f c0       	rjmp	.+190    	; 0x1b7a <GPIO_writePin+0x118>
    1abc:	8c 81       	ldd	r24, Y+4	; 0x04
    1abe:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac0:	83 30       	cpi	r24, 0x03	; 3
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	09 f4       	brne	.+2      	; 0x1ac8 <GPIO_writePin+0x66>
    1ac6:	85 c0       	rjmp	.+266    	; 0x1bd2 <GPIO_writePin+0x170>
    1ac8:	af c0       	rjmp	.+350    	; 0x1c28 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	81 30       	cpi	r24, 0x01	; 1
    1ace:	a1 f4       	brne	.+40     	; 0x1af8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1ad0:	ab e3       	ldi	r26, 0x3B	; 59
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	eb e3       	ldi	r30, 0x3B	; 59
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	48 2f       	mov	r20, r24
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	28 2f       	mov	r18, r24
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	02 2e       	mov	r0, r18
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <GPIO_writePin+0x8c>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	0a 94       	dec	r0
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <GPIO_writePin+0x88>
    1af2:	84 2b       	or	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	98 c0       	rjmp	.+304    	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1af8:	ab e3       	ldi	r26, 0x3B	; 59
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	80 81       	ld	r24, Z
    1b02:	48 2f       	mov	r20, r24
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	02 2e       	mov	r0, r18
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <GPIO_writePin+0xb4>
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	0a 94       	dec	r0
    1b18:	e2 f7       	brpl	.-8      	; 0x1b12 <GPIO_writePin+0xb0>
    1b1a:	80 95       	com	r24
    1b1c:	84 23       	and	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	83 c0       	rjmp	.+262    	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	a1 f4       	brne	.+40     	; 0x1b50 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b28:	a8 e3       	ldi	r26, 0x38	; 56
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e8 e3       	ldi	r30, 0x38	; 56
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <GPIO_writePin+0xe4>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <GPIO_writePin+0xe0>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	6c c0       	rjmp	.+216    	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b50:	a8 e3       	ldi	r26, 0x38	; 56
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e8 e3       	ldi	r30, 0x38	; 56
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_writePin+0x10c>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_writePin+0x108>
    1b72:	80 95       	com	r24
    1b74:	84 23       	and	r24, r20
    1b76:	8c 93       	st	X, r24
    1b78:	57 c0       	rjmp	.+174    	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	81 30       	cpi	r24, 0x01	; 1
    1b7e:	a1 f4       	brne	.+40     	; 0x1ba8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1b80:	a5 e3       	ldi	r26, 0x35	; 53
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e5 e3       	ldi	r30, 0x35	; 53
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	48 2f       	mov	r20, r24
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	02 2e       	mov	r0, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_writePin+0x13c>
    1b9a:	88 0f       	add	r24, r24
    1b9c:	99 1f       	adc	r25, r25
    1b9e:	0a 94       	dec	r0
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_writePin+0x138>
    1ba2:	84 2b       	or	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	40 c0       	rjmp	.+128    	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ba8:	a5 e3       	ldi	r26, 0x35	; 53
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e5 e3       	ldi	r30, 0x35	; 53
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <GPIO_writePin+0x164>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <GPIO_writePin+0x160>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
    1bd0:	2b c0       	rjmp	.+86     	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	a1 f4       	brne	.+40     	; 0x1c00 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1bd8:	a2 e3       	ldi	r26, 0x32	; 50
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <GPIO_writePin+0x194>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <GPIO_writePin+0x190>
    1bfa:	84 2b       	or	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c00:	a2 e3       	ldi	r26, 0x32	; 50
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e2 e3       	ldi	r30, 0x32	; 50
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	48 2f       	mov	r20, r24
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 2e       	mov	r0, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_writePin+0x1bc>
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	0a 94       	dec	r0
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_writePin+0x1b8>
    1c22:	80 95       	com	r24
    1c24:	84 23       	and	r24, r20
    1c26:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <GPIO_readPin+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <GPIO_readPin+0x8>
    1c40:	0f 92       	push	r0
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
    1c46:	8a 83       	std	Y+2, r24	; 0x02
    1c48:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c4a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	88 30       	cpi	r24, 0x08	; 8
    1c50:	08 f0       	brcs	.+2      	; 0x1c54 <GPIO_readPin+0x1c>
    1c52:	84 c0       	rjmp	.+264    	; 0x1d5c <GPIO_readPin+0x124>
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	84 30       	cpi	r24, 0x04	; 4
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <GPIO_readPin+0x24>
    1c5a:	80 c0       	rjmp	.+256    	; 0x1d5c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	4c 81       	ldd	r20, Y+4	; 0x04
    1c68:	5d 81       	ldd	r21, Y+5	; 0x05
    1c6a:	41 30       	cpi	r20, 0x01	; 1
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	79 f1       	breq	.+94     	; 0x1cce <GPIO_readPin+0x96>
    1c70:	8c 81       	ldd	r24, Y+4	; 0x04
    1c72:	9d 81       	ldd	r25, Y+5	; 0x05
    1c74:	82 30       	cpi	r24, 0x02	; 2
    1c76:	91 05       	cpc	r25, r1
    1c78:	34 f4       	brge	.+12     	; 0x1c86 <GPIO_readPin+0x4e>
    1c7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7e:	21 15       	cp	r18, r1
    1c80:	31 05       	cpc	r19, r1
    1c82:	69 f0       	breq	.+26     	; 0x1c9e <GPIO_readPin+0x66>
    1c84:	6b c0       	rjmp	.+214    	; 0x1d5c <GPIO_readPin+0x124>
    1c86:	4c 81       	ldd	r20, Y+4	; 0x04
    1c88:	5d 81       	ldd	r21, Y+5	; 0x05
    1c8a:	42 30       	cpi	r20, 0x02	; 2
    1c8c:	51 05       	cpc	r21, r1
    1c8e:	b9 f1       	breq	.+110    	; 0x1cfe <GPIO_readPin+0xc6>
    1c90:	8c 81       	ldd	r24, Y+4	; 0x04
    1c92:	9d 81       	ldd	r25, Y+5	; 0x05
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	91 05       	cpc	r25, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <GPIO_readPin+0x64>
    1c9a:	49 c0       	rjmp	.+146    	; 0x1d2e <GPIO_readPin+0xf6>
    1c9c:	5f c0       	rjmp	.+190    	; 0x1d5c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1c9e:	e9 e3       	ldi	r30, 0x39	; 57
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a9 01       	movw	r20, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <GPIO_readPin+0x7e>
    1cb2:	55 95       	asr	r21
    1cb4:	47 95       	ror	r20
    1cb6:	8a 95       	dec	r24
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <GPIO_readPin+0x7a>
    1cba:	ca 01       	movw	r24, r20
    1cbc:	81 70       	andi	r24, 0x01	; 1
    1cbe:	90 70       	andi	r25, 0x00	; 0
    1cc0:	88 23       	and	r24, r24
    1cc2:	19 f0       	breq	.+6      	; 0x1cca <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	49 c0       	rjmp	.+146    	; 0x1d5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cca:	19 82       	std	Y+1, r1	; 0x01
    1ccc:	47 c0       	rjmp	.+142    	; 0x1d5c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1cce:	e6 e3       	ldi	r30, 0x36	; 54
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a9 01       	movw	r20, r18
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <GPIO_readPin+0xae>
    1ce2:	55 95       	asr	r21
    1ce4:	47 95       	ror	r20
    1ce6:	8a 95       	dec	r24
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <GPIO_readPin+0xaa>
    1cea:	ca 01       	movw	r24, r20
    1cec:	81 70       	andi	r24, 0x01	; 1
    1cee:	90 70       	andi	r25, 0x00	; 0
    1cf0:	88 23       	and	r24, r24
    1cf2:	19 f0       	breq	.+6      	; 0x1cfa <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 83       	std	Y+1, r24	; 0x01
    1cf8:	31 c0       	rjmp	.+98     	; 0x1d5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1cfa:	19 82       	std	Y+1, r1	; 0x01
    1cfc:	2f c0       	rjmp	.+94     	; 0x1d5c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1cfe:	e3 e3       	ldi	r30, 0x33	; 51
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	a9 01       	movw	r20, r18
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <GPIO_readPin+0xde>
    1d12:	55 95       	asr	r21
    1d14:	47 95       	ror	r20
    1d16:	8a 95       	dec	r24
    1d18:	e2 f7       	brpl	.-8      	; 0x1d12 <GPIO_readPin+0xda>
    1d1a:	ca 01       	movw	r24, r20
    1d1c:	81 70       	andi	r24, 0x01	; 1
    1d1e:	90 70       	andi	r25, 0x00	; 0
    1d20:	88 23       	and	r24, r24
    1d22:	19 f0       	breq	.+6      	; 0x1d2a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	19 c0       	rjmp	.+50     	; 0x1d5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d2a:	19 82       	std	Y+1, r1	; 0x01
    1d2c:	17 c0       	rjmp	.+46     	; 0x1d5c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d2e:	e0 e3       	ldi	r30, 0x30	; 48
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	88 2f       	mov	r24, r24
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a9 01       	movw	r20, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <GPIO_readPin+0x10e>
    1d42:	55 95       	asr	r21
    1d44:	47 95       	ror	r20
    1d46:	8a 95       	dec	r24
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <GPIO_readPin+0x10a>
    1d4a:	ca 01       	movw	r24, r20
    1d4c:	81 70       	andi	r24, 0x01	; 1
    1d4e:	90 70       	andi	r25, 0x00	; 0
    1d50:	88 23       	and	r24, r24
    1d52:	19 f0       	breq	.+6      	; 0x1d5a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01
    1d58:	01 c0       	rjmp	.+2      	; 0x1d5c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d5a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <GPIO_setupPortDirection+0x6>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <GPIO_setupPortDirection+0x8>
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	84 30       	cpi	r24, 0x04	; 4
    1d82:	90 f5       	brcc	.+100    	; 0x1de8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	28 2f       	mov	r18, r24
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	3c 83       	std	Y+4, r19	; 0x04
    1d8c:	2b 83       	std	Y+3, r18	; 0x03
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	81 30       	cpi	r24, 0x01	; 1
    1d94:	91 05       	cpc	r25, r1
    1d96:	d1 f0       	breq	.+52     	; 0x1dcc <GPIO_setupPortDirection+0x5e>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	2c f4       	brge	.+10     	; 0x1dac <GPIO_setupPortDirection+0x3e>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <GPIO_setupPortDirection+0x54>
    1daa:	1e c0       	rjmp	.+60     	; 0x1de8 <GPIO_setupPortDirection+0x7a>
    1dac:	2b 81       	ldd	r18, Y+3	; 0x03
    1dae:	3c 81       	ldd	r19, Y+4	; 0x04
    1db0:	22 30       	cpi	r18, 0x02	; 2
    1db2:	31 05       	cpc	r19, r1
    1db4:	81 f0       	breq	.+32     	; 0x1dd6 <GPIO_setupPortDirection+0x68>
    1db6:	8b 81       	ldd	r24, Y+3	; 0x03
    1db8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dba:	83 30       	cpi	r24, 0x03	; 3
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	81 f0       	breq	.+32     	; 0x1de0 <GPIO_setupPortDirection+0x72>
    1dc0:	13 c0       	rjmp	.+38     	; 0x1de8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1dc2:	ea e3       	ldi	r30, 0x3A	; 58
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	80 83       	st	Z, r24
    1dca:	0e c0       	rjmp	.+28     	; 0x1de8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1dcc:	e7 e3       	ldi	r30, 0x37	; 55
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	80 83       	st	Z, r24
    1dd4:	09 c0       	rjmp	.+18     	; 0x1de8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1dd6:	e4 e3       	ldi	r30, 0x34	; 52
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	80 83       	st	Z, r24
    1dde:	04 c0       	rjmp	.+8      	; 0x1de8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1de0:	e1 e3       	ldi	r30, 0x31	; 49
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	cf 91       	pop	r28
    1df2:	df 91       	pop	r29
    1df4:	08 95       	ret

00001df6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_writePort+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_writePort+0x8>
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	84 30       	cpi	r24, 0x04	; 4
    1e0a:	90 f5       	brcc	.+100    	; 0x1e70 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	3c 83       	std	Y+4, r19	; 0x04
    1e14:	2b 83       	std	Y+3, r18	; 0x03
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	d1 f0       	breq	.+52     	; 0x1e54 <GPIO_writePort+0x5e>
    1e20:	2b 81       	ldd	r18, Y+3	; 0x03
    1e22:	3c 81       	ldd	r19, Y+4	; 0x04
    1e24:	22 30       	cpi	r18, 0x02	; 2
    1e26:	31 05       	cpc	r19, r1
    1e28:	2c f4       	brge	.+10     	; 0x1e34 <GPIO_writePort+0x3e>
    1e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	61 f0       	breq	.+24     	; 0x1e4a <GPIO_writePort+0x54>
    1e32:	1e c0       	rjmp	.+60     	; 0x1e70 <GPIO_writePort+0x7a>
    1e34:	2b 81       	ldd	r18, Y+3	; 0x03
    1e36:	3c 81       	ldd	r19, Y+4	; 0x04
    1e38:	22 30       	cpi	r18, 0x02	; 2
    1e3a:	31 05       	cpc	r19, r1
    1e3c:	81 f0       	breq	.+32     	; 0x1e5e <GPIO_writePort+0x68>
    1e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e40:	9c 81       	ldd	r25, Y+4	; 0x04
    1e42:	83 30       	cpi	r24, 0x03	; 3
    1e44:	91 05       	cpc	r25, r1
    1e46:	81 f0       	breq	.+32     	; 0x1e68 <GPIO_writePort+0x72>
    1e48:	13 c0       	rjmp	.+38     	; 0x1e70 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e4a:	eb e3       	ldi	r30, 0x3B	; 59
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	80 83       	st	Z, r24
    1e52:	0e c0       	rjmp	.+28     	; 0x1e70 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e54:	e8 e3       	ldi	r30, 0x38	; 56
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	80 83       	st	Z, r24
    1e5c:	09 c0       	rjmp	.+18     	; 0x1e70 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e5e:	e5 e3       	ldi	r30, 0x35	; 53
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	80 83       	st	Z, r24
    1e66:	04 c0       	rjmp	.+8      	; 0x1e70 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e68:	e2 e3       	ldi	r30, 0x32	; 50
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	08 95       	ret

00001e7e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1e7e:	df 93       	push	r29
    1e80:	cf 93       	push	r28
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <GPIO_readPort+0x6>
    1e84:	00 d0       	rcall	.+0      	; 0x1e86 <GPIO_readPort+0x8>
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1e8c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	84 30       	cpi	r24, 0x04	; 4
    1e92:	90 f5       	brcc	.+100    	; 0x1ef8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1e94:	8a 81       	ldd	r24, Y+2	; 0x02
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	3c 83       	std	Y+4, r19	; 0x04
    1e9c:	2b 83       	std	Y+3, r18	; 0x03
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	81 30       	cpi	r24, 0x01	; 1
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	d1 f0       	breq	.+52     	; 0x1edc <GPIO_readPort+0x5e>
    1ea8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1eac:	22 30       	cpi	r18, 0x02	; 2
    1eae:	31 05       	cpc	r19, r1
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <GPIO_readPort+0x3e>
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	00 97       	sbiw	r24, 0x00	; 0
    1eb8:	61 f0       	breq	.+24     	; 0x1ed2 <GPIO_readPort+0x54>
    1eba:	1e c0       	rjmp	.+60     	; 0x1ef8 <GPIO_readPort+0x7a>
    1ebc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ebe:	3c 81       	ldd	r19, Y+4	; 0x04
    1ec0:	22 30       	cpi	r18, 0x02	; 2
    1ec2:	31 05       	cpc	r19, r1
    1ec4:	81 f0       	breq	.+32     	; 0x1ee6 <GPIO_readPort+0x68>
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eca:	83 30       	cpi	r24, 0x03	; 3
    1ecc:	91 05       	cpc	r25, r1
    1ece:	81 f0       	breq	.+32     	; 0x1ef0 <GPIO_readPort+0x72>
    1ed0:	13 c0       	rjmp	.+38     	; 0x1ef8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ed2:	e9 e3       	ldi	r30, 0x39	; 57
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	80 81       	ld	r24, Z
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1edc:	e6 e3       	ldi	r30, 0x36	; 54
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	89 83       	std	Y+1, r24	; 0x01
    1ee4:	09 c0       	rjmp	.+18     	; 0x1ef8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ee6:	e3 e3       	ldi	r30, 0x33	; 51
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ef0:	e0 e3       	ldi	r30, 0x30	; 48
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	cf 91       	pop	r28
    1f04:	df 91       	pop	r29
    1f06:	08 95       	ret

00001f08 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f10:	83 e0       	ldi	r24, 0x03	; 3
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	41 e0       	ldi	r20, 0x01	; 1
    1f16:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f1a:	83 e0       	ldi	r24, 0x03	; 3
    1f1c:	63 e0       	ldi	r22, 0x03	; 3
    1f1e:	41 e0       	ldi	r20, 0x01	; 1
    1f20:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	64 e0       	ldi	r22, 0x04	; 4
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	6f ef       	ldi	r22, 0xFF	; 255
    1f32:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f36:	88 e3       	ldi	r24, 0x38	; 56
    1f38:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f3c:	8c e0       	ldi	r24, 0x0C	; 12
    1f3e:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_sendCommand>
}
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	cd b7       	in	r28, 0x3d	; 61
    1f54:	de b7       	in	r29, 0x3e	; 62
    1f56:	ea 97       	sbiw	r28, 0x3a	; 58
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1f64:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	62 e0       	ldi	r22, 0x02	; 2
    1f6a:	40 e0       	ldi	r20, 0x00	; 0
    1f6c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	63 e0       	ldi	r22, 0x03	; 3
    1f74:	40 e0       	ldi	r20, 0x00	; 0
    1f76:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	a0 e8       	ldi	r26, 0x80	; 128
    1f80:	bf e3       	ldi	r27, 0x3F	; 63
    1f82:	8d ab       	std	Y+53, r24	; 0x35
    1f84:	9e ab       	std	Y+54, r25	; 0x36
    1f86:	af ab       	std	Y+55, r26	; 0x37
    1f88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8e:	8f a9       	ldd	r24, Y+55	; 0x37
    1f90:	98 ad       	ldd	r25, Y+56	; 0x38
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a e7       	ldi	r20, 0x7A	; 122
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	89 ab       	std	Y+49, r24	; 0x31
    1fa4:	9a ab       	std	Y+50, r25	; 0x32
    1fa6:	ab ab       	std	Y+51, r26	; 0x33
    1fa8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1faa:	69 a9       	ldd	r22, Y+49	; 0x31
    1fac:	7a a9       	ldd	r23, Y+50	; 0x32
    1fae:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e8       	ldi	r20, 0x80	; 128
    1fb8:	5f e3       	ldi	r21, 0x3F	; 63
    1fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbe:	88 23       	and	r24, r24
    1fc0:	2c f4       	brge	.+10     	; 0x1fcc <LCD_sendCommand+0x7e>
		__ticks = 1;
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	98 ab       	std	Y+48, r25	; 0x30
    1fc8:	8f a7       	std	Y+47, r24	; 0x2f
    1fca:	3f c0       	rjmp	.+126    	; 0x204a <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1fcc:	69 a9       	ldd	r22, Y+49	; 0x31
    1fce:	7a a9       	ldd	r23, Y+50	; 0x32
    1fd0:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd2:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	3f ef       	ldi	r19, 0xFF	; 255
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	57 e4       	ldi	r21, 0x47	; 71
    1fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	4c f5       	brge	.+82     	; 0x2036 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe4:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe6:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe8:	8f a9       	ldd	r24, Y+55	; 0x37
    1fea:	98 ad       	ldd	r25, Y+56	; 0x38
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e2       	ldi	r20, 0x20	; 32
    1ff2:	51 e4       	ldi	r21, 0x41	; 65
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	98 ab       	std	Y+48, r25	; 0x30
    200a:	8f a7       	std	Y+47, r24	; 0x2f
    200c:	0f c0       	rjmp	.+30     	; 0x202c <LCD_sendCommand+0xde>
    200e:	89 e1       	ldi	r24, 0x19	; 25
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	9e a7       	std	Y+46, r25	; 0x2e
    2014:	8d a7       	std	Y+45, r24	; 0x2d
    2016:	8d a5       	ldd	r24, Y+45	; 0x2d
    2018:	9e a5       	ldd	r25, Y+46	; 0x2e
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_sendCommand+0xcc>
    201e:	9e a7       	std	Y+46, r25	; 0x2e
    2020:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2022:	8f a5       	ldd	r24, Y+47	; 0x2f
    2024:	98 a9       	ldd	r25, Y+48	; 0x30
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	00 97       	sbiw	r24, 0x00	; 0
    2032:	69 f7       	brne	.-38     	; 0x200e <LCD_sendCommand+0xc0>
    2034:	14 c0       	rjmp	.+40     	; 0x205e <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2036:	69 a9       	ldd	r22, Y+49	; 0x31
    2038:	7a a9       	ldd	r23, Y+50	; 0x32
    203a:	8b a9       	ldd	r24, Y+51	; 0x33
    203c:	9c a9       	ldd	r25, Y+52	; 0x34
    203e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	98 ab       	std	Y+48, r25	; 0x30
    2048:	8f a7       	std	Y+47, r24	; 0x2f
    204a:	8f a5       	ldd	r24, Y+47	; 0x2f
    204c:	98 a9       	ldd	r25, Y+48	; 0x30
    204e:	9c a7       	std	Y+44, r25	; 0x2c
    2050:	8b a7       	std	Y+43, r24	; 0x2b
    2052:	8b a5       	ldd	r24, Y+43	; 0x2b
    2054:	9c a5       	ldd	r25, Y+44	; 0x2c
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_sendCommand+0x108>
    205a:	9c a7       	std	Y+44, r25	; 0x2c
    205c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	64 e0       	ldi	r22, 0x04	; 4
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e8       	ldi	r26, 0x80	; 128
    206e:	bf e3       	ldi	r27, 0x3F	; 63
    2070:	8f a3       	std	Y+39, r24	; 0x27
    2072:	98 a7       	std	Y+40, r25	; 0x28
    2074:	a9 a7       	std	Y+41, r26	; 0x29
    2076:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	6f a1       	ldd	r22, Y+39	; 0x27
    207a:	78 a5       	ldd	r23, Y+40	; 0x28
    207c:	89 a5       	ldd	r24, Y+41	; 0x29
    207e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4a e7       	ldi	r20, 0x7A	; 122
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208c:	dc 01       	movw	r26, r24
    208e:	cb 01       	movw	r24, r22
    2090:	8b a3       	std	Y+35, r24	; 0x23
    2092:	9c a3       	std	Y+36, r25	; 0x24
    2094:	ad a3       	std	Y+37, r26	; 0x25
    2096:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2098:	6b a1       	ldd	r22, Y+35	; 0x23
    209a:	7c a1       	ldd	r23, Y+36	; 0x24
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e8       	ldi	r20, 0x80	; 128
    20a6:	5f e3       	ldi	r21, 0x3F	; 63
    20a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ac:	88 23       	and	r24, r24
    20ae:	2c f4       	brge	.+10     	; 0x20ba <LCD_sendCommand+0x16c>
		__ticks = 1;
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9a a3       	std	Y+34, r25	; 0x22
    20b6:	89 a3       	std	Y+33, r24	; 0x21
    20b8:	3f c0       	rjmp	.+126    	; 0x2138 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    20ba:	6b a1       	ldd	r22, Y+35	; 0x23
    20bc:	7c a1       	ldd	r23, Y+36	; 0x24
    20be:	8d a1       	ldd	r24, Y+37	; 0x25
    20c0:	9e a1       	ldd	r25, Y+38	; 0x26
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	3f ef       	ldi	r19, 0xFF	; 255
    20c6:	4f e7       	ldi	r20, 0x7F	; 127
    20c8:	57 e4       	ldi	r21, 0x47	; 71
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ce:	18 16       	cp	r1, r24
    20d0:	4c f5       	brge	.+82     	; 0x2124 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d2:	6f a1       	ldd	r22, Y+39	; 0x27
    20d4:	78 a5       	ldd	r23, Y+40	; 0x28
    20d6:	89 a5       	ldd	r24, Y+41	; 0x29
    20d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e2       	ldi	r20, 0x20	; 32
    20e0:	51 e4       	ldi	r21, 0x41	; 65
    20e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	bc 01       	movw	r22, r24
    20ec:	cd 01       	movw	r24, r26
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9a a3       	std	Y+34, r25	; 0x22
    20f8:	89 a3       	std	Y+33, r24	; 0x21
    20fa:	0f c0       	rjmp	.+30     	; 0x211a <LCD_sendCommand+0x1cc>
    20fc:	89 e1       	ldi	r24, 0x19	; 25
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	98 a3       	std	Y+32, r25	; 0x20
    2102:	8f 8f       	std	Y+31, r24	; 0x1f
    2104:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2106:	98 a1       	ldd	r25, Y+32	; 0x20
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_sendCommand+0x1ba>
    210c:	98 a3       	std	Y+32, r25	; 0x20
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	69 f7       	brne	.-38     	; 0x20fc <LCD_sendCommand+0x1ae>
    2122:	14 c0       	rjmp	.+40     	; 0x214c <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	6b a1       	ldd	r22, Y+35	; 0x23
    2126:	7c a1       	ldd	r23, Y+36	; 0x24
    2128:	8d a1       	ldd	r24, Y+37	; 0x25
    212a:	9e a1       	ldd	r25, Y+38	; 0x26
    212c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2130:	dc 01       	movw	r26, r24
    2132:	cb 01       	movw	r24, r22
    2134:	9a a3       	std	Y+34, r25	; 0x22
    2136:	89 a3       	std	Y+33, r24	; 0x21
    2138:	89 a1       	ldd	r24, Y+33	; 0x21
    213a:	9a a1       	ldd	r25, Y+34	; 0x22
    213c:	9e 8f       	std	Y+30, r25	; 0x1e
    213e:	8d 8f       	std	Y+29, r24	; 0x1d
    2140:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2142:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2144:	01 97       	sbiw	r24, 0x01	; 1
    2146:	f1 f7       	brne	.-4      	; 0x2144 <LCD_sendCommand+0x1f6>
    2148:	9e 8f       	std	Y+30, r25	; 0x1e
    214a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	6a ad       	ldd	r22, Y+58	; 0x3a
    2150:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePort>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a0 e8       	ldi	r26, 0x80	; 128
    215a:	bf e3       	ldi	r27, 0x3F	; 63
    215c:	89 8f       	std	Y+25, r24	; 0x19
    215e:	9a 8f       	std	Y+26, r25	; 0x1a
    2160:	ab 8f       	std	Y+27, r26	; 0x1b
    2162:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	69 8d       	ldd	r22, Y+25	; 0x19
    2166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2168:	8b 8d       	ldd	r24, Y+27	; 0x1b
    216a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a e7       	ldi	r20, 0x7A	; 122
    2172:	53 e4       	ldi	r21, 0x43	; 67
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8d 8b       	std	Y+21, r24	; 0x15
    217e:	9e 8b       	std	Y+22, r25	; 0x16
    2180:	af 8b       	std	Y+23, r26	; 0x17
    2182:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <LCD_sendCommand+0x258>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21a6:	6d 89       	ldd	r22, Y+21	; 0x15
    21a8:	7e 89       	ldd	r23, Y+22	; 0x16
    21aa:	8f 89       	ldd	r24, Y+23	; 0x17
    21ac:	98 8d       	ldd	r25, Y+24	; 0x18
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	69 8d       	ldd	r22, Y+25	; 0x19
    21c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9c 8b       	std	Y+20, r25	; 0x14
    21e4:	8b 8b       	std	Y+19, r24	; 0x13
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_sendCommand+0x2b8>
    21e8:	89 e1       	ldi	r24, 0x19	; 25
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9a 8b       	std	Y+18, r25	; 0x12
    21ee:	89 8b       	std	Y+17, r24	; 0x11
    21f0:	89 89       	ldd	r24, Y+17	; 0x11
    21f2:	9a 89       	ldd	r25, Y+18	; 0x12
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_sendCommand+0x2a6>
    21f8:	9a 8b       	std	Y+18, r25	; 0x12
    21fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8b 89       	ldd	r24, Y+19	; 0x13
    21fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9c 8b       	std	Y+20, r25	; 0x14
    2204:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8b 89       	ldd	r24, Y+19	; 0x13
    2208:	9c 89       	ldd	r25, Y+20	; 0x14
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <LCD_sendCommand+0x29a>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6d 89       	ldd	r22, Y+21	; 0x15
    2212:	7e 89       	ldd	r23, Y+22	; 0x16
    2214:	8f 89       	ldd	r24, Y+23	; 0x17
    2216:	98 8d       	ldd	r25, Y+24	; 0x18
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9c 8b       	std	Y+20, r25	; 0x14
    2222:	8b 8b       	std	Y+19, r24	; 0x13
    2224:	8b 89       	ldd	r24, Y+19	; 0x13
    2226:	9c 89       	ldd	r25, Y+20	; 0x14
    2228:	98 8b       	std	Y+16, r25	; 0x10
    222a:	8f 87       	std	Y+15, r24	; 0x0f
    222c:	8f 85       	ldd	r24, Y+15	; 0x0f
    222e:	98 89       	ldd	r25, Y+16	; 0x10
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_sendCommand+0x2e2>
    2234:	98 8b       	std	Y+16, r25	; 0x10
    2236:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2238:	83 e0       	ldi	r24, 0x03	; 3
    223a:	64 e0       	ldi	r22, 0x04	; 4
    223c:	40 e0       	ldi	r20, 0x00	; 0
    223e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a0 e8       	ldi	r26, 0x80	; 128
    2248:	bf e3       	ldi	r27, 0x3F	; 63
    224a:	8b 87       	std	Y+11, r24	; 0x0b
    224c:	9c 87       	std	Y+12, r25	; 0x0c
    224e:	ad 87       	std	Y+13, r26	; 0x0d
    2250:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2252:	6b 85       	ldd	r22, Y+11	; 0x0b
    2254:	7c 85       	ldd	r23, Y+12	; 0x0c
    2256:	8d 85       	ldd	r24, Y+13	; 0x0d
    2258:	9e 85       	ldd	r25, Y+14	; 0x0e
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	4a e7       	ldi	r20, 0x7A	; 122
    2260:	53 e4       	ldi	r21, 0x43	; 67
    2262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	8f 83       	std	Y+7, r24	; 0x07
    226c:	98 87       	std	Y+8, r25	; 0x08
    226e:	a9 87       	std	Y+9, r26	; 0x09
    2270:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e8       	ldi	r20, 0x80	; 128
    2280:	5f e3       	ldi	r21, 0x3F	; 63
    2282:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2286:	88 23       	and	r24, r24
    2288:	2c f4       	brge	.+10     	; 0x2294 <LCD_sendCommand+0x346>
		__ticks = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	3f c0       	rjmp	.+126    	; 0x2312 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	3f ef       	ldi	r19, 0xFF	; 255
    22a0:	4f e7       	ldi	r20, 0x7F	; 127
    22a2:	57 e4       	ldi	r21, 0x47	; 71
    22a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a8:	18 16       	cp	r1, r24
    22aa:	4c f5       	brge	.+82     	; 0x22fe <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	40 e2       	ldi	r20, 0x20	; 32
    22ba:	51 e4       	ldi	r21, 0x41	; 65
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	bc 01       	movw	r22, r24
    22c6:	cd 01       	movw	r24, r26
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9e 83       	std	Y+6, r25	; 0x06
    22d2:	8d 83       	std	Y+5, r24	; 0x05
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <LCD_sendCommand+0x3a6>
    22d6:	89 e1       	ldi	r24, 0x19	; 25
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	f1 f7       	brne	.-4      	; 0x22e2 <LCD_sendCommand+0x394>
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ea:	8d 81       	ldd	r24, Y+5	; 0x05
    22ec:	9e 81       	ldd	r25, Y+6	; 0x06
    22ee:	01 97       	sbiw	r24, 0x01	; 1
    22f0:	9e 83       	std	Y+6, r25	; 0x06
    22f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f4:	8d 81       	ldd	r24, Y+5	; 0x05
    22f6:	9e 81       	ldd	r25, Y+6	; 0x06
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	69 f7       	brne	.-38     	; 0x22d6 <LCD_sendCommand+0x388>
    22fc:	14 c0       	rjmp	.+40     	; 0x2326 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2300:	78 85       	ldd	r23, Y+8	; 0x08
    2302:	89 85       	ldd	r24, Y+9	; 0x09
    2304:	9a 85       	ldd	r25, Y+10	; 0x0a
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9e 83       	std	Y+6, r25	; 0x06
    2310:	8d 83       	std	Y+5, r24	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	9a 81       	ldd	r25, Y+2	; 0x02
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	f1 f7       	brne	.-4      	; 0x231e <LCD_sendCommand+0x3d0>
    2322:	9a 83       	std	Y+2, r25	; 0x02
    2324:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2326:	ea 96       	adiw	r28, 0x3a	; 58
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	cf 91       	pop	r28
    2334:	df 91       	pop	r29
    2336:	08 95       	ret

00002338 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2338:	df 93       	push	r29
    233a:	cf 93       	push	r28
    233c:	cd b7       	in	r28, 0x3d	; 61
    233e:	de b7       	in	r29, 0x3e	; 62
    2340:	ea 97       	sbiw	r28, 0x3a	; 58
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    234e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2350:	83 e0       	ldi	r24, 0x03	; 3
    2352:	62 e0       	ldi	r22, 0x02	; 2
    2354:	41 e0       	ldi	r20, 0x01	; 1
    2356:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    235a:	83 e0       	ldi	r24, 0x03	; 3
    235c:	63 e0       	ldi	r22, 0x03	; 3
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e8       	ldi	r26, 0x80	; 128
    236a:	bf e3       	ldi	r27, 0x3F	; 63
    236c:	8d ab       	std	Y+53, r24	; 0x35
    236e:	9e ab       	std	Y+54, r25	; 0x36
    2370:	af ab       	std	Y+55, r26	; 0x37
    2372:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6d a9       	ldd	r22, Y+53	; 0x35
    2376:	7e a9       	ldd	r23, Y+54	; 0x36
    2378:	8f a9       	ldd	r24, Y+55	; 0x37
    237a:	98 ad       	ldd	r25, Y+56	; 0x38
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a e7       	ldi	r20, 0x7A	; 122
    2382:	53 e4       	ldi	r21, 0x43	; 67
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	89 ab       	std	Y+49, r24	; 0x31
    238e:	9a ab       	std	Y+50, r25	; 0x32
    2390:	ab ab       	std	Y+51, r26	; 0x33
    2392:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2394:	69 a9       	ldd	r22, Y+49	; 0x31
    2396:	7a a9       	ldd	r23, Y+50	; 0x32
    2398:	8b a9       	ldd	r24, Y+51	; 0x33
    239a:	9c a9       	ldd	r25, Y+52	; 0x34
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	98 ab       	std	Y+48, r25	; 0x30
    23b2:	8f a7       	std	Y+47, r24	; 0x2f
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    23b6:	69 a9       	ldd	r22, Y+49	; 0x31
    23b8:	7a a9       	ldd	r23, Y+50	; 0x32
    23ba:	8b a9       	ldd	r24, Y+51	; 0x33
    23bc:	9c a9       	ldd	r25, Y+52	; 0x34
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6d a9       	ldd	r22, Y+53	; 0x35
    23d0:	7e a9       	ldd	r23, Y+54	; 0x36
    23d2:	8f a9       	ldd	r24, Y+55	; 0x37
    23d4:	98 ad       	ldd	r25, Y+56	; 0x38
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	98 ab       	std	Y+48, r25	; 0x30
    23f4:	8f a7       	std	Y+47, r24	; 0x2f
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <LCD_displayCharacter+0xde>
    23f8:	89 e1       	ldi	r24, 0x19	; 25
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9e a7       	std	Y+46, r25	; 0x2e
    23fe:	8d a7       	std	Y+45, r24	; 0x2d
    2400:	8d a5       	ldd	r24, Y+45	; 0x2d
    2402:	9e a5       	ldd	r25, Y+46	; 0x2e
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_displayCharacter+0xcc>
    2408:	9e a7       	std	Y+46, r25	; 0x2e
    240a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8f a5       	ldd	r24, Y+47	; 0x2f
    240e:	98 a9       	ldd	r25, Y+48	; 0x30
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	98 ab       	std	Y+48, r25	; 0x30
    2414:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	98 a9       	ldd	r25, Y+48	; 0x30
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <LCD_displayCharacter+0xc0>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	69 a9       	ldd	r22, Y+49	; 0x31
    2422:	7a a9       	ldd	r23, Y+50	; 0x32
    2424:	8b a9       	ldd	r24, Y+51	; 0x33
    2426:	9c a9       	ldd	r25, Y+52	; 0x34
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
    2434:	8f a5       	ldd	r24, Y+47	; 0x2f
    2436:	98 a9       	ldd	r25, Y+48	; 0x30
    2438:	9c a7       	std	Y+44, r25	; 0x2c
    243a:	8b a7       	std	Y+43, r24	; 0x2b
    243c:	8b a5       	ldd	r24, Y+43	; 0x2b
    243e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_displayCharacter+0x108>
    2444:	9c a7       	std	Y+44, r25	; 0x2c
    2446:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	64 e0       	ldi	r22, 0x04	; 4
    244c:	41 e0       	ldi	r20, 0x01	; 1
    244e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 e8       	ldi	r26, 0x80	; 128
    2458:	bf e3       	ldi	r27, 0x3F	; 63
    245a:	8f a3       	std	Y+39, r24	; 0x27
    245c:	98 a7       	std	Y+40, r25	; 0x28
    245e:	a9 a7       	std	Y+41, r26	; 0x29
    2460:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6f a1       	ldd	r22, Y+39	; 0x27
    2464:	78 a5       	ldd	r23, Y+40	; 0x28
    2466:	89 a5       	ldd	r24, Y+41	; 0x29
    2468:	9a a5       	ldd	r25, Y+42	; 0x2a
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a e7       	ldi	r20, 0x7A	; 122
    2470:	53 e4       	ldi	r21, 0x43	; 67
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8b a3       	std	Y+35, r24	; 0x23
    247c:	9c a3       	std	Y+36, r25	; 0x24
    247e:	ad a3       	std	Y+37, r26	; 0x25
    2480:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2482:	6b a1       	ldd	r22, Y+35	; 0x23
    2484:	7c a1       	ldd	r23, Y+36	; 0x24
    2486:	8d a1       	ldd	r24, Y+37	; 0x25
    2488:	9e a1       	ldd	r25, Y+38	; 0x26
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9a a3       	std	Y+34, r25	; 0x22
    24a0:	89 a3       	std	Y+33, r24	; 0x21
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    24a4:	6b a1       	ldd	r22, Y+35	; 0x23
    24a6:	7c a1       	ldd	r23, Y+36	; 0x24
    24a8:	8d a1       	ldd	r24, Y+37	; 0x25
    24aa:	9e a1       	ldd	r25, Y+38	; 0x26
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6f a1       	ldd	r22, Y+39	; 0x27
    24be:	78 a5       	ldd	r23, Y+40	; 0x28
    24c0:	89 a5       	ldd	r24, Y+41	; 0x29
    24c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9a a3       	std	Y+34, r25	; 0x22
    24e2:	89 a3       	std	Y+33, r24	; 0x21
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LCD_displayCharacter+0x1cc>
    24e6:	89 e1       	ldi	r24, 0x19	; 25
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	98 a3       	std	Y+32, r25	; 0x20
    24ec:	8f 8f       	std	Y+31, r24	; 0x1f
    24ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f0:	98 a1       	ldd	r25, Y+32	; 0x20
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_displayCharacter+0x1ba>
    24f6:	98 a3       	std	Y+32, r25	; 0x20
    24f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	89 a1       	ldd	r24, Y+33	; 0x21
    24fc:	9a a1       	ldd	r25, Y+34	; 0x22
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9a a3       	std	Y+34, r25	; 0x22
    2502:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	89 a1       	ldd	r24, Y+33	; 0x21
    2506:	9a a1       	ldd	r25, Y+34	; 0x22
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <LCD_displayCharacter+0x1ae>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6b a1       	ldd	r22, Y+35	; 0x23
    2510:	7c a1       	ldd	r23, Y+36	; 0x24
    2512:	8d a1       	ldd	r24, Y+37	; 0x25
    2514:	9e a1       	ldd	r25, Y+38	; 0x26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9a a3       	std	Y+34, r25	; 0x22
    2520:	89 a3       	std	Y+33, r24	; 0x21
    2522:	89 a1       	ldd	r24, Y+33	; 0x21
    2524:	9a a1       	ldd	r25, Y+34	; 0x22
    2526:	9e 8f       	std	Y+30, r25	; 0x1e
    2528:	8d 8f       	std	Y+29, r24	; 0x1d
    252a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    252c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_displayCharacter+0x1f6>
    2532:	9e 8f       	std	Y+30, r25	; 0x1e
    2534:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	6a ad       	ldd	r22, Y+58	; 0x3a
    253a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_writePort>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a0 e8       	ldi	r26, 0x80	; 128
    2544:	bf e3       	ldi	r27, 0x3F	; 63
    2546:	89 8f       	std	Y+25, r24	; 0x19
    2548:	9a 8f       	std	Y+26, r25	; 0x1a
    254a:	ab 8f       	std	Y+27, r26	; 0x1b
    254c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254e:	69 8d       	ldd	r22, Y+25	; 0x19
    2550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a e7       	ldi	r20, 0x7A	; 122
    255c:	53 e4       	ldi	r21, 0x43	; 67
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	8d 8b       	std	Y+21, r24	; 0x15
    2568:	9e 8b       	std	Y+22, r25	; 0x16
    256a:	af 8b       	std	Y+23, r26	; 0x17
    256c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    256e:	6d 89       	ldd	r22, Y+21	; 0x15
    2570:	7e 89       	ldd	r23, Y+22	; 0x16
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	98 8d       	ldd	r25, Y+24	; 0x18
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	2c f4       	brge	.+10     	; 0x2590 <LCD_displayCharacter+0x258>
		__ticks = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	3f c0       	rjmp	.+126    	; 0x260e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	4c f5       	brge	.+82     	; 0x25fa <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a8:	69 8d       	ldd	r22, Y+25	; 0x19
    25aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e2       	ldi	r20, 0x20	; 32
    25b6:	51 e4       	ldi	r21, 0x41	; 65
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
    25d0:	0f c0       	rjmp	.+30     	; 0x25f0 <LCD_displayCharacter+0x2b8>
    25d2:	89 e1       	ldi	r24, 0x19	; 25
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9a 8b       	std	Y+18, r25	; 0x12
    25d8:	89 8b       	std	Y+17, r24	; 0x11
    25da:	89 89       	ldd	r24, Y+17	; 0x11
    25dc:	9a 89       	ldd	r25, Y+18	; 0x12
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <LCD_displayCharacter+0x2a6>
    25e2:	9a 8b       	std	Y+18, r25	; 0x12
    25e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e6:	8b 89       	ldd	r24, Y+19	; 0x13
    25e8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f0:	8b 89       	ldd	r24, Y+19	; 0x13
    25f2:	9c 89       	ldd	r25, Y+20	; 0x14
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	69 f7       	brne	.-38     	; 0x25d2 <LCD_displayCharacter+0x29a>
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fa:	6d 89       	ldd	r22, Y+21	; 0x15
    25fc:	7e 89       	ldd	r23, Y+22	; 0x16
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	98 8b       	std	Y+16, r25	; 0x10
    2614:	8f 87       	std	Y+15, r24	; 0x0f
    2616:	8f 85       	ldd	r24, Y+15	; 0x0f
    2618:	98 89       	ldd	r25, Y+16	; 0x10
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <LCD_displayCharacter+0x2e2>
    261e:	98 8b       	std	Y+16, r25	; 0x10
    2620:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2622:	83 e0       	ldi	r24, 0x03	; 3
    2624:	64 e0       	ldi	r22, 0x04	; 4
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a0 e8       	ldi	r26, 0x80	; 128
    2632:	bf e3       	ldi	r27, 0x3F	; 63
    2634:	8b 87       	std	Y+11, r24	; 0x0b
    2636:	9c 87       	std	Y+12, r25	; 0x0c
    2638:	ad 87       	std	Y+13, r26	; 0x0d
    263a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	6b 85       	ldd	r22, Y+11	; 0x0b
    263e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2640:	8d 85       	ldd	r24, Y+13	; 0x0d
    2642:	9e 85       	ldd	r25, Y+14	; 0x0e
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4a e7       	ldi	r20, 0x7A	; 122
    264a:	53 e4       	ldi	r21, 0x43	; 67
    264c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2650:	dc 01       	movw	r26, r24
    2652:	cb 01       	movw	r24, r22
    2654:	8f 83       	std	Y+7, r24	; 0x07
    2656:	98 87       	std	Y+8, r25	; 0x08
    2658:	a9 87       	std	Y+9, r26	; 0x09
    265a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    265c:	6f 81       	ldd	r22, Y+7	; 0x07
    265e:	78 85       	ldd	r23, Y+8	; 0x08
    2660:	89 85       	ldd	r24, Y+9	; 0x09
    2662:	9a 85       	ldd	r25, Y+10	; 0x0a
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e8       	ldi	r20, 0x80	; 128
    266a:	5f e3       	ldi	r21, 0x3F	; 63
    266c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2670:	88 23       	and	r24, r24
    2672:	2c f4       	brge	.+10     	; 0x267e <LCD_displayCharacter+0x346>
		__ticks = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	3f c0       	rjmp	.+126    	; 0x26fc <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    267e:	6f 81       	ldd	r22, Y+7	; 0x07
    2680:	78 85       	ldd	r23, Y+8	; 0x08
    2682:	89 85       	ldd	r24, Y+9	; 0x09
    2684:	9a 85       	ldd	r25, Y+10	; 0x0a
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	4c f5       	brge	.+82     	; 0x26e8 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2696:	6b 85       	ldd	r22, Y+11	; 0x0b
    2698:	7c 85       	ldd	r23, Y+12	; 0x0c
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	9e 85       	ldd	r25, Y+14	; 0x0e
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e2       	ldi	r20, 0x20	; 32
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	bc 01       	movw	r22, r24
    26b0:	cd 01       	movw	r24, r26
    26b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	9e 83       	std	Y+6, r25	; 0x06
    26bc:	8d 83       	std	Y+5, r24	; 0x05
    26be:	0f c0       	rjmp	.+30     	; 0x26de <LCD_displayCharacter+0x3a6>
    26c0:	89 e1       	ldi	r24, 0x19	; 25
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	9c 83       	std	Y+4, r25	; 0x04
    26c6:	8b 83       	std	Y+3, r24	; 0x03
    26c8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ca:	9c 81       	ldd	r25, Y+4	; 0x04
    26cc:	01 97       	sbiw	r24, 0x01	; 1
    26ce:	f1 f7       	brne	.-4      	; 0x26cc <LCD_displayCharacter+0x394>
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d4:	8d 81       	ldd	r24, Y+5	; 0x05
    26d6:	9e 81       	ldd	r25, Y+6	; 0x06
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	9e 83       	std	Y+6, r25	; 0x06
    26dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26de:	8d 81       	ldd	r24, Y+5	; 0x05
    26e0:	9e 81       	ldd	r25, Y+6	; 0x06
    26e2:	00 97       	sbiw	r24, 0x00	; 0
    26e4:	69 f7       	brne	.-38     	; 0x26c0 <LCD_displayCharacter+0x388>
    26e6:	14 c0       	rjmp	.+40     	; 0x2710 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e8:	6f 81       	ldd	r22, Y+7	; 0x07
    26ea:	78 85       	ldd	r23, Y+8	; 0x08
    26ec:	89 85       	ldd	r24, Y+9	; 0x09
    26ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	9a 83       	std	Y+2, r25	; 0x02
    2702:	89 83       	std	Y+1, r24	; 0x01
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	9a 81       	ldd	r25, Y+2	; 0x02
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <LCD_displayCharacter+0x3d0>
    270c:	9a 83       	std	Y+2, r25	; 0x02
    270e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2710:	ea 96       	adiw	r28, 0x3a	; 58
    2712:	0f b6       	in	r0, 0x3f	; 63
    2714:	f8 94       	cli
    2716:	de bf       	out	0x3e, r29	; 62
    2718:	0f be       	out	0x3f, r0	; 63
    271a:	cd bf       	out	0x3d, r28	; 61
    271c:	cf 91       	pop	r28
    271e:	df 91       	pop	r29
    2720:	08 95       	ret

00002722 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2722:	df 93       	push	r29
    2724:	cf 93       	push	r28
    2726:	00 d0       	rcall	.+0      	; 0x2728 <LCD_displayString+0x6>
    2728:	0f 92       	push	r0
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	9b 83       	std	Y+3, r25	; 0x03
    2730:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2732:	19 82       	std	Y+1, r1	; 0x01
    2734:	0e c0       	rjmp	.+28     	; 0x2752 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2736:	89 81       	ldd	r24, Y+1	; 0x01
    2738:	28 2f       	mov	r18, r24
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	8a 81       	ldd	r24, Y+2	; 0x02
    273e:	9b 81       	ldd	r25, Y+3	; 0x03
    2740:	fc 01       	movw	r30, r24
    2742:	e2 0f       	add	r30, r18
    2744:	f3 1f       	adc	r31, r19
    2746:	80 81       	ld	r24, Z
    2748:	0e 94 9c 11 	call	0x2338	; 0x2338 <LCD_displayCharacter>
		i++;
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	8f 5f       	subi	r24, 0xFF	; 255
    2750:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	88 23       	and	r24, r24
    2766:	39 f7       	brne	.-50     	; 0x2736 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <LCD_moveCursor+0x6>
    277a:	00 d0       	rcall	.+0      	; 0x277c <LCD_moveCursor+0x8>
    277c:	0f 92       	push	r0
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	8a 83       	std	Y+2, r24	; 0x02
    2784:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	28 2f       	mov	r18, r24
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	3d 83       	std	Y+5, r19	; 0x05
    278e:	2c 83       	std	Y+4, r18	; 0x04
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	9d 81       	ldd	r25, Y+5	; 0x05
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	91 05       	cpc	r25, r1
    2798:	c1 f0       	breq	.+48     	; 0x27ca <LCD_moveCursor+0x56>
    279a:	2c 81       	ldd	r18, Y+4	; 0x04
    279c:	3d 81       	ldd	r19, Y+5	; 0x05
    279e:	22 30       	cpi	r18, 0x02	; 2
    27a0:	31 05       	cpc	r19, r1
    27a2:	2c f4       	brge	.+10     	; 0x27ae <LCD_moveCursor+0x3a>
    27a4:	8c 81       	ldd	r24, Y+4	; 0x04
    27a6:	9d 81       	ldd	r25, Y+5	; 0x05
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	61 f0       	breq	.+24     	; 0x27c4 <LCD_moveCursor+0x50>
    27ac:	19 c0       	rjmp	.+50     	; 0x27e0 <LCD_moveCursor+0x6c>
    27ae:	2c 81       	ldd	r18, Y+4	; 0x04
    27b0:	3d 81       	ldd	r19, Y+5	; 0x05
    27b2:	22 30       	cpi	r18, 0x02	; 2
    27b4:	31 05       	cpc	r19, r1
    27b6:	69 f0       	breq	.+26     	; 0x27d2 <LCD_moveCursor+0x5e>
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	9d 81       	ldd	r25, Y+5	; 0x05
    27bc:	83 30       	cpi	r24, 0x03	; 3
    27be:	91 05       	cpc	r25, r1
    27c0:	61 f0       	breq	.+24     	; 0x27da <LCD_moveCursor+0x66>
    27c2:	0e c0       	rjmp	.+28     	; 0x27e0 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    27c4:	8b 81       	ldd	r24, Y+3	; 0x03
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	0b c0       	rjmp	.+22     	; 0x27e0 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	80 5c       	subi	r24, 0xC0	; 192
    27ce:	89 83       	std	Y+1, r24	; 0x01
    27d0:	07 c0       	rjmp	.+14     	; 0x27e0 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	80 5f       	subi	r24, 0xF0	; 240
    27d6:	89 83       	std	Y+1, r24	; 0x01
    27d8:	03 c0       	rjmp	.+6      	; 0x27e0 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    27da:	8b 81       	ldd	r24, Y+3	; 0x03
    27dc:	80 5b       	subi	r24, 0xB0	; 176
    27de:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	80 68       	ori	r24, 0x80	; 128
    27e4:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_sendCommand>
}
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <LCD_displayStringRowColumn+0x6>
    27fe:	00 d0       	rcall	.+0      	; 0x2800 <LCD_displayStringRowColumn+0x8>
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	6a 83       	std	Y+2, r22	; 0x02
    2808:	5c 83       	std	Y+4, r21	; 0x04
    280a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	6a 81       	ldd	r22, Y+2	; 0x02
    2810:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2814:	8b 81       	ldd	r24, Y+3	; 0x03
    2816:	9c 81       	ldd	r25, Y+4	; 0x04
    2818:	0e 94 91 13 	call	0x2722	; 0x2722 <LCD_displayString>
}
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	0f 90       	pop	r0
    2822:	0f 90       	pop	r0
    2824:	cf 91       	pop	r28
    2826:	df 91       	pop	r29
    2828:	08 95       	ret

0000282a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    282a:	df 93       	push	r29
    282c:	cf 93       	push	r28
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	62 97       	sbiw	r28, 0x12	; 18
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	9a 8b       	std	Y+18, r25	; 0x12
    2840:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2842:	89 89       	ldd	r24, Y+17	; 0x11
    2844:	9a 89       	ldd	r25, Y+18	; 0x12
    2846:	9e 01       	movw	r18, r28
    2848:	2f 5f       	subi	r18, 0xFF	; 255
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	b9 01       	movw	r22, r18
    284e:	4a e0       	ldi	r20, 0x0A	; 10
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	0e 94 e7 16 	call	0x2dce	; 0x2dce <itoa>
   LCD_displayString(buff); /* Display the string */
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	0e 94 91 13 	call	0x2722	; 0x2722 <LCD_displayString>
}
    285e:	62 96       	adiw	r28, 0x12	; 18
    2860:	0f b6       	in	r0, 0x3f	; 63
    2862:	f8 94       	cli
    2864:	de bf       	out	0x3e, r29	; 62
    2866:	0f be       	out	0x3f, r0	; 63
    2868:	cd bf       	out	0x3d, r28	; 61
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <LCD_sendCommand>
}
    287e:	cf 91       	pop	r28
    2880:	df 91       	pop	r29
    2882:	08 95       	ret

00002884 <DcMotor_Init>:
 * Description :
 * Initialize the DC Motor:
 * 1. Setup the input pins of motor L293D H-bridge directions using the GPIO driver.
 * 2. Initialize the output value of the input pins of motor driver by zero.
 */
void DcMotor_Init(void){
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, PIN_OUTPUT);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	61 e0       	ldi	r22, 0x01	; 1
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, PIN_OUTPUT);
    2896:	81 e0       	ldi	r24, 0x01	; 1
    2898:	62 e0       	ldi	r22, 0x02	; 2
    289a:	41 e0       	ldi	r20, 0x01	; 1
    289c:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, LOGIC_LOW);
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	61 e0       	ldi	r22, 0x01	; 1
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
	GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, LOGIC_LOW);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	62 e0       	ldi	r22, 0x02	; 2
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
#if (PWM_REQUIRED ==0)
	GPIO_setupPinDirection(Motor_Direction_PORT_ID, Motor_Enable_PIN_ID	, PIN_OUTPUT);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	63 e0       	ldi	r22, 0x03	; 3
    28b8:	41 e0       	ldi	r20, 0x01	; 1
    28ba:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_setupPinDirection>
	GPIO_writePin(Motor_Direction_PORT_ID, Motor_Enable_PIN_ID	, LOGIC_LOW);
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	63 e0       	ldi	r22, 0x03	; 3
    28c2:	40 e0       	ldi	r20, 0x00	; 0
    28c4:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
#endif
}
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <DcMotor_Rotate>:
 * Function responsible for setting motor rotation direction using GPIO driver
 * And setting rotation speed using PWM driver.
 * INPUTS:  Rotation direction of type uint8.
 * 			Rotation speed of type uint8
 */
void DcMotor_Rotate (DcMotor_State state,uint8 speed){
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	00 d0       	rcall	.+0      	; 0x28d4 <DcMotor_Rotate+0x6>
    28d4:	00 d0       	rcall	.+0      	; 0x28d6 <DcMotor_Rotate+0x8>
    28d6:	cd b7       	in	r28, 0x3d	; 61
    28d8:	de b7       	in	r29, 0x3e	; 62
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	6a 83       	std	Y+2, r22	; 0x02
	switch(state){
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	28 2f       	mov	r18, r24
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	3c 83       	std	Y+4, r19	; 0x04
    28e6:	2b 83       	std	Y+3, r18	; 0x03
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	81 30       	cpi	r24, 0x01	; 1
    28ee:	91 05       	cpc	r25, r1
    28f0:	c9 f0       	breq	.+50     	; 0x2924 <DcMotor_Rotate+0x56>
    28f2:	2b 81       	ldd	r18, Y+3	; 0x03
    28f4:	3c 81       	ldd	r19, Y+4	; 0x04
    28f6:	22 30       	cpi	r18, 0x02	; 2
    28f8:	31 05       	cpc	r19, r1
    28fa:	21 f1       	breq	.+72     	; 0x2944 <DcMotor_Rotate+0x76>
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
    28fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2900:	00 97       	sbiw	r24, 0x00	; 0
    2902:	81 f5       	brne	.+96     	; 0x2964 <DcMotor_Rotate+0x96>
	case OFF:
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, LOGIC_LOW);
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	40 e0       	ldi	r20, 0x00	; 0
    290a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, LOGIC_LOW);
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	62 e0       	ldi	r22, 0x02	; 2
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Enable_PIN_ID,     LOGIC_LOW);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2922:	2f c0       	rjmp	.+94     	; 0x2982 <DcMotor_Rotate+0xb4>
		break;
	case Clockwise:
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, LOGIC_HIGH);
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	61 e0       	ldi	r22, 0x01	; 1
    2928:	41 e0       	ldi	r20, 0x01	; 1
    292a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, LOGIC_LOW);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	62 e0       	ldi	r22, 0x02	; 2
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>

#if (PWM_REQUIRED ==0)
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Enable_PIN_ID	, LOGIC_HIGH);
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	63 e0       	ldi	r22, 0x03	; 3
    293c:	41 e0       	ldi	r20, 0x01	; 1
    293e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2942:	1f c0       	rjmp	.+62     	; 0x2982 <DcMotor_Rotate+0xb4>
		Timer0_Init(&Timer0_Structure);

#endif
		break;
	case Counter_Clockwise:
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, LOGIC_LOW);
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	61 e0       	ldi	r22, 0x01	; 1
    2948:	40 e0       	ldi	r20, 0x00	; 0
    294a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, LOGIC_HIGH);
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	62 e0       	ldi	r22, 0x02	; 2
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>


#if (PWM_REQUIRED ==0)
		GPIO_writePin(Motor_Direction_PORT_ID, PIN3_ID, LOGIC_HIGH);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	63 e0       	ldi	r22, 0x03	; 3
    295c:	41 e0       	ldi	r20, 0x01	; 1
    295e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
    2962:	0f c0       	rjmp	.+30     	; 0x2982 <DcMotor_Rotate+0xb4>
		Timer0_Init(&Timer0_Structure);

#endif
		break;
	default:
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN1_ID, LOGIC_LOW);
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Direction_PIN2_ID, LOGIC_LOW);
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	62 e0       	ldi	r22, 0x02	; 2
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
		GPIO_writePin(Motor_Direction_PORT_ID, Motor_Enable_PIN_ID,     LOGIC_LOW);
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	63 e0       	ldi	r22, 0x03	; 3
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <GPIO_writePin>
	}

}
    2982:	0f 90       	pop	r0
    2984:	0f 90       	pop	r0
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <TWI_init>:

#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2998:	e0 e2       	ldi	r30, 0x20	; 32
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	82 e0       	ldi	r24, 0x02	; 2
    299e:	80 83       	st	Z, r24
	TWSR = 0x00;
    29a0:	e1 e2       	ldi	r30, 0x21	; 33
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
    29a6:	e2 e2       	ldi	r30, 0x22	; 34
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    29ae:	e6 e5       	ldi	r30, 0x56	; 86
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	84 e0       	ldi	r24, 0x04	; 4
    29b4:	80 83       	st	Z, r24
}
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <TWI_start>:

void TWI_start(void)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    29c4:	e6 e5       	ldi	r30, 0x56	; 86
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	84 ea       	ldi	r24, 0xA4	; 164
    29ca:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29cc:	e6 e5       	ldi	r30, 0x56	; 86
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	88 23       	and	r24, r24
    29d4:	dc f7       	brge	.-10     	; 0x29cc <TWI_start+0x10>
}
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret

000029dc <TWI_stop>:

void TWI_stop(void)
{
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    29e4:	e6 e5       	ldi	r30, 0x56	; 86
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	84 e9       	ldi	r24, 0x94	; 148
    29ea:	80 83       	st	Z, r24
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	0f 92       	push	r0
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    29fe:	e3 e2       	ldi	r30, 0x23	; 35
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a06:	e6 e5       	ldi	r30, 0x56	; 86
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	84 e8       	ldi	r24, 0x84	; 132
    2a0c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a0e:	e6 e5       	ldi	r30, 0x56	; 86
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	88 23       	and	r24, r24
    2a16:	dc f7       	brge	.-10     	; 0x2a0e <TWI_writeByte+0x1c>
}
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2a28:	e6 e5       	ldi	r30, 0x56	; 86
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	84 ec       	ldi	r24, 0xC4	; 196
    2a2e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a30:	e6 e5       	ldi	r30, 0x56	; 86
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	88 23       	and	r24, r24
    2a38:	dc f7       	brge	.-10     	; 0x2a30 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2a3a:	e3 e2       	ldi	r30, 0x23	; 35
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a4e:	e6 e5       	ldi	r30, 0x56	; 86
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	84 e8       	ldi	r24, 0x84	; 132
    2a54:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a56:	e6 e5       	ldi	r30, 0x56	; 86
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 23       	and	r24, r24
    2a5e:	dc f7       	brge	.-10     	; 0x2a56 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2a60:	e3 e2       	ldi	r30, 0x23	; 35
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
}
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	0f 92       	push	r0
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2a76:	e1 e2       	ldi	r30, 0x21	; 33
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	88 7f       	andi	r24, 0xF8	; 248
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a82:	0f 90       	pop	r0
    2a84:	cf 91       	pop	r28
    2a86:	df 91       	pop	r29
    2a88:	08 95       	ret

00002a8a <UART_Init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    2a8a:	df 93       	push	r29
    2a8c:	cf 93       	push	r28
    2a8e:	00 d0       	rcall	.+0      	; 0x2a90 <UART_Init+0x6>
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <UART_Init+0x8>
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA =0;
    2a9a:	eb e2       	ldi	r30, 0x2B	; 43
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	10 82       	st	Z, r1
	UCSRB =0;
    2aa0:	ea e2       	ldi	r30, 0x2A	; 42
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	10 82       	st	Z, r1
	UCSRC =0;
    2aa6:	e0 e4       	ldi	r30, 0x40	; 64
    2aa8:	f0 e0       	ldi	r31, 0x00	; 0
    2aaa:	10 82       	st	Z, r1
	uint16 ubrr_value = 0;
    2aac:	1a 82       	std	Y+2, r1	; 0x02
    2aae:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2ab0:	eb e2       	ldi	r30, 0x2B	; 43
    2ab2:	f0 e0       	ldi	r31, 0x00	; 0
    2ab4:	82 e0       	ldi	r24, 0x02	; 2
    2ab6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB =  (1<<RXEN) | (1<<TXEN);
    2ab8:	ea e2       	ldi	r30, 0x2A	; 42
    2aba:	f0 e0       	ldi	r31, 0x00	; 0
    2abc:	88 e1       	ldi	r24, 0x18	; 24
    2abe:	80 83       	st	Z, r24
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = According to dynamically configured parity bits number
	 * USBS    = According to dynamically configured stop bits number
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2ac0:	e0 e4       	ldi	r30, 0x40	; 64
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 e8       	ldi	r24, 0x80	; 128
    2ac6:	80 83       	st	Z, r24

	UCSRC |= Config_Ptr->UART_StopBits;
    2ac8:	a0 e4       	ldi	r26, 0x40	; 64
    2aca:	b0 e0       	ldi	r27, 0x00	; 0
    2acc:	e0 e4       	ldi	r30, 0x40	; 64
    2ace:	f0 e0       	ldi	r31, 0x00	; 0
    2ad0:	90 81       	ld	r25, Z
    2ad2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ad4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad6:	84 81       	ldd	r24, Z+4	; 0x04
    2ad8:	89 2b       	or	r24, r25
    2ada:	8c 93       	st	X, r24

	UCSRC |= Config_Ptr->UART_Parity;
    2adc:	a0 e4       	ldi	r26, 0x40	; 64
    2ade:	b0 e0       	ldi	r27, 0x00	; 0
    2ae0:	e0 e4       	ldi	r30, 0x40	; 64
    2ae2:	f0 e0       	ldi	r31, 0x00	; 0
    2ae4:	90 81       	ld	r25, Z
    2ae6:	eb 81       	ldd	r30, Y+3	; 0x03
    2ae8:	fc 81       	ldd	r31, Y+4	; 0x04
    2aea:	85 81       	ldd	r24, Z+5	; 0x05
    2aec:	89 2b       	or	r24, r25
    2aee:	8c 93       	st	X, r24
	
	/************************** Frame Size Description *********************
	 * UCSZ2:0 = According to dynamically configured character size
	 * RXB8 & TXB8 enabled only for 9-bit data mode
	 ***********************************************************************/
	switch(Config_Ptr->UART_CharacterSize){
    2af0:	eb 81       	ldd	r30, Y+3	; 0x03
    2af2:	fc 81       	ldd	r31, Y+4	; 0x04
    2af4:	86 81       	ldd	r24, Z+6	; 0x06
    2af6:	88 2f       	mov	r24, r24
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	87 30       	cpi	r24, 0x07	; 7
    2afc:	91 05       	cpc	r25, r1
    2afe:	79 f4       	brne	.+30     	; 0x2b1e <UART_Init+0x94>

	case NINE_BIT:

		UCSRB |= (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);
    2b00:	aa e2       	ldi	r26, 0x2A	; 42
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	ea e2       	ldi	r30, 0x2A	; 42
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	80 81       	ld	r24, Z
    2b0a:	87 60       	ori	r24, 0x07	; 7
    2b0c:	8c 93       	st	X, r24
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    2b0e:	a0 e4       	ldi	r26, 0x40	; 64
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e0 e4       	ldi	r30, 0x40	; 64
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	86 60       	ori	r24, 0x06	; 6
    2b1a:	8c 93       	st	X, r24
    2b1c:	0a c0       	rjmp	.+20     	; 0x2b32 <UART_Init+0xa8>
		break;

	default:
		UCSRC |= Config_Ptr->UART_CharacterSize;
    2b1e:	a0 e4       	ldi	r26, 0x40	; 64
    2b20:	b0 e0       	ldi	r27, 0x00	; 0
    2b22:	e0 e4       	ldi	r30, 0x40	; 64
    2b24:	f0 e0       	ldi	r31, 0x00	; 0
    2b26:	90 81       	ld	r25, Z
    2b28:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2a:	fc 81       	ldd	r31, Y+4	; 0x04
    2b2c:	86 81       	ldd	r24, Z+6	; 0x06
    2b2e:	89 2b       	or	r24, r25
    2b30:	8c 93       	st	X, r24

	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> UART_BaudRate * 8UL))) - 1);
    2b32:	eb 81       	ldd	r30, Y+3	; 0x03
    2b34:	fc 81       	ldd	r31, Y+4	; 0x04
    2b36:	80 81       	ld	r24, Z
    2b38:	91 81       	ldd	r25, Z+1	; 0x01
    2b3a:	a2 81       	ldd	r26, Z+2	; 0x02
    2b3c:	b3 81       	ldd	r27, Z+3	; 0x03
    2b3e:	88 0f       	add	r24, r24
    2b40:	99 1f       	adc	r25, r25
    2b42:	aa 1f       	adc	r26, r26
    2b44:	bb 1f       	adc	r27, r27
    2b46:	88 0f       	add	r24, r24
    2b48:	99 1f       	adc	r25, r25
    2b4a:	aa 1f       	adc	r26, r26
    2b4c:	bb 1f       	adc	r27, r27
    2b4e:	88 0f       	add	r24, r24
    2b50:	99 1f       	adc	r25, r25
    2b52:	aa 1f       	adc	r26, r26
    2b54:	bb 1f       	adc	r27, r27
    2b56:	9c 01       	movw	r18, r24
    2b58:	ad 01       	movw	r20, r26
    2b5a:	80 e4       	ldi	r24, 0x40	; 64
    2b5c:	92 e4       	ldi	r25, 0x42	; 66
    2b5e:	af e0       	ldi	r26, 0x0F	; 15
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 71 16 	call	0x2ce2	; 0x2ce2 <__udivmodsi4>
    2b6a:	da 01       	movw	r26, r20
    2b6c:	c9 01       	movw	r24, r18
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b74:	e0 e4       	ldi	r30, 0x40	; 64
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7c:	89 2f       	mov	r24, r25
    2b7e:	99 27       	eor	r25, r25
    2b80:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b82:	e9 e2       	ldi	r30, 0x29	; 41
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	80 83       	st	Z, r24
}
    2b8a:	0f 90       	pop	r0
    2b8c:	0f 90       	pop	r0
    2b8e:	0f 90       	pop	r0
    2b90:	0f 90       	pop	r0
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	0f 92       	push	r0
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
    2ba2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ba4:	eb e2       	ldi	r30, 0x2B	; 43
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	80 72       	andi	r24, 0x20	; 32
    2bb0:	90 70       	andi	r25, 0x00	; 0
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	b9 f3       	breq	.-18     	; 0x2ba4 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2bb6:	ec e2       	ldi	r30, 0x2C	; 44
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2bce:	eb e2       	ldi	r30, 0x2B	; 43
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 23       	and	r24, r24
    2bd6:	dc f7       	brge	.-10     	; 0x2bce <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2bd8:	ec e2       	ldi	r30, 0x2C	; 44
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	80 81       	ld	r24, Z
}
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <UART_sendString+0x6>
    2bea:	0f 92       	push	r0
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	9b 83       	std	Y+3, r25	; 0x03
    2bf2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bf4:	19 82       	std	Y+1, r1	; 0x01
    2bf6:	0e c0       	rjmp	.+28     	; 0x2c14 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	80 81       	ld	r24, Z
    2c0a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <UART_sendByte>
		i++;
    2c0e:	89 81       	ldd	r24, Y+1	; 0x01
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	28 2f       	mov	r18, r24
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1e:	fc 01       	movw	r30, r24
    2c20:	e2 0f       	add	r30, r18
    2c22:	f3 1f       	adc	r31, r19
    2c24:	80 81       	ld	r24, Z
    2c26:	88 23       	and	r24, r24
    2c28:	39 f7       	brne	.-50     	; 0x2bf8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2c2a:	0f 90       	pop	r0
    2c2c:	0f 90       	pop	r0
    2c2e:	0f 90       	pop	r0
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	08 95       	ret

00002c36 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c36:	0f 93       	push	r16
    2c38:	1f 93       	push	r17
    2c3a:	df 93       	push	r29
    2c3c:	cf 93       	push	r28
    2c3e:	00 d0       	rcall	.+0      	; 0x2c40 <UART_receiveString+0xa>
    2c40:	0f 92       	push	r0
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	9b 83       	std	Y+3, r25	; 0x03
    2c48:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c4a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	28 2f       	mov	r18, r24
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	9b 81       	ldd	r25, Y+3	; 0x03
    2c56:	8c 01       	movw	r16, r24
    2c58:	02 0f       	add	r16, r18
    2c5a:	13 1f       	adc	r17, r19
    2c5c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
    2c60:	f8 01       	movw	r30, r16
    2c62:	80 83       	st	Z, r24
    2c64:	0f c0       	rjmp	.+30     	; 0x2c84 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c66:	89 81       	ldd	r24, Y+1	; 0x01
    2c68:	8f 5f       	subi	r24, 0xFF	; 255
    2c6a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	28 2f       	mov	r18, r24
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	8a 81       	ldd	r24, Y+2	; 0x02
    2c74:	9b 81       	ldd	r25, Y+3	; 0x03
    2c76:	8c 01       	movw	r16, r24
    2c78:	02 0f       	add	r16, r18
    2c7a:	13 1f       	adc	r17, r19
    2c7c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <UART_recieveByte>
    2c80:	f8 01       	movw	r30, r16
    2c82:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	28 2f       	mov	r18, r24
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8e:	fc 01       	movw	r30, r24
    2c90:	e2 0f       	add	r30, r18
    2c92:	f3 1f       	adc	r31, r19
    2c94:	80 81       	ld	r24, Z
    2c96:	83 32       	cpi	r24, 0x23	; 35
    2c98:	31 f7       	brne	.-52     	; 0x2c66 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	28 2f       	mov	r18, r24
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca4:	fc 01       	movw	r30, r24
    2ca6:	e2 0f       	add	r30, r18
    2ca8:	f3 1f       	adc	r31, r19
    2caa:	10 82       	st	Z, r1
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	1f 91       	pop	r17
    2cb8:	0f 91       	pop	r16
    2cba:	08 95       	ret

00002cbc <__divmodhi4>:
    2cbc:	97 fb       	bst	r25, 7
    2cbe:	09 2e       	mov	r0, r25
    2cc0:	07 26       	eor	r0, r23
    2cc2:	0a d0       	rcall	.+20     	; 0x2cd8 <__divmodhi4_neg1>
    2cc4:	77 fd       	sbrc	r23, 7
    2cc6:	04 d0       	rcall	.+8      	; 0x2cd0 <__divmodhi4_neg2>
    2cc8:	2e d0       	rcall	.+92     	; 0x2d26 <__udivmodhi4>
    2cca:	06 d0       	rcall	.+12     	; 0x2cd8 <__divmodhi4_neg1>
    2ccc:	00 20       	and	r0, r0
    2cce:	1a f4       	brpl	.+6      	; 0x2cd6 <__divmodhi4_exit>

00002cd0 <__divmodhi4_neg2>:
    2cd0:	70 95       	com	r23
    2cd2:	61 95       	neg	r22
    2cd4:	7f 4f       	sbci	r23, 0xFF	; 255

00002cd6 <__divmodhi4_exit>:
    2cd6:	08 95       	ret

00002cd8 <__divmodhi4_neg1>:
    2cd8:	f6 f7       	brtc	.-4      	; 0x2cd6 <__divmodhi4_exit>
    2cda:	90 95       	com	r25
    2cdc:	81 95       	neg	r24
    2cde:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce0:	08 95       	ret

00002ce2 <__udivmodsi4>:
    2ce2:	a1 e2       	ldi	r26, 0x21	; 33
    2ce4:	1a 2e       	mov	r1, r26
    2ce6:	aa 1b       	sub	r26, r26
    2ce8:	bb 1b       	sub	r27, r27
    2cea:	fd 01       	movw	r30, r26
    2cec:	0d c0       	rjmp	.+26     	; 0x2d08 <__udivmodsi4_ep>

00002cee <__udivmodsi4_loop>:
    2cee:	aa 1f       	adc	r26, r26
    2cf0:	bb 1f       	adc	r27, r27
    2cf2:	ee 1f       	adc	r30, r30
    2cf4:	ff 1f       	adc	r31, r31
    2cf6:	a2 17       	cp	r26, r18
    2cf8:	b3 07       	cpc	r27, r19
    2cfa:	e4 07       	cpc	r30, r20
    2cfc:	f5 07       	cpc	r31, r21
    2cfe:	20 f0       	brcs	.+8      	; 0x2d08 <__udivmodsi4_ep>
    2d00:	a2 1b       	sub	r26, r18
    2d02:	b3 0b       	sbc	r27, r19
    2d04:	e4 0b       	sbc	r30, r20
    2d06:	f5 0b       	sbc	r31, r21

00002d08 <__udivmodsi4_ep>:
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	99 1f       	adc	r25, r25
    2d10:	1a 94       	dec	r1
    2d12:	69 f7       	brne	.-38     	; 0x2cee <__udivmodsi4_loop>
    2d14:	60 95       	com	r22
    2d16:	70 95       	com	r23
    2d18:	80 95       	com	r24
    2d1a:	90 95       	com	r25
    2d1c:	9b 01       	movw	r18, r22
    2d1e:	ac 01       	movw	r20, r24
    2d20:	bd 01       	movw	r22, r26
    2d22:	cf 01       	movw	r24, r30
    2d24:	08 95       	ret

00002d26 <__udivmodhi4>:
    2d26:	aa 1b       	sub	r26, r26
    2d28:	bb 1b       	sub	r27, r27
    2d2a:	51 e1       	ldi	r21, 0x11	; 17
    2d2c:	07 c0       	rjmp	.+14     	; 0x2d3c <__udivmodhi4_ep>

00002d2e <__udivmodhi4_loop>:
    2d2e:	aa 1f       	adc	r26, r26
    2d30:	bb 1f       	adc	r27, r27
    2d32:	a6 17       	cp	r26, r22
    2d34:	b7 07       	cpc	r27, r23
    2d36:	10 f0       	brcs	.+4      	; 0x2d3c <__udivmodhi4_ep>
    2d38:	a6 1b       	sub	r26, r22
    2d3a:	b7 0b       	sbc	r27, r23

00002d3c <__udivmodhi4_ep>:
    2d3c:	88 1f       	adc	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	5a 95       	dec	r21
    2d42:	a9 f7       	brne	.-22     	; 0x2d2e <__udivmodhi4_loop>
    2d44:	80 95       	com	r24
    2d46:	90 95       	com	r25
    2d48:	bc 01       	movw	r22, r24
    2d4a:	cd 01       	movw	r24, r26
    2d4c:	08 95       	ret

00002d4e <__prologue_saves__>:
    2d4e:	2f 92       	push	r2
    2d50:	3f 92       	push	r3
    2d52:	4f 92       	push	r4
    2d54:	5f 92       	push	r5
    2d56:	6f 92       	push	r6
    2d58:	7f 92       	push	r7
    2d5a:	8f 92       	push	r8
    2d5c:	9f 92       	push	r9
    2d5e:	af 92       	push	r10
    2d60:	bf 92       	push	r11
    2d62:	cf 92       	push	r12
    2d64:	df 92       	push	r13
    2d66:	ef 92       	push	r14
    2d68:	ff 92       	push	r15
    2d6a:	0f 93       	push	r16
    2d6c:	1f 93       	push	r17
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	ca 1b       	sub	r28, r26
    2d78:	db 0b       	sbc	r29, r27
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	09 94       	ijmp

00002d86 <__epilogue_restores__>:
    2d86:	2a 88       	ldd	r2, Y+18	; 0x12
    2d88:	39 88       	ldd	r3, Y+17	; 0x11
    2d8a:	48 88       	ldd	r4, Y+16	; 0x10
    2d8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d90:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d92:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d94:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d96:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d98:	b9 84       	ldd	r11, Y+9	; 0x09
    2d9a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d9c:	df 80       	ldd	r13, Y+7	; 0x07
    2d9e:	ee 80       	ldd	r14, Y+6	; 0x06
    2da0:	fd 80       	ldd	r15, Y+5	; 0x05
    2da2:	0c 81       	ldd	r16, Y+4	; 0x04
    2da4:	1b 81       	ldd	r17, Y+3	; 0x03
    2da6:	aa 81       	ldd	r26, Y+2	; 0x02
    2da8:	b9 81       	ldd	r27, Y+1	; 0x01
    2daa:	ce 0f       	add	r28, r30
    2dac:	d1 1d       	adc	r29, r1
    2dae:	0f b6       	in	r0, 0x3f	; 63
    2db0:	f8 94       	cli
    2db2:	de bf       	out	0x3e, r29	; 62
    2db4:	0f be       	out	0x3f, r0	; 63
    2db6:	cd bf       	out	0x3d, r28	; 61
    2db8:	ed 01       	movw	r28, r26
    2dba:	08 95       	ret

00002dbc <strcmp>:
    2dbc:	fb 01       	movw	r30, r22
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	8d 91       	ld	r24, X+
    2dc2:	01 90       	ld	r0, Z+
    2dc4:	80 19       	sub	r24, r0
    2dc6:	01 10       	cpse	r0, r1
    2dc8:	d9 f3       	breq	.-10     	; 0x2dc0 <strcmp+0x4>
    2dca:	99 0b       	sbc	r25, r25
    2dcc:	08 95       	ret

00002dce <itoa>:
    2dce:	fb 01       	movw	r30, r22
    2dd0:	9f 01       	movw	r18, r30
    2dd2:	e8 94       	clt
    2dd4:	42 30       	cpi	r20, 0x02	; 2
    2dd6:	c4 f0       	brlt	.+48     	; 0x2e08 <itoa+0x3a>
    2dd8:	45 32       	cpi	r20, 0x25	; 37
    2dda:	b4 f4       	brge	.+44     	; 0x2e08 <itoa+0x3a>
    2ddc:	4a 30       	cpi	r20, 0x0A	; 10
    2dde:	29 f4       	brne	.+10     	; 0x2dea <itoa+0x1c>
    2de0:	97 fb       	bst	r25, 7
    2de2:	1e f4       	brtc	.+6      	; 0x2dea <itoa+0x1c>
    2de4:	90 95       	com	r25
    2de6:	81 95       	neg	r24
    2de8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dea:	64 2f       	mov	r22, r20
    2dec:	77 27       	eor	r23, r23
    2dee:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__udivmodhi4>
    2df2:	80 5d       	subi	r24, 0xD0	; 208
    2df4:	8a 33       	cpi	r24, 0x3A	; 58
    2df6:	0c f0       	brlt	.+2      	; 0x2dfa <itoa+0x2c>
    2df8:	89 5d       	subi	r24, 0xD9	; 217
    2dfa:	81 93       	st	Z+, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	a1 f7       	brne	.-24     	; 0x2dea <itoa+0x1c>
    2e02:	16 f4       	brtc	.+4      	; 0x2e08 <itoa+0x3a>
    2e04:	5d e2       	ldi	r21, 0x2D	; 45
    2e06:	51 93       	st	Z+, r21
    2e08:	10 82       	st	Z, r1
    2e0a:	c9 01       	movw	r24, r18
    2e0c:	0c 94 08 17 	jmp	0x2e10	; 0x2e10 <strrev>

00002e10 <strrev>:
    2e10:	dc 01       	movw	r26, r24
    2e12:	fc 01       	movw	r30, r24
    2e14:	67 2f       	mov	r22, r23
    2e16:	71 91       	ld	r23, Z+
    2e18:	77 23       	and	r23, r23
    2e1a:	e1 f7       	brne	.-8      	; 0x2e14 <strrev+0x4>
    2e1c:	32 97       	sbiw	r30, 0x02	; 2
    2e1e:	04 c0       	rjmp	.+8      	; 0x2e28 <strrev+0x18>
    2e20:	7c 91       	ld	r23, X
    2e22:	6d 93       	st	X+, r22
    2e24:	70 83       	st	Z, r23
    2e26:	62 91       	ld	r22, -Z
    2e28:	ae 17       	cp	r26, r30
    2e2a:	bf 07       	cpc	r27, r31
    2e2c:	c8 f3       	brcs	.-14     	; 0x2e20 <strrev+0x10>
    2e2e:	08 95       	ret

00002e30 <_exit>:
    2e30:	f8 94       	cli

00002e32 <__stop_program>:
    2e32:	ff cf       	rjmp	.-2      	; 0x2e32 <__stop_program>
