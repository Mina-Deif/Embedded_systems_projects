
Door_locker_security_system_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002b5e  00002bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000ee  008000ee  00002c80  2**0
                  ALLOC
  3 .stab         00002940  00000000  00000000  00002c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000138e  00000000  00000000  000055c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000694e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008847  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009732  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a4e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a640  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b09b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af ed       	ldi	r26, 0xDF	; 223
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 45 15 	jmp	0x2a8a	; 0x2a8a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f ed       	ldi	r24, 0xDF	; 223
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 51 15 	jmp	0x2aa2	; 0x2aa2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 55 15 	jmp	0x2aaa	; 0x2aaa <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 g_tick = 0;

/* global variable flag to indicate finish of counting desired number of seconds */
uint8 g_FinshedCounting = 0;

int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ab 97       	sbiw	r28, 0x2b	; 43
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61


	LCD_init();			/* Initialize LCD driver*/
     b5a:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <LCD_init>

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec, 1 stop bit, disabled parity and 8 bit character */
	UART_ConfigType UART_Structure={9600,ONE_BIT,DISABLED,EIGHT_BIT};
     b5e:	9e 01       	movw	r18, r28
     b60:	22 5e       	subi	r18, 0xE2	; 226
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	38 a7       	std	Y+40, r19	; 0x28
     b66:	2f a3       	std	Y+39, r18	; 0x27
     b68:	87 ee       	ldi	r24, 0xE7	; 231
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	9a a7       	std	Y+42, r25	; 0x2a
     b6e:	89 a7       	std	Y+41, r24	; 0x29
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	9b a7       	std	Y+43, r25	; 0x2b
     b74:	e9 a5       	ldd	r30, Y+41	; 0x29
     b76:	fa a5       	ldd	r31, Y+42	; 0x2a
     b78:	00 80       	ld	r0, Z
     b7a:	29 a5       	ldd	r18, Y+41	; 0x29
     b7c:	3a a5       	ldd	r19, Y+42	; 0x2a
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	3a a7       	std	Y+42, r19	; 0x2a
     b84:	29 a7       	std	Y+41, r18	; 0x29
     b86:	ef a1       	ldd	r30, Y+39	; 0x27
     b88:	f8 a5       	ldd	r31, Y+40	; 0x28
     b8a:	00 82       	st	Z, r0
     b8c:	2f a1       	ldd	r18, Y+39	; 0x27
     b8e:	38 a5       	ldd	r19, Y+40	; 0x28
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	38 a7       	std	Y+40, r19	; 0x28
     b96:	2f a3       	std	Y+39, r18	; 0x27
     b98:	3b a5       	ldd	r19, Y+43	; 0x2b
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3b a7       	std	Y+43, r19	; 0x2b
     b9e:	8b a5       	ldd	r24, Y+43	; 0x2b
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_Init(&UART_Structure);
     ba4:	ce 01       	movw	r24, r28
     ba6:	4e 96       	adiw	r24, 0x1e	; 30
     ba8:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <UART_Init>


	uint8 Decision;		/*Variable to store the received decision from MC2 */

	/*To set a password for the system at first use */
	UART_sendByte(SetFirstPasswordFn);
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <UART_sendByte>
	Decision = UART_recieveByte();
     bb2:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
     bb6:	8d 8f       	std	Y+29, r24	; 0x1d
	if (Decision)
     bb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bba:	88 23       	and	r24, r24
     bbc:	11 f4       	brne	.+4      	; 0xbc2 <main+0x7c>
	{

	}
	else{
	SetNewPassword ();
     bbe:	0e 94 af 08 	call	0x115e	; 0x115e <SetNewPassword>
	}


	while(1){
		GetOptions();
     bc2:	0e 94 81 08 	call	0x1102	; 0x1102 <GetOptions>
		Decision = UART_recieveByte();
     bc6:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
     bca:	8d 8f       	std	Y+29, r24	; 0x1d
		switch (Decision){
     bcc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     bce:	e8 2f       	mov	r30, r24
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	fe a3       	std	Y+38, r31	; 0x26
     bd4:	ed a3       	std	Y+37, r30	; 0x25
     bd6:	2d a1       	ldd	r18, Y+37	; 0x25
     bd8:	3e a1       	ldd	r19, Y+38	; 0x26
     bda:	23 30       	cpi	r18, 0x03	; 3
     bdc:	31 05       	cpc	r19, r1
     bde:	09 f4       	brne	.+2      	; 0xbe2 <main+0x9c>
     be0:	a0 c0       	rjmp	.+320    	; 0xd22 <main+0x1dc>
     be2:	8d a1       	ldd	r24, Y+37	; 0x25
     be4:	9e a1       	ldd	r25, Y+38	; 0x26
     be6:	84 30       	cpi	r24, 0x04	; 4
     be8:	91 05       	cpc	r25, r1
     bea:	59 f7       	brne	.-42     	; 0xbc2 <main+0x7c>
		case OpenDoorFn:

			InformMC2(EnterPasswordFn);
     bec:	82 e0       	ldi	r24, 0x02	; 2
     bee:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <InformMC2>
			LCD_clearScreen();
     bf2:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password:");
     bf6:	20 e6       	ldi	r18, 0x60	; 96
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	a9 01       	movw	r20, r18
     c00:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
			GetPassword();
     c04:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>

			if(CheckDecision())
     c08:	0e 94 4d 09 	call	0x129a	; 0x129a <CheckDecision>
     c0c:	88 23       	and	r24, r24
     c0e:	69 f0       	breq	.+26     	; 0xc2a <main+0xe4>
			{
				LCD_clearScreen();
     c10:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Opening the door");
     c14:	20 e7       	ldi	r18, 0x70	; 112
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	a9 01       	movw	r20, r18
     c1e:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
				CountByTimer0(33);
     c22:	81 e2       	ldi	r24, 0x21	; 33
     c24:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <CountByTimer0>
     c28:	cc cf       	rjmp	.-104    	; 0xbc2 <main+0x7c>
			}
			else
			{
				LCD_clearScreen();
     c2a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Wrong password");
     c2e:	21 e8       	ldi	r18, 0x81	; 129
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	aa e7       	ldi	r26, 0x7A	; 122
     c42:	b4 e4       	ldi	r27, 0x44	; 68
     c44:	89 8f       	std	Y+25, r24	; 0x19
     c46:	9a 8f       	std	Y+26, r25	; 0x1a
     c48:	ab 8f       	std	Y+27, r26	; 0x1b
     c4a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	69 8d       	ldd	r22, Y+25	; 0x19
     c4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c50:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c52:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a ef       	ldi	r20, 0xFA	; 250
     c5a:	54 e4       	ldi	r21, 0x44	; 68
     c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	8d 8b       	std	Y+21, r24	; 0x15
     c66:	9e 8b       	std	Y+22, r25	; 0x16
     c68:	af 8b       	std	Y+23, r26	; 0x17
     c6a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c6c:	6d 89       	ldd	r22, Y+21	; 0x15
     c6e:	7e 89       	ldd	r23, Y+22	; 0x16
     c70:	8f 89       	ldd	r24, Y+23	; 0x17
     c72:	98 8d       	ldd	r25, Y+24	; 0x18
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e8       	ldi	r20, 0x80	; 128
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c80:	88 23       	and	r24, r24
     c82:	2c f4       	brge	.+10     	; 0xc8e <main+0x148>
		__ticks = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c 8b       	std	Y+20, r25	; 0x14
     c8a:	8b 8b       	std	Y+19, r24	; 0x13
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <main+0x1c6>
	else if (__tmp > 65535)
     c8e:	6d 89       	ldd	r22, Y+21	; 0x15
     c90:	7e 89       	ldd	r23, Y+22	; 0x16
     c92:	8f 89       	ldd	r24, Y+23	; 0x17
     c94:	98 8d       	ldd	r25, Y+24	; 0x18
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f e7       	ldi	r20, 0x7F	; 127
     c9c:	57 e4       	ldi	r21, 0x47	; 71
     c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca2:	18 16       	cp	r1, r24
     ca4:	4c f5       	brge	.+82     	; 0xcf8 <main+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca6:	69 8d       	ldd	r22, Y+25	; 0x19
     ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	51 e4       	ldi	r21, 0x41	; 65
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9c 8b       	std	Y+20, r25	; 0x14
     ccc:	8b 8b       	std	Y+19, r24	; 0x13
     cce:	0f c0       	rjmp	.+30     	; 0xcee <main+0x1a8>
     cd0:	88 ec       	ldi	r24, 0xC8	; 200
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9a 8b       	std	Y+18, r25	; 0x12
     cd6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd8:	89 89       	ldd	r24, Y+17	; 0x11
     cda:	9a 89       	ldd	r25, Y+18	; 0x12
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <main+0x196>
     ce0:	9a 8b       	std	Y+18, r25	; 0x12
     ce2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce4:	8b 89       	ldd	r24, Y+19	; 0x13
     ce6:	9c 89       	ldd	r25, Y+20	; 0x14
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	9c 8b       	std	Y+20, r25	; 0x14
     cec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	8b 89       	ldd	r24, Y+19	; 0x13
     cf0:	9c 89       	ldd	r25, Y+20	; 0x14
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	69 f7       	brne	.-38     	; 0xcd0 <main+0x18a>
     cf6:	65 cf       	rjmp	.-310    	; 0xbc2 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf8:	6d 89       	ldd	r22, Y+21	; 0x15
     cfa:	7e 89       	ldd	r23, Y+22	; 0x16
     cfc:	8f 89       	ldd	r24, Y+23	; 0x17
     cfe:	98 8d       	ldd	r25, Y+24	; 0x18
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9c 8b       	std	Y+20, r25	; 0x14
     d0a:	8b 8b       	std	Y+19, r24	; 0x13
     d0c:	8b 89       	ldd	r24, Y+19	; 0x13
     d0e:	9c 89       	ldd	r25, Y+20	; 0x14
     d10:	98 8b       	std	Y+16, r25	; 0x10
     d12:	8f 87       	std	Y+15, r24	; 0x0f
     d14:	8f 85       	ldd	r24, Y+15	; 0x0f
     d16:	98 89       	ldd	r25, Y+16	; 0x10
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <main+0x1d2>
     d1c:	98 8b       	std	Y+16, r25	; 0x10
     d1e:	8f 87       	std	Y+15, r24	; 0x0f
     d20:	50 cf       	rjmp	.-352    	; 0xbc2 <main+0x7c>
				_delay_ms(1000);
			}
			break;

		case ChangePasswordFn:
			LCD_clearScreen();
     d22:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Enter password:");
     d26:	20 e6       	ldi	r18, 0x60	; 96
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	a9 01       	movw	r20, r18
     d30:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
			GetPassword();
     d34:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>
			if(CheckDecision())
     d38:	0e 94 4d 09 	call	0x129a	; 0x129a <CheckDecision>
     d3c:	88 23       	and	r24, r24
     d3e:	19 f0       	breq	.+6      	; 0xd46 <main+0x200>
			{
				SetNewPassword ();
     d40:	0e 94 af 08 	call	0x115e	; 0x115e <SetNewPassword>
     d44:	3e cf       	rjmp	.-388    	; 0xbc2 <main+0x7c>
			}
			else
			{
				LCD_clearScreen();
     d46:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Wrong password");
     d4a:	21 e8       	ldi	r18, 0x81	; 129
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	a9 01       	movw	r20, r18
     d54:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	aa e7       	ldi	r26, 0x7A	; 122
     d5e:	b4 e4       	ldi	r27, 0x44	; 68
     d60:	8b 87       	std	Y+11, r24	; 0x0b
     d62:	9c 87       	std	Y+12, r25	; 0x0c
     d64:	ad 87       	std	Y+13, r26	; 0x0d
     d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d68:	6b 85       	ldd	r22, Y+11	; 0x0b
     d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a ef       	ldi	r20, 0xFA	; 250
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8f 83       	std	Y+7, r24	; 0x07
     d82:	98 87       	std	Y+8, r25	; 0x08
     d84:	a9 87       	std	Y+9, r26	; 0x09
     d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d88:	6f 81       	ldd	r22, Y+7	; 0x07
     d8a:	78 85       	ldd	r23, Y+8	; 0x08
     d8c:	89 85       	ldd	r24, Y+9	; 0x09
     d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	5f e3       	ldi	r21, 0x3F	; 63
     d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d9c:	88 23       	and	r24, r24
     d9e:	2c f4       	brge	.+10     	; 0xdaa <main+0x264>
		__ticks = 1;
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <main+0x2e2>
	else if (__tmp > 65535)
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	20 e0       	ldi	r18, 0x00	; 0
     db4:	3f ef       	ldi	r19, 0xFF	; 255
     db6:	4f e7       	ldi	r20, 0x7F	; 127
     db8:	57 e4       	ldi	r21, 0x47	; 71
     dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dbe:	18 16       	cp	r1, r24
     dc0:	4c f5       	brge	.+82     	; 0xe14 <main+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e2       	ldi	r20, 0x20	; 32
     dd0:	51 e4       	ldi	r21, 0x41	; 65
     dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd6:	dc 01       	movw	r26, r24
     dd8:	cb 01       	movw	r24, r22
     dda:	bc 01       	movw	r22, r24
     ddc:	cd 01       	movw	r24, r26
     dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de2:	dc 01       	movw	r26, r24
     de4:	cb 01       	movw	r24, r22
     de6:	9e 83       	std	Y+6, r25	; 0x06
     de8:	8d 83       	std	Y+5, r24	; 0x05
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <main+0x2c4>
     dec:	88 ec       	ldi	r24, 0xC8	; 200
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 83       	std	Y+4, r25	; 0x04
     df2:	8b 83       	std	Y+3, r24	; 0x03
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	01 97       	sbiw	r24, 0x01	; 1
     dfa:	f1 f7       	brne	.-4      	; 0xdf8 <main+0x2b2>
     dfc:	9c 83       	std	Y+4, r25	; 0x04
     dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	69 f7       	brne	.-38     	; 0xdec <main+0x2a6>
     e12:	d7 ce       	rjmp	.-594    	; 0xbc2 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e14:	6f 81       	ldd	r22, Y+7	; 0x07
     e16:	78 85       	ldd	r23, Y+8	; 0x08
     e18:	89 85       	ldd	r24, Y+9	; 0x09
     e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e20:	dc 01       	movw	r26, r24
     e22:	cb 01       	movw	r24, r22
     e24:	9e 83       	std	Y+6, r25	; 0x06
     e26:	8d 83       	std	Y+5, r24	; 0x05
     e28:	8d 81       	ldd	r24, Y+5	; 0x05
     e2a:	9e 81       	ldd	r25, Y+6	; 0x06
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	01 97       	sbiw	r24, 0x01	; 1
     e36:	f1 f7       	brne	.-4      	; 0xe34 <main+0x2ee>
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	c2 ce       	rjmp	.-636    	; 0xbc2 <main+0x7c>

00000e3e <ChangePassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void ChangePassword (void)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	2e 97       	sbiw	r28, 0x0e	; 14
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	f8 94       	cli
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	cd bf       	out	0x3d, r28	; 61

	LCD_clearScreen();
     e52:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new pass:");
     e56:	20 e9       	ldi	r18, 0x90	; 144
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	80 e0       	ldi	r24, 0x00	; 0
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	a9 01       	movw	r20, r18
     e60:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
	GetPassword();
     e64:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	aa ef       	ldi	r26, 0xFA	; 250
     e6e:	b3 e4       	ldi	r27, 0x43	; 67
     e70:	8b 87       	std	Y+11, r24	; 0x0b
     e72:	9c 87       	std	Y+12, r25	; 0x0c
     e74:	ad 87       	std	Y+13, r26	; 0x0d
     e76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e78:	6b 85       	ldd	r22, Y+11	; 0x0b
     e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	4a ef       	ldi	r20, 0xFA	; 250
     e86:	54 e4       	ldi	r21, 0x44	; 68
     e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8c:	dc 01       	movw	r26, r24
     e8e:	cb 01       	movw	r24, r22
     e90:	8f 83       	std	Y+7, r24	; 0x07
     e92:	98 87       	std	Y+8, r25	; 0x08
     e94:	a9 87       	std	Y+9, r26	; 0x09
     e96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e98:	6f 81       	ldd	r22, Y+7	; 0x07
     e9a:	78 85       	ldd	r23, Y+8	; 0x08
     e9c:	89 85       	ldd	r24, Y+9	; 0x09
     e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e8       	ldi	r20, 0x80	; 128
     ea6:	5f e3       	ldi	r21, 0x3F	; 63
     ea8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eac:	88 23       	and	r24, r24
     eae:	2c f4       	brge	.+10     	; 0xeba <ChangePassword+0x7c>
		__ticks = 1;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	9e 83       	std	Y+6, r25	; 0x06
     eb6:	8d 83       	std	Y+5, r24	; 0x05
     eb8:	3f c0       	rjmp	.+126    	; 0xf38 <ChangePassword+0xfa>
	else if (__tmp > 65535)
     eba:	6f 81       	ldd	r22, Y+7	; 0x07
     ebc:	78 85       	ldd	r23, Y+8	; 0x08
     ebe:	89 85       	ldd	r24, Y+9	; 0x09
     ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	3f ef       	ldi	r19, 0xFF	; 255
     ec6:	4f e7       	ldi	r20, 0x7F	; 127
     ec8:	57 e4       	ldi	r21, 0x47	; 71
     eca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ece:	18 16       	cp	r1, r24
     ed0:	4c f5       	brge	.+82     	; 0xf24 <ChangePassword+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ed2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e2       	ldi	r20, 0x20	; 32
     ee0:	51 e4       	ldi	r21, 0x41	; 65
     ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	9e 83       	std	Y+6, r25	; 0x06
     ef8:	8d 83       	std	Y+5, r24	; 0x05
     efa:	0f c0       	rjmp	.+30     	; 0xf1a <ChangePassword+0xdc>
     efc:	88 ec       	ldi	r24, 0xC8	; 200
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9c 83       	std	Y+4, r25	; 0x04
     f02:	8b 83       	std	Y+3, r24	; 0x03
     f04:	8b 81       	ldd	r24, Y+3	; 0x03
     f06:	9c 81       	ldd	r25, Y+4	; 0x04
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	f1 f7       	brne	.-4      	; 0xf08 <ChangePassword+0xca>
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f10:	8d 81       	ldd	r24, Y+5	; 0x05
     f12:	9e 81       	ldd	r25, Y+6	; 0x06
     f14:	01 97       	sbiw	r24, 0x01	; 1
     f16:	9e 83       	std	Y+6, r25	; 0x06
     f18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f1a:	8d 81       	ldd	r24, Y+5	; 0x05
     f1c:	9e 81       	ldd	r25, Y+6	; 0x06
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	69 f7       	brne	.-38     	; 0xefc <ChangePassword+0xbe>
     f22:	14 c0       	rjmp	.+40     	; 0xf4c <ChangePassword+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	9e 83       	std	Y+6, r25	; 0x06
     f36:	8d 83       	std	Y+5, r24	; 0x05
     f38:	8d 81       	ldd	r24, Y+5	; 0x05
     f3a:	9e 81       	ldd	r25, Y+6	; 0x06
     f3c:	9a 83       	std	Y+2, r25	; 0x02
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	9a 81       	ldd	r25, Y+2	; 0x02
     f44:	01 97       	sbiw	r24, 0x01	; 1
     f46:	f1 f7       	brne	.-4      	; 0xf44 <ChangePassword+0x106>
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_clearScreen();
     f4c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Renter new pass:");
     f50:	20 ea       	ldi	r18, 0xA0	; 160
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	a9 01       	movw	r20, r18
     f5a:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
	GetPassword();
     f5e:	0e 94 ba 07 	call	0xf74	; 0xf74 <GetPassword>

}
     f62:	2e 96       	adiw	r28, 0x0e	; 14
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <GetPassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void GetPassword(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	a1 97       	sbiw	r28, 0x21	; 33
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
	uint8 Password[17];
	uint8 key;
	uint8 counter = 0;
     f88:	1f 86       	std	Y+15, r1	; 0x0f
	do
	{
		key = KEYPAD_getPressedKey();
     f8a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <KEYPAD_getPressedKey>
     f8e:	88 8b       	std	Y+16, r24	; 0x10

		if((key >= 0) && (key <= 9))
     f90:	88 89       	ldd	r24, Y+16	; 0x10
     f92:	8a 30       	cpi	r24, 0x0A	; 10
     f94:	08 f0       	brcs	.+2      	; 0xf98 <GetPassword+0x24>
     f96:	8a c0       	rjmp	.+276    	; 0x10ac <GetPassword+0x138>
		{
			Password[counter]=key+48;
     f98:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	88 89       	ldd	r24, Y+16	; 0x10
     fa0:	48 2f       	mov	r20, r24
     fa2:	40 5d       	subi	r20, 0xD0	; 208
     fa4:	ce 01       	movw	r24, r28
     fa6:	41 96       	adiw	r24, 0x11	; 17
     fa8:	fc 01       	movw	r30, r24
     faa:	e2 0f       	add	r30, r18
     fac:	f3 1f       	adc	r31, r19
     fae:	40 83       	st	Z, r20
			LCD_moveCursor(1,counter);
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	6f 85       	ldd	r22, Y+15	; 0x0f
     fb4:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <LCD_moveCursor>
			LCD_intgerToString(key);
     fb8:	88 89       	ldd	r24, Y+16	; 0x10
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 b6 13 	call	0x276c	; 0x276c <LCD_intgerToString>
			counter++;
     fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fc4:	8f 5f       	subi	r24, 0xFF	; 255
     fc6:	8f 87       	std	Y+15, r24	; 0x0f
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	aa ef       	ldi	r26, 0xFA	; 250
     fce:	b3 e4       	ldi	r27, 0x43	; 67
     fd0:	8b 87       	std	Y+11, r24	; 0x0b
     fd2:	9c 87       	std	Y+12, r25	; 0x0c
     fd4:	ad 87       	std	Y+13, r26	; 0x0d
     fd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     fda:	7c 85       	ldd	r23, Y+12	; 0x0c
     fdc:	8d 85       	ldd	r24, Y+13	; 0x0d
     fde:	9e 85       	ldd	r25, Y+14	; 0x0e
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	4a ef       	ldi	r20, 0xFA	; 250
     fe6:	54 e4       	ldi	r21, 0x44	; 68
     fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	8f 83       	std	Y+7, r24	; 0x07
     ff2:	98 87       	std	Y+8, r25	; 0x08
     ff4:	a9 87       	std	Y+9, r26	; 0x09
     ff6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ff8:	6f 81       	ldd	r22, Y+7	; 0x07
     ffa:	78 85       	ldd	r23, Y+8	; 0x08
     ffc:	89 85       	ldd	r24, Y+9	; 0x09
     ffe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e8       	ldi	r20, 0x80	; 128
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    100c:	88 23       	and	r24, r24
    100e:	2c f4       	brge	.+10     	; 0x101a <GetPassword+0xa6>
		__ticks = 1;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	9e 83       	std	Y+6, r25	; 0x06
    1016:	8d 83       	std	Y+5, r24	; 0x05
    1018:	3f c0       	rjmp	.+126    	; 0x1098 <GetPassword+0x124>
	else if (__tmp > 65535)
    101a:	6f 81       	ldd	r22, Y+7	; 0x07
    101c:	78 85       	ldd	r23, Y+8	; 0x08
    101e:	89 85       	ldd	r24, Y+9	; 0x09
    1020:	9a 85       	ldd	r25, Y+10	; 0x0a
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	3f ef       	ldi	r19, 0xFF	; 255
    1026:	4f e7       	ldi	r20, 0x7F	; 127
    1028:	57 e4       	ldi	r21, 0x47	; 71
    102a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    102e:	18 16       	cp	r1, r24
    1030:	4c f5       	brge	.+82     	; 0x1084 <GetPassword+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1032:	6b 85       	ldd	r22, Y+11	; 0x0b
    1034:	7c 85       	ldd	r23, Y+12	; 0x0c
    1036:	8d 85       	ldd	r24, Y+13	; 0x0d
    1038:	9e 85       	ldd	r25, Y+14	; 0x0e
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e2       	ldi	r20, 0x20	; 32
    1040:	51 e4       	ldi	r21, 0x41	; 65
    1042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e 83       	std	Y+6, r25	; 0x06
    1058:	8d 83       	std	Y+5, r24	; 0x05
    105a:	0f c0       	rjmp	.+30     	; 0x107a <GetPassword+0x106>
    105c:	88 ec       	ldi	r24, 0xC8	; 200
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <GetPassword+0xf4>
    106c:	9c 83       	std	Y+4, r25	; 0x04
    106e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	9e 83       	std	Y+6, r25	; 0x06
    1078:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	69 f7       	brne	.-38     	; 0x105c <GetPassword+0xe8>
    1082:	14 c0       	rjmp	.+40     	; 0x10ac <GetPassword+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1084:	6f 81       	ldd	r22, Y+7	; 0x07
    1086:	78 85       	ldd	r23, Y+8	; 0x08
    1088:	89 85       	ldd	r24, Y+9	; 0x09
    108a:	9a 85       	ldd	r25, Y+10	; 0x0a
    108c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	9e 83       	std	Y+6, r25	; 0x06
    1096:	8d 83       	std	Y+5, r24	; 0x05
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	9e 81       	ldd	r25, Y+6	; 0x06
    109c:	9a 83       	std	Y+2, r25	; 0x02
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <GetPassword+0x130>
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}
	}
	while(key != '=');
    10ac:	88 89       	ldd	r24, Y+16	; 0x10
    10ae:	8d 33       	cpi	r24, 0x3D	; 61
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <GetPassword+0x140>
    10b2:	6b cf       	rjmp	.-298    	; 0xf8a <GetPassword+0x16>
	Password[counter]= '#';
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	ce 01       	movw	r24, r28
    10bc:	41 96       	adiw	r24, 0x11	; 17
    10be:	fc 01       	movw	r30, r24
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	83 e2       	ldi	r24, 0x23	; 35
    10c6:	80 83       	st	Z, r24
	Password[counter+1]= NULL_PTR;
    10c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	9c 01       	movw	r18, r24
    10d0:	2f 5f       	subi	r18, 0xFF	; 255
    10d2:	3f 4f       	sbci	r19, 0xFF	; 255
    10d4:	ce 01       	movw	r24, r28
    10d6:	41 96       	adiw	r24, 0x11	; 17
    10d8:	fc 01       	movw	r30, r24
    10da:	e2 0f       	add	r30, r18
    10dc:	f3 1f       	adc	r31, r19
    10de:	10 82       	st	Z, r1

	/* Wait until MC2 is ready to receive the string */
	while(UART_recieveByte() != MC2_READY){}
    10e0:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
    10e4:	87 30       	cpi	r24, 0x07	; 7
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <GetPassword+0x16c>
	UART_sendString(Password);
    10e8:	ce 01       	movw	r24, r28
    10ea:	41 96       	adiw	r24, 0x11	; 17
    10ec:	0e 94 90 14 	call	0x2920	; 0x2920 <UART_sendString>
}
    10f0:	a1 96       	adiw	r28, 0x21	; 33
    10f2:	0f b6       	in	r0, 0x3f	; 63
    10f4:	f8 94       	cli
    10f6:	de bf       	out	0x3e, r29	; 62
    10f8:	0f be       	out	0x3f, r0	; 63
    10fa:	cd bf       	out	0x3d, r28	; 61
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <GetOptions>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void GetOptions (void)
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	0f 92       	push	r0
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(GetOptionsFn);	/* Inform MC2 of selected function */
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <UART_sendByte>

	uint8 key;
	LCD_clearScreen();
    1112:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+ : Open door");
    1116:	21 eb       	ldi	r18, 0xB1	; 177
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	60 e0       	ldi	r22, 0x00	; 0
    111e:	a9 01       	movw	r20, r18
    1120:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- : Change pass");
    1124:	2f eb       	ldi	r18, 0xBF	; 191
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	60 e0       	ldi	r22, 0x00	; 0
    112c:	a9 01       	movw	r20, r18
    112e:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
	do{
	key = KEYPAD_getPressedKey();
    1132:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <KEYPAD_getPressedKey>
    1136:	89 83       	std	Y+1, r24	; 0x01
	if((key == '+') || (key == '-'))
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	8b 32       	cpi	r24, 0x2B	; 43
    113c:	19 f0       	breq	.+6      	; 0x1144 <GetOptions+0x42>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	8d 32       	cpi	r24, 0x2D	; 45
    1142:	19 f4       	brne	.+6      	; 0x114a <GetOptions+0x48>
	{

		UART_sendByte(key);
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <UART_sendByte>
	}
	}while((key != '+') && (key != '-'));
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	8b 32       	cpi	r24, 0x2B	; 43
    114e:	19 f0       	breq	.+6      	; 0x1156 <GetOptions+0x54>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	8d 32       	cpi	r24, 0x2D	; 45
    1154:	71 f7       	brne	.-36     	; 0x1132 <GetOptions+0x30>
}
    1156:	0f 90       	pop	r0
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	08 95       	ret

0000115e <SetNewPassword>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void SetNewPassword (void)
{
    115e:	df 93       	push	r29
    1160:	cf 93       	push	r28
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	2f 97       	sbiw	r28, 0x0f	; 15
    1168:	0f b6       	in	r0, 0x3f	; 63
    116a:	f8 94       	cli
    116c:	de bf       	out	0x3e, r29	; 62
    116e:	0f be       	out	0x3f, r0	; 63
    1170:	cd bf       	out	0x3d, r28	; 61
	uint8 Decision;
	do{
		InformMC2(SetNewPasswordFn);
    1172:	89 e0       	ldi	r24, 0x09	; 9
    1174:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <InformMC2>
		ChangePassword();
    1178:	0e 94 1f 07 	call	0xe3e	; 0xe3e <ChangePassword>
		Decision = CheckDecision();
    117c:	0e 94 4d 09 	call	0x129a	; 0x129a <CheckDecision>
    1180:	8f 87       	std	Y+15, r24	; 0x0f
		if (!Decision){
    1182:	8f 85       	ldd	r24, Y+15	; 0x0f
    1184:	88 23       	and	r24, r24
    1186:	09 f0       	breq	.+2      	; 0x118a <SetNewPassword+0x2c>
    1188:	7b c0       	rjmp	.+246    	; 0x1280 <SetNewPassword+0x122>
			LCD_clearScreen();
    118a:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Error: mismatch");
    118e:	2f ec       	ldi	r18, 0xCF	; 207
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	60 e0       	ldi	r22, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	0e 94 9d 13 	call	0x273a	; 0x273a <LCD_displayStringRowColumn>
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	aa e7       	ldi	r26, 0x7A	; 122
    11a2:	b4 e4       	ldi	r27, 0x44	; 68
    11a4:	8b 87       	std	Y+11, r24	; 0x0b
    11a6:	9c 87       	std	Y+12, r25	; 0x0c
    11a8:	ad 87       	std	Y+13, r26	; 0x0d
    11aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	4a ef       	ldi	r20, 0xFA	; 250
    11ba:	54 e4       	ldi	r21, 0x44	; 68
    11bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	8f 83       	std	Y+7, r24	; 0x07
    11c6:	98 87       	std	Y+8, r25	; 0x08
    11c8:	a9 87       	std	Y+9, r26	; 0x09
    11ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11cc:	6f 81       	ldd	r22, Y+7	; 0x07
    11ce:	78 85       	ldd	r23, Y+8	; 0x08
    11d0:	89 85       	ldd	r24, Y+9	; 0x09
    11d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e8       	ldi	r20, 0x80	; 128
    11da:	5f e3       	ldi	r21, 0x3F	; 63
    11dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11e0:	88 23       	and	r24, r24
    11e2:	2c f4       	brge	.+10     	; 0x11ee <SetNewPassword+0x90>
		__ticks = 1;
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	3f c0       	rjmp	.+126    	; 0x126c <SetNewPassword+0x10e>
	else if (__tmp > 65535)
    11ee:	6f 81       	ldd	r22, Y+7	; 0x07
    11f0:	78 85       	ldd	r23, Y+8	; 0x08
    11f2:	89 85       	ldd	r24, Y+9	; 0x09
    11f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	3f ef       	ldi	r19, 0xFF	; 255
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	57 e4       	ldi	r21, 0x47	; 71
    11fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1202:	18 16       	cp	r1, r24
    1204:	4c f5       	brge	.+82     	; 0x1258 <SetNewPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1206:	6b 85       	ldd	r22, Y+11	; 0x0b
    1208:	7c 85       	ldd	r23, Y+12	; 0x0c
    120a:	8d 85       	ldd	r24, Y+13	; 0x0d
    120c:	9e 85       	ldd	r25, Y+14	; 0x0e
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	40 e2       	ldi	r20, 0x20	; 32
    1214:	51 e4       	ldi	r21, 0x41	; 65
    1216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121a:	dc 01       	movw	r26, r24
    121c:	cb 01       	movw	r24, r22
    121e:	bc 01       	movw	r22, r24
    1220:	cd 01       	movw	r24, r26
    1222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	9e 83       	std	Y+6, r25	; 0x06
    122c:	8d 83       	std	Y+5, r24	; 0x05
    122e:	0f c0       	rjmp	.+30     	; 0x124e <SetNewPassword+0xf0>
    1230:	88 ec       	ldi	r24, 0xC8	; 200
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <SetNewPassword+0xde>
    1240:	9c 83       	std	Y+4, r25	; 0x04
    1242:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1244:	8d 81       	ldd	r24, Y+5	; 0x05
    1246:	9e 81       	ldd	r25, Y+6	; 0x06
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	9e 83       	std	Y+6, r25	; 0x06
    124c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	00 97       	sbiw	r24, 0x00	; 0
    1254:	69 f7       	brne	.-38     	; 0x1230 <SetNewPassword+0xd2>
    1256:	14 c0       	rjmp	.+40     	; 0x1280 <SetNewPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1258:	6f 81       	ldd	r22, Y+7	; 0x07
    125a:	78 85       	ldd	r23, Y+8	; 0x08
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1264:	dc 01       	movw	r26, r24
    1266:	cb 01       	movw	r24, r22
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	9a 83       	std	Y+2, r25	; 0x02
    1272:	89 83       	std	Y+1, r24	; 0x01
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <SetNewPassword+0x11a>
    127c:	9a 83       	std	Y+2, r25	; 0x02
    127e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
		}
	}while(!Decision );
    1280:	8f 85       	ldd	r24, Y+15	; 0x0f
    1282:	88 23       	and	r24, r24
    1284:	09 f4       	brne	.+2      	; 0x1288 <SetNewPassword+0x12a>
    1286:	75 cf       	rjmp	.-278    	; 0x1172 <SetNewPassword+0x14>
}
    1288:	2f 96       	adiw	r28, 0x0f	; 15
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <CheckDecision>:
 * 		uint8 Decision: the returned decision value from MC2
 */


uint8 CheckDecision(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	uint8 Decision;
	Decision = UART_recieveByte();
    12a4:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
    12a8:	89 83       	std	Y+1, r24	; 0x01
	return Decision;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <InformMC2>:
/********************************************************************************************************/

void InformMC2(uint8 SelectedFn)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(SelectedFn);
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <UART_sendByte>
}
    12c6:	0f 90       	pop	r0
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <TickCounter>:
 * INPUTS:	N/A
 * OUTPUTS:	N/A
 */

void TickCounter(void)
{
    12ce:	df 93       	push	r29
    12d0:	cf 93       	push	r28
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    12d6:	80 91 ee 00 	lds	r24, 0x00EE
    12da:	8f 5f       	subi	r24, 0xFF	; 255
    12dc:	80 93 ee 00 	sts	0x00EE, r24
	if(g_tick == NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    12e0:	80 91 ee 00 	lds	r24, 0x00EE
    12e4:	8f 31       	cpi	r24, 0x1F	; 31
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <TickCounter+0x24>
	{
		g_FinshedCounting=1;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 ef 00 	sts	0x00EF, r24
		g_tick = 0; //clear the tick counter again to count a new second
    12ee:	10 92 ee 00 	sts	0x00EE, r1
	}
}
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <CountByTimer0>:
 * INPUTS:
 * 		uint8 Seconds: Number of desired seconds to delay
 * OUTPUTS:	N/A
 */
void CountByTimer0(uint8 Seconds)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <CountByTimer0+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <CountByTimer0+0x8>
    1300:	00 d0       	rcall	.+0      	; 0x1302 <CountByTimer0+0xa>
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8e 83       	std	Y+6, r24	; 0x06
	Timer0_DeInit();
    1308:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Timer0_DeInit>
	Timer0_ConfigType Timer0_Structure={COMPARE,F_CPU_1024,0,250};
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	85 e0       	ldi	r24, 0x05	; 5
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	1c 82       	std	Y+4, r1	; 0x04
    1316:	8a ef       	ldi	r24, 0xFA	; 250
    1318:	8d 83       	std	Y+5, r24	; 0x05
	Timer0_Init(&Timer0_Structure);
    131a:	ce 01       	movw	r24, r28
    131c:	02 96       	adiw	r24, 0x02	; 2
    131e:	0e 94 15 0a 	call	0x142a	; 0x142a <Timer0_Init>
	Timer0_setCallBack(TickCounter);
    1322:	87 e6       	ldi	r24, 0x67	; 103
    1324:	99 e0       	ldi	r25, 0x09	; 9
    1326:	0e 94 bf 0a 	call	0x157e	; 0x157e <Timer0_setCallBack>
	uint8 SecondsCounter=0;
    132a:	19 82       	std	Y+1, r1	; 0x01
	while(1)
    {

		if(g_FinshedCounting==1){
    132c:	80 91 ef 00 	lds	r24, 0x00EF
    1330:	81 30       	cpi	r24, 0x01	; 1
    1332:	29 f4       	brne	.+10     	; 0x133e <CountByTimer0+0x46>
			SecondsCounter++;
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	89 83       	std	Y+1, r24	; 0x01
			g_FinshedCounting=0;
    133a:	10 92 ef 00 	sts	0x00EF, r1
		}

		if(SecondsCounter==Seconds){
    133e:	99 81       	ldd	r25, Y+1	; 0x01
    1340:	8e 81       	ldd	r24, Y+6	; 0x06
    1342:	98 17       	cp	r25, r24
    1344:	99 f7       	brne	.-26     	; 0x132c <CountByTimer0+0x34>
			SecondsCounter=0;
    1346:	19 82       	std	Y+1, r1	; 0x01
			Timer0_DeInit();
    1348:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <Timer0_DeInit>
			return;
		}
    }
}
    134c:	26 96       	adiw	r28, 0x06	; 6
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	de bf       	out	0x3e, r29	; 62
    1354:	0f be       	out	0x3f, r0	; 63
    1356:	cd bf       	out	0x3d, r28	; 61
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	2f 93       	push	r18
    136a:	3f 93       	push	r19
    136c:	4f 93       	push	r20
    136e:	5f 93       	push	r21
    1370:	6f 93       	push	r22
    1372:	7f 93       	push	r23
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	ef 93       	push	r30
    137e:	ff 93       	push	r31
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1388:	80 91 f0 00 	lds	r24, 0x00F0
    138c:	90 91 f1 00 	lds	r25, 0x00F1
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	29 f0       	breq	.+10     	; 0x139e <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1394:	e0 91 f0 00 	lds	r30, 0x00F0
    1398:	f0 91 f1 00 	lds	r31, 0x00F1
    139c:	09 95       	icall
		}
}
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	2f 93       	push	r18
    13d0:	3f 93       	push	r19
    13d2:	4f 93       	push	r20
    13d4:	5f 93       	push	r21
    13d6:	6f 93       	push	r22
    13d8:	7f 93       	push	r23
    13da:	8f 93       	push	r24
    13dc:	9f 93       	push	r25
    13de:	af 93       	push	r26
    13e0:	bf 93       	push	r27
    13e2:	ef 93       	push	r30
    13e4:	ff 93       	push	r31
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    13ee:	80 91 f0 00 	lds	r24, 0x00F0
    13f2:	90 91 f1 00 	lds	r25, 0x00F1
    13f6:	00 97       	sbiw	r24, 0x00	; 0
    13f8:	29 f0       	breq	.+10     	; 0x1404 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13fa:	e0 91 f0 00 	lds	r30, 0x00F0
    13fe:	f0 91 f1 00 	lds	r31, 0x00F1
    1402:	09 95       	icall
	}
}
    1404:	cf 91       	pop	r28
    1406:	df 91       	pop	r29
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	7f 91       	pop	r23
    1416:	6f 91       	pop	r22
    1418:	5f 91       	pop	r21
    141a:	4f 91       	pop	r20
    141c:	3f 91       	pop	r19
    141e:	2f 91       	pop	r18
    1420:	0f 90       	pop	r0
    1422:	0f be       	out	0x3f, r0	; 63
    1424:	0f 90       	pop	r0
    1426:	1f 90       	pop	r1
    1428:	18 95       	reti

0000142a <Timer0_Init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void Timer0_Init(const Timer0_ConfigType * Config_Ptr)
{
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <Timer0_Init+0xa>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <Timer0_Init+0xc>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->Timer0_OpMode){
    143e:	e9 81       	ldd	r30, Y+1	; 0x01
    1440:	fa 81       	ldd	r31, Y+2	; 0x02
    1442:	80 81       	ld	r24, Z
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3c 83       	std	Y+4, r19	; 0x04
    144a:	2b 83       	std	Y+3, r18	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	91 05       	cpc	r25, r1
    1454:	71 f1       	breq	.+92     	; 0x14b2 <Timer0_Init+0x88>
    1456:	eb 81       	ldd	r30, Y+3	; 0x03
    1458:	fc 81       	ldd	r31, Y+4	; 0x04
    145a:	e2 30       	cpi	r30, 0x02	; 2
    145c:	f1 05       	cpc	r31, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <Timer0_Init+0x38>
    1460:	50 c0       	rjmp	.+160    	; 0x1502 <Timer0_Init+0xd8>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	09 f0       	breq	.+2      	; 0x146e <Timer0_Init+0x44>
    146c:	7f c0       	rjmp	.+254    	; 0x156c <Timer0_Init+0x142>

		case OVERFLOW:

			SREG  |= (1<<7);           // Enable global interrupts in MC.
    146e:	af e5       	ldi	r26, 0x5F	; 95
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ef e5       	ldi	r30, 0x5F	; 95
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 68       	ori	r24, 0x80	; 128
    147a:	8c 93       	st	X, r24

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    147c:	a2 e5       	ldi	r26, 0x52	; 82
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	82 81       	ldd	r24, Z+2	; 0x02
    1486:	8c 93       	st	X, r24

			TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    1488:	a9 e5       	ldi	r26, 0x59	; 89
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e9 e5       	ldi	r30, 0x59	; 89
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	81 60       	ori	r24, 0x01	; 1
    1494:	8c 93       	st	X, r24

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    1496:	a3 e5       	ldi	r26, 0x53	; 83
    1498:	b0 e0       	ldi	r27, 0x00	; 0
    149a:	e9 81       	ldd	r30, Y+1	; 0x01
    149c:	fa 81       	ldd	r31, Y+2	; 0x02
    149e:	81 81       	ldd	r24, Z+1	; 0x01
    14a0:	8c 93       	st	X, r24
			/* Configure the timer control register
			* 1. Non PWM mode FOC0=1
			* 2. Normal Mode WGM01=0 & WGM00=0
			* 3. Normal Mode COM00=0 & COM01=0
			*/
			TCCR0 |= (1<<FOC0);
    14a2:	a3 e5       	ldi	r26, 0x53	; 83
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e3 e5       	ldi	r30, 0x53	; 83
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	80 68       	ori	r24, 0x80	; 128
    14ae:	8c 93       	st	X, r24
    14b0:	5d c0       	rjmp	.+186    	; 0x156c <Timer0_Init+0x142>
			break;

		case COMPARE:

			SREG  |= (1<<7);           // Enable global interrupts in MC.
    14b2:	af e5       	ldi	r26, 0x5F	; 95
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 68       	ori	r24, 0x80	; 128
    14be:	8c 93       	st	X, r24

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    14c0:	a2 e5       	ldi	r26, 0x52	; 82
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e9 81       	ldd	r30, Y+1	; 0x01
    14c6:	fa 81       	ldd	r31, Y+2	; 0x02
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	8c 93       	st	X, r24

			OCR0  = Config_Ptr->Timer0_CompareValue; // Set Compare Value
    14cc:	ac e5       	ldi	r26, 0x5C	; 92
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	83 81       	ldd	r24, Z+3	; 0x03
    14d6:	8c 93       	st	X, r24

			TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    14d8:	a9 e5       	ldi	r26, 0x59	; 89
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e9 e5       	ldi	r30, 0x59	; 89
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	82 60       	ori	r24, 0x02	; 2
    14e4:	8c 93       	st	X, r24

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    14e6:	a3 e5       	ldi	r26, 0x53	; 83
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e9 81       	ldd	r30, Y+1	; 0x01
    14ec:	fa 81       	ldd	r31, Y+2	; 0x02
    14ee:	81 81       	ldd	r24, Z+1	; 0x01
    14f0:	8c 93       	st	X, r24

			/* Configure timer control register
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 */
			TCCR0 |= (1<<FOC0) | (1<<WGM01);
    14f2:	a3 e5       	ldi	r26, 0x53	; 83
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	e3 e5       	ldi	r30, 0x53	; 83
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 68       	ori	r24, 0x88	; 136
    14fe:	8c 93       	st	X, r24
    1500:	35 c0       	rjmp	.+106    	; 0x156c <Timer0_Init+0x142>
			break;

		/* Initialize the PWM mode of ATmega16 timer 0 on output pin OC0(PB3). */
		case PWM:

			TCNT0 = Config_Ptr->Timer0_InitialValue; //Set Timer Initial value
    1502:	a2 e5       	ldi	r26, 0x52	; 82
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e9 81       	ldd	r30, Y+1	; 0x01
    1508:	fa 81       	ldd	r31, Y+2	; 0x02
    150a:	82 81       	ldd	r24, Z+2	; 0x02
    150c:	8c 93       	st	X, r24

			OCR0  = (uint8)(Config_Ptr->Timer0_CompareValue*255/100); // Set Compare Value
    150e:	0c e5       	ldi	r16, 0x5C	; 92
    1510:	10 e0       	ldi	r17, 0x00	; 0
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	83 81       	ldd	r24, Z+3	; 0x03
    1518:	48 2f       	mov	r20, r24
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	ca 01       	movw	r24, r20
    151e:	9c 01       	movw	r18, r24
    1520:	22 0f       	add	r18, r18
    1522:	33 1f       	adc	r19, r19
    1524:	c9 01       	movw	r24, r18
    1526:	96 95       	lsr	r25
    1528:	98 2f       	mov	r25, r24
    152a:	88 27       	eor	r24, r24
    152c:	97 95       	ror	r25
    152e:	87 95       	ror	r24
    1530:	82 1b       	sub	r24, r18
    1532:	93 0b       	sbc	r25, r19
    1534:	84 0f       	add	r24, r20
    1536:	95 1f       	adc	r25, r21
    1538:	24 e6       	ldi	r18, 0x64	; 100
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <__divmodhi4>
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	80 83       	st	Z, r24

			GPIO_setupPinDirection( PORTB_ID, PIN3_ID, PIN_OUTPUT); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	63 e0       	ldi	r22, 0x03	; 3
    154c:	41 e0       	ldi	r20, 0x01	; 1
    154e:	0e 94 ef 0a 	call	0x15de	; 0x15de <GPIO_setupPinDirection>

			/* Configure the timer control register
			 * CS00 CS01 CS02 bits according to clock value
			 */
			TCCR0 = Config_Ptr->Timer0prescaler;
    1552:	a3 e5       	ldi	r26, 0x53	; 83
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e9 81       	ldd	r30, Y+1	; 0x01
    1558:	fa 81       	ldd	r31, Y+2	; 0x02
    155a:	81 81       	ldd	r24, Z+1	; 0x01
    155c:	8c 93       	st	X, r24
			/* Configure timer control register
			 * 1. Fast PWM mode FOC0=0
			 * 2. Fast PWM Mode WGM01=1 & WGM00=1
			 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
			 */
			TCCR0 |= (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    155e:	a3 e5       	ldi	r26, 0x53	; 83
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e3 e5       	ldi	r30, 0x53	; 83
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	88 66       	ori	r24, 0x68	; 104
    156a:	8c 93       	st	X, r24
			break;
	}


}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	1f 91       	pop	r17
    157a:	0f 91       	pop	r16
    157c:	08 95       	ret

0000157e <Timer0_setCallBack>:


void Timer0_setCallBack(void(*a_ptr)(void))
{
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <Timer0_setCallBack+0x6>
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	90 93 f1 00 	sts	0x00F1, r25
    1594:	80 93 f0 00 	sts	0x00F0, r24
}
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <Timer0_DeInit>:

void Timer0_DeInit(void)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCCR0 = 0;
    15aa:	e3 e5       	ldi	r30, 0x53	; 83
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	10 82       	st	Z, r1
	TCNT0 = 0;
    15b0:	e2 e5       	ldi	r30, 0x52	; 82
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	10 82       	st	Z, r1
	OCR0  = 0;
    15b6:	ec e5       	ldi	r30, 0x5C	; 92
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	10 82       	st	Z, r1

	/* Disable the overflow and compare interrupts */
	TIMSK &= ~(1<<TOIE0);
    15bc:	a9 e5       	ldi	r26, 0x59	; 89
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e9 e5       	ldi	r30, 0x59	; 89
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8e 7f       	andi	r24, 0xFE	; 254
    15c8:	8c 93       	st	X, r24
	TIMSK &= ~(1<<OCIE0);
    15ca:	a9 e5       	ldi	r26, 0x59	; 89
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e9 e5       	ldi	r30, 0x59	; 89
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	8d 7f       	andi	r24, 0xFD	; 253
    15d6:	8c 93       	st	X, r24
}
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <GPIO_setupPinDirection+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_setupPinDirection+0x8>
    15e6:	0f 92       	push	r0
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	6a 83       	std	Y+2, r22	; 0x02
    15f0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	88 30       	cpi	r24, 0x08	; 8
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <GPIO_setupPinDirection+0x1c>
    15f8:	d5 c0       	rjmp	.+426    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
    15fc:	84 30       	cpi	r24, 0x04	; 4
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <GPIO_setupPinDirection+0x24>
    1600:	d1 c0       	rjmp	.+418    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3d 83       	std	Y+5, r19	; 0x05
    160a:	2c 83       	std	Y+4, r18	; 0x04
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	81 30       	cpi	r24, 0x01	; 1
    1612:	91 05       	cpc	r25, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <GPIO_setupPinDirection+0x3a>
    1616:	43 c0       	rjmp	.+134    	; 0x169e <GPIO_setupPinDirection+0xc0>
    1618:	2c 81       	ldd	r18, Y+4	; 0x04
    161a:	3d 81       	ldd	r19, Y+5	; 0x05
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <GPIO_setupPinDirection+0x4e>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	71 f0       	breq	.+28     	; 0x1646 <GPIO_setupPinDirection+0x68>
    162a:	bc c0       	rjmp	.+376    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
    162c:	2c 81       	ldd	r18, Y+4	; 0x04
    162e:	3d 81       	ldd	r19, Y+5	; 0x05
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	09 f4       	brne	.+2      	; 0x1638 <GPIO_setupPinDirection+0x5a>
    1636:	5f c0       	rjmp	.+190    	; 0x16f6 <GPIO_setupPinDirection+0x118>
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	9d 81       	ldd	r25, Y+5	; 0x05
    163c:	83 30       	cpi	r24, 0x03	; 3
    163e:	91 05       	cpc	r25, r1
    1640:	09 f4       	brne	.+2      	; 0x1644 <GPIO_setupPinDirection+0x66>
    1642:	85 c0       	rjmp	.+266    	; 0x174e <GPIO_setupPinDirection+0x170>
    1644:	af c0       	rjmp	.+350    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	a1 f4       	brne	.+40     	; 0x1674 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    164c:	aa e3       	ldi	r26, 0x3A	; 58
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ea e3       	ldi	r30, 0x3A	; 58
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	48 2f       	mov	r20, r24
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <GPIO_setupPinDirection+0x8c>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <GPIO_setupPinDirection+0x88>
    166e:	84 2b       	or	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	98 c0       	rjmp	.+304    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1674:	aa e3       	ldi	r26, 0x3A	; 58
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	ea e3       	ldi	r30, 0x3A	; 58
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	48 2f       	mov	r20, r24
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	02 2e       	mov	r0, r18
    168c:	02 c0       	rjmp	.+4      	; 0x1692 <GPIO_setupPinDirection+0xb4>
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	0a 94       	dec	r0
    1694:	e2 f7       	brpl	.-8      	; 0x168e <GPIO_setupPinDirection+0xb0>
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	8c 93       	st	X, r24
    169c:	83 c0       	rjmp	.+262    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    169e:	8b 81       	ldd	r24, Y+3	; 0x03
    16a0:	81 30       	cpi	r24, 0x01	; 1
    16a2:	a1 f4       	brne	.+40     	; 0x16cc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16a4:	a7 e3       	ldi	r26, 0x37	; 55
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e7 e3       	ldi	r30, 0x37	; 55
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	48 2f       	mov	r20, r24
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <GPIO_setupPinDirection+0xe4>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <GPIO_setupPinDirection+0xe0>
    16c6:	84 2b       	or	r24, r20
    16c8:	8c 93       	st	X, r24
    16ca:	6c c0       	rjmp	.+216    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16cc:	a7 e3       	ldi	r26, 0x37	; 55
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e7 e3       	ldi	r30, 0x37	; 55
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	48 2f       	mov	r20, r24
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	02 2e       	mov	r0, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_setupPinDirection+0x10c>
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	0a 94       	dec	r0
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_setupPinDirection+0x108>
    16ee:	80 95       	com	r24
    16f0:	84 23       	and	r24, r20
    16f2:	8c 93       	st	X, r24
    16f4:	57 c0       	rjmp	.+174    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	81 30       	cpi	r24, 0x01	; 1
    16fa:	a1 f4       	brne	.+40     	; 0x1724 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16fc:	a4 e3       	ldi	r26, 0x34	; 52
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e4 e3       	ldi	r30, 0x34	; 52
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_setupPinDirection+0x13c>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_setupPinDirection+0x138>
    171e:	84 2b       	or	r24, r20
    1720:	8c 93       	st	X, r24
    1722:	40 c0       	rjmp	.+128    	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1724:	a4 e3       	ldi	r26, 0x34	; 52
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e4 e3       	ldi	r30, 0x34	; 52
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	48 2f       	mov	r20, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 2e       	mov	r0, r18
    173c:	02 c0       	rjmp	.+4      	; 0x1742 <GPIO_setupPinDirection+0x164>
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	0a 94       	dec	r0
    1744:	e2 f7       	brpl	.-8      	; 0x173e <GPIO_setupPinDirection+0x160>
    1746:	80 95       	com	r24
    1748:	84 23       	and	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	2b c0       	rjmp	.+86     	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	81 30       	cpi	r24, 0x01	; 1
    1752:	a1 f4       	brne	.+40     	; 0x177c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1754:	a1 e3       	ldi	r26, 0x31	; 49
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e1 e3       	ldi	r30, 0x31	; 49
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_setupPinDirection+0x194>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_setupPinDirection+0x190>
    1776:	84 2b       	or	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    177c:	a1 e3       	ldi	r26, 0x31	; 49
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e1 e3       	ldi	r30, 0x31	; 49
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	48 2f       	mov	r20, r24
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 2e       	mov	r0, r18
    1794:	02 c0       	rjmp	.+4      	; 0x179a <GPIO_setupPinDirection+0x1bc>
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	0a 94       	dec	r0
    179c:	e2 f7       	brpl	.-8      	; 0x1796 <GPIO_setupPinDirection+0x1b8>
    179e:	80 95       	com	r24
    17a0:	84 23       	and	r24, r20
    17a2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17a4:	0f 90       	pop	r0
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	08 95       	ret

000017b4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <GPIO_writePin+0x6>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <GPIO_writePin+0x8>
    17bc:	0f 92       	push	r0
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
    17c6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	88 30       	cpi	r24, 0x08	; 8
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <GPIO_writePin+0x1c>
    17ce:	d5 c0       	rjmp	.+426    	; 0x197a <GPIO_writePin+0x1c6>
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	84 30       	cpi	r24, 0x04	; 4
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <GPIO_writePin+0x24>
    17d6:	d1 c0       	rjmp	.+418    	; 0x197a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3d 83       	std	Y+5, r19	; 0x05
    17e0:	2c 83       	std	Y+4, r18	; 0x04
    17e2:	8c 81       	ldd	r24, Y+4	; 0x04
    17e4:	9d 81       	ldd	r25, Y+5	; 0x05
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <GPIO_writePin+0x3a>
    17ec:	43 c0       	rjmp	.+134    	; 0x1874 <GPIO_writePin+0xc0>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	2c f4       	brge	.+10     	; 0x1802 <GPIO_writePin+0x4e>
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	71 f0       	breq	.+28     	; 0x181c <GPIO_writePin+0x68>
    1800:	bc c0       	rjmp	.+376    	; 0x197a <GPIO_writePin+0x1c6>
    1802:	2c 81       	ldd	r18, Y+4	; 0x04
    1804:	3d 81       	ldd	r19, Y+5	; 0x05
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <GPIO_writePin+0x5a>
    180c:	5f c0       	rjmp	.+190    	; 0x18cc <GPIO_writePin+0x118>
    180e:	8c 81       	ldd	r24, Y+4	; 0x04
    1810:	9d 81       	ldd	r25, Y+5	; 0x05
    1812:	83 30       	cpi	r24, 0x03	; 3
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <GPIO_writePin+0x66>
    1818:	85 c0       	rjmp	.+266    	; 0x1924 <GPIO_writePin+0x170>
    181a:	af c0       	rjmp	.+350    	; 0x197a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1822:	ab e3       	ldi	r26, 0x3B	; 59
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	eb e3       	ldi	r30, 0x3B	; 59
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_writePin+0x8c>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_writePin+0x88>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	98 c0       	rjmp	.+304    	; 0x197a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    184a:	ab e3       	ldi	r26, 0x3B	; 59
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e3       	ldi	r30, 0x3B	; 59
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_writePin+0xb4>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_writePin+0xb0>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	83 c0       	rjmp	.+262    	; 0x197a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    187a:	a8 e3       	ldi	r26, 0x38	; 56
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e8 e3       	ldi	r30, 0x38	; 56
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_writePin+0xe4>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_writePin+0xe0>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	6c c0       	rjmp	.+216    	; 0x197a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18a2:	a8 e3       	ldi	r26, 0x38	; 56
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e8 e3       	ldi	r30, 0x38	; 56
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_writePin+0x10c>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_writePin+0x108>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	57 c0       	rjmp	.+174    	; 0x197a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18d2:	a5 e3       	ldi	r26, 0x35	; 53
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e5 e3       	ldi	r30, 0x35	; 53
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_writePin+0x13c>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_writePin+0x138>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	40 c0       	rjmp	.+128    	; 0x197a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18fa:	a5 e3       	ldi	r26, 0x35	; 53
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_writePin+0x164>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_writePin+0x160>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
    1922:	2b c0       	rjmp	.+86     	; 0x197a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	a1 f4       	brne	.+40     	; 0x1952 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    192a:	a2 e3       	ldi	r26, 0x32	; 50
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	e2 e3       	ldi	r30, 0x32	; 50
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	48 2f       	mov	r20, r24
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	02 2e       	mov	r0, r18
    1942:	02 c0       	rjmp	.+4      	; 0x1948 <GPIO_writePin+0x194>
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	0a 94       	dec	r0
    194a:	e2 f7       	brpl	.-8      	; 0x1944 <GPIO_writePin+0x190>
    194c:	84 2b       	or	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	14 c0       	rjmp	.+40     	; 0x197a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1952:	a2 e3       	ldi	r26, 0x32	; 50
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e2 e3       	ldi	r30, 0x32	; 50
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <GPIO_writePin+0x1bc>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <GPIO_writePin+0x1b8>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	cf 91       	pop	r28
    1986:	df 91       	pop	r29
    1988:	08 95       	ret

0000198a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	00 d0       	rcall	.+0      	; 0x1990 <GPIO_readPin+0x6>
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_readPin+0x8>
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	8a 83       	std	Y+2, r24	; 0x02
    199a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    199c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	88 30       	cpi	r24, 0x08	; 8
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <GPIO_readPin+0x1c>
    19a4:	84 c0       	rjmp	.+264    	; 0x1aae <GPIO_readPin+0x124>
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	84 30       	cpi	r24, 0x04	; 4
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <GPIO_readPin+0x24>
    19ac:	80 c0       	rjmp	.+256    	; 0x1aae <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	3d 83       	std	Y+5, r19	; 0x05
    19b6:	2c 83       	std	Y+4, r18	; 0x04
    19b8:	4c 81       	ldd	r20, Y+4	; 0x04
    19ba:	5d 81       	ldd	r21, Y+5	; 0x05
    19bc:	41 30       	cpi	r20, 0x01	; 1
    19be:	51 05       	cpc	r21, r1
    19c0:	79 f1       	breq	.+94     	; 0x1a20 <GPIO_readPin+0x96>
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	82 30       	cpi	r24, 0x02	; 2
    19c8:	91 05       	cpc	r25, r1
    19ca:	34 f4       	brge	.+12     	; 0x19d8 <GPIO_readPin+0x4e>
    19cc:	2c 81       	ldd	r18, Y+4	; 0x04
    19ce:	3d 81       	ldd	r19, Y+5	; 0x05
    19d0:	21 15       	cp	r18, r1
    19d2:	31 05       	cpc	r19, r1
    19d4:	69 f0       	breq	.+26     	; 0x19f0 <GPIO_readPin+0x66>
    19d6:	6b c0       	rjmp	.+214    	; 0x1aae <GPIO_readPin+0x124>
    19d8:	4c 81       	ldd	r20, Y+4	; 0x04
    19da:	5d 81       	ldd	r21, Y+5	; 0x05
    19dc:	42 30       	cpi	r20, 0x02	; 2
    19de:	51 05       	cpc	r21, r1
    19e0:	b9 f1       	breq	.+110    	; 0x1a50 <GPIO_readPin+0xc6>
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	83 30       	cpi	r24, 0x03	; 3
    19e8:	91 05       	cpc	r25, r1
    19ea:	09 f4       	brne	.+2      	; 0x19ee <GPIO_readPin+0x64>
    19ec:	49 c0       	rjmp	.+146    	; 0x1a80 <GPIO_readPin+0xf6>
    19ee:	5f c0       	rjmp	.+190    	; 0x1aae <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19f0:	e9 e3       	ldi	r30, 0x39	; 57
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	8b 81       	ldd	r24, Y+3	; 0x03
    19fc:	88 2f       	mov	r24, r24
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a9 01       	movw	r20, r18
    1a02:	02 c0       	rjmp	.+4      	; 0x1a08 <GPIO_readPin+0x7e>
    1a04:	55 95       	asr	r21
    1a06:	47 95       	ror	r20
    1a08:	8a 95       	dec	r24
    1a0a:	e2 f7       	brpl	.-8      	; 0x1a04 <GPIO_readPin+0x7a>
    1a0c:	ca 01       	movw	r24, r20
    1a0e:	81 70       	andi	r24, 0x01	; 1
    1a10:	90 70       	andi	r25, 0x00	; 0
    1a12:	88 23       	and	r24, r24
    1a14:	19 f0       	breq	.+6      	; 0x1a1c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	49 c0       	rjmp	.+146    	; 0x1aae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	47 c0       	rjmp	.+142    	; 0x1aae <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a20:	e6 e3       	ldi	r30, 0x36	; 54
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <GPIO_readPin+0xae>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <GPIO_readPin+0xaa>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	88 23       	and	r24, r24
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	31 c0       	rjmp	.+98     	; 0x1aae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	2f c0       	rjmp	.+94     	; 0x1aae <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a50:	e3 e3       	ldi	r30, 0x33	; 51
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	88 2f       	mov	r24, r24
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a9 01       	movw	r20, r18
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <GPIO_readPin+0xde>
    1a64:	55 95       	asr	r21
    1a66:	47 95       	ror	r20
    1a68:	8a 95       	dec	r24
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <GPIO_readPin+0xda>
    1a6c:	ca 01       	movw	r24, r20
    1a6e:	81 70       	andi	r24, 0x01	; 1
    1a70:	90 70       	andi	r25, 0x00	; 0
    1a72:	88 23       	and	r24, r24
    1a74:	19 f0       	breq	.+6      	; 0x1a7c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	89 83       	std	Y+1, r24	; 0x01
    1a7a:	19 c0       	rjmp	.+50     	; 0x1aae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
    1a7e:	17 c0       	rjmp	.+46     	; 0x1aae <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a80:	e0 e3       	ldi	r30, 0x30	; 48
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	88 2f       	mov	r24, r24
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a9 01       	movw	r20, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <GPIO_readPin+0x10e>
    1a94:	55 95       	asr	r21
    1a96:	47 95       	ror	r20
    1a98:	8a 95       	dec	r24
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <GPIO_readPin+0x10a>
    1a9c:	ca 01       	movw	r24, r20
    1a9e:	81 70       	andi	r24, 0x01	; 1
    1aa0:	90 70       	andi	r25, 0x00	; 0
    1aa2:	88 23       	and	r24, r24
    1aa4:	19 f0       	breq	.+6      	; 0x1aac <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	01 c0       	rjmp	.+2      	; 0x1aae <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aac:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <GPIO_setupPortDirection+0x6>
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <GPIO_setupPortDirection+0x8>
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	84 30       	cpi	r24, 0x04	; 4
    1ad4:	90 f5       	brcc	.+100    	; 0x1b3a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	28 2f       	mov	r18, r24
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	3c 83       	std	Y+4, r19	; 0x04
    1ade:	2b 83       	std	Y+3, r18	; 0x03
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae4:	81 30       	cpi	r24, 0x01	; 1
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	d1 f0       	breq	.+52     	; 0x1b1e <GPIO_setupPortDirection+0x5e>
    1aea:	2b 81       	ldd	r18, Y+3	; 0x03
    1aec:	3c 81       	ldd	r19, Y+4	; 0x04
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	2c f4       	brge	.+10     	; 0x1afe <GPIO_setupPortDirection+0x3e>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	9c 81       	ldd	r25, Y+4	; 0x04
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	61 f0       	breq	.+24     	; 0x1b14 <GPIO_setupPortDirection+0x54>
    1afc:	1e c0       	rjmp	.+60     	; 0x1b3a <GPIO_setupPortDirection+0x7a>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	22 30       	cpi	r18, 0x02	; 2
    1b04:	31 05       	cpc	r19, r1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <GPIO_setupPortDirection+0x68>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	91 05       	cpc	r25, r1
    1b10:	81 f0       	breq	.+32     	; 0x1b32 <GPIO_setupPortDirection+0x72>
    1b12:	13 c0       	rjmp	.+38     	; 0x1b3a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b14:	ea e3       	ldi	r30, 0x3A	; 58
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1a:	80 83       	st	Z, r24
    1b1c:	0e c0       	rjmp	.+28     	; 0x1b3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b1e:	e7 e3       	ldi	r30, 0x37	; 55
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	80 83       	st	Z, r24
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b28:	e4 e3       	ldi	r30, 0x34	; 52
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	80 83       	st	Z, r24
    1b30:	04 c0       	rjmp	.+8      	; 0x1b3a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b32:	e1 e3       	ldi	r30, 0x31	; 49
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <GPIO_writePort+0x6>
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_writePort+0x8>
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b58:	89 81       	ldd	r24, Y+1	; 0x01
    1b5a:	84 30       	cpi	r24, 0x04	; 4
    1b5c:	90 f5       	brcc	.+100    	; 0x1bc2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	28 2f       	mov	r18, r24
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	3c 83       	std	Y+4, r19	; 0x04
    1b66:	2b 83       	std	Y+3, r18	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	d1 f0       	breq	.+52     	; 0x1ba6 <GPIO_writePort+0x5e>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	22 30       	cpi	r18, 0x02	; 2
    1b78:	31 05       	cpc	r19, r1
    1b7a:	2c f4       	brge	.+10     	; 0x1b86 <GPIO_writePort+0x3e>
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <GPIO_writePort+0x54>
    1b84:	1e c0       	rjmp	.+60     	; 0x1bc2 <GPIO_writePort+0x7a>
    1b86:	2b 81       	ldd	r18, Y+3	; 0x03
    1b88:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8a:	22 30       	cpi	r18, 0x02	; 2
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	81 f0       	breq	.+32     	; 0x1bb0 <GPIO_writePort+0x68>
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	9c 81       	ldd	r25, Y+4	; 0x04
    1b94:	83 30       	cpi	r24, 0x03	; 3
    1b96:	91 05       	cpc	r25, r1
    1b98:	81 f0       	breq	.+32     	; 0x1bba <GPIO_writePort+0x72>
    1b9a:	13 c0       	rjmp	.+38     	; 0x1bc2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b9c:	eb e3       	ldi	r30, 0x3B	; 59
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	80 83       	st	Z, r24
    1ba4:	0e c0       	rjmp	.+28     	; 0x1bc2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ba6:	e8 e3       	ldi	r30, 0x38	; 56
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
    1bae:	09 c0       	rjmp	.+18     	; 0x1bc2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bb0:	e5 e3       	ldi	r30, 0x35	; 53
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	80 83       	st	Z, r24
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bba:	e2 e3       	ldi	r30, 0x32	; 50
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <GPIO_readPort+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_readPort+0x8>
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bde:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	90 f5       	brcc	.+100    	; 0x1c4a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	3c 83       	std	Y+4, r19	; 0x04
    1bee:	2b 83       	std	Y+3, r18	; 0x03
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	d1 f0       	breq	.+52     	; 0x1c2e <GPIO_readPort+0x5e>
    1bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bfe:	22 30       	cpi	r18, 0x02	; 2
    1c00:	31 05       	cpc	r19, r1
    1c02:	2c f4       	brge	.+10     	; 0x1c0e <GPIO_readPort+0x3e>
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	9c 81       	ldd	r25, Y+4	; 0x04
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	61 f0       	breq	.+24     	; 0x1c24 <GPIO_readPort+0x54>
    1c0c:	1e c0       	rjmp	.+60     	; 0x1c4a <GPIO_readPort+0x7a>
    1c0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c10:	3c 81       	ldd	r19, Y+4	; 0x04
    1c12:	22 30       	cpi	r18, 0x02	; 2
    1c14:	31 05       	cpc	r19, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_readPort+0x68>
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	91 05       	cpc	r25, r1
    1c20:	81 f0       	breq	.+32     	; 0x1c42 <GPIO_readPort+0x72>
    1c22:	13 c0       	rjmp	.+38     	; 0x1c4a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c24:	e9 e3       	ldi	r30, 0x39	; 57
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	0e c0       	rjmp	.+28     	; 0x1c4a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c2e:	e6 e3       	ldi	r30, 0x36	; 54
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	89 83       	std	Y+1, r24	; 0x01
    1c36:	09 c0       	rjmp	.+18     	; 0x1c4a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c38:	e3 e3       	ldi	r30, 0x33	; 51
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c42:	e0 e3       	ldi	r30, 0x30	; 48
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	80 81       	ld	r24, Z
    1c48:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <KEYPAD_getPressedKey+0x6>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1c66:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c68:	1b 82       	std	Y+3, r1	; 0x03
    1c6a:	43 c0       	rjmp	.+134    	; 0x1cf2 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	98 2f       	mov	r25, r24
    1c78:	9c 5f       	subi	r25, 0xFC	; 252
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	69 2f       	mov	r22, r25
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 ef 0a 	call	0x15de	; 0x15de <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c84:	8b 81       	ldd	r24, Y+3	; 0x03
    1c86:	88 2f       	mov	r24, r24
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	9c 01       	movw	r18, r24
    1c8c:	2c 5f       	subi	r18, 0xFC	; 252
    1c8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <KEYPAD_getPressedKey+0x40>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	2a 95       	dec	r18
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <KEYPAD_getPressedKey+0x3c>
    1c9e:	80 95       	com	r24
    1ca0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	69 81       	ldd	r22, Y+1	; 0x01
    1ca6:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	1c c0       	rjmp	.+56     	; 0x1ce6 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	6a 81       	ldd	r22, Y+2	; 0x02
    1cb2:	0e 94 c5 0c 	call	0x198a	; 0x198a <GPIO_readPin>
    1cb6:	88 23       	and	r24, r24
    1cb8:	99 f4       	brne	.+38     	; 0x1ce0 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	98 2f       	mov	r25, r24
    1cca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ccc:	89 0f       	add	r24, r25
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	8a 83       	std	Y+2, r24	; 0x02
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	08 f3       	brcs	.-62     	; 0x1cae <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	8f 5f       	subi	r24, 0xFF	; 255
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	08 f4       	brcc	.+2      	; 0x1cfa <KEYPAD_getPressedKey+0xa0>
    1cf8:	b9 cf       	rjmp	.-142    	; 0x1c6c <KEYPAD_getPressedKey+0x12>
    1cfa:	b6 cf       	rjmp	.-148    	; 0x1c68 <KEYPAD_getPressedKey+0xe>

00001cfc <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	00 d0       	rcall	.+0      	; 0x1d02 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d02:	00 d0       	rcall	.+0      	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d0a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	3c 83       	std	Y+4, r19	; 0x04
    1d14:	2b 83       	std	Y+3, r18	; 0x03
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	88 30       	cpi	r24, 0x08	; 8
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d20:	70 c0       	rjmp	.+224    	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d22:	2b 81       	ldd	r18, Y+3	; 0x03
    1d24:	3c 81       	ldd	r19, Y+4	; 0x04
    1d26:	29 30       	cpi	r18, 0x09	; 9
    1d28:	31 05       	cpc	r19, r1
    1d2a:	5c f5       	brge	.+86     	; 0x1d82 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	84 30       	cpi	r24, 0x04	; 4
    1d32:	91 05       	cpc	r25, r1
    1d34:	09 f4       	brne	.+2      	; 0x1d38 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d36:	59 c0       	rjmp	.+178    	; 0x1dea <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d38:	2b 81       	ldd	r18, Y+3	; 0x03
    1d3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3c:	25 30       	cpi	r18, 0x05	; 5
    1d3e:	31 05       	cpc	r19, r1
    1d40:	9c f4       	brge	.+38     	; 0x1d68 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	9c 81       	ldd	r25, Y+4	; 0x04
    1d46:	82 30       	cpi	r24, 0x02	; 2
    1d48:	91 05       	cpc	r25, r1
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d4c:	48 c0       	rjmp	.+144    	; 0x1dde <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d50:	3c 81       	ldd	r19, Y+4	; 0x04
    1d52:	23 30       	cpi	r18, 0x03	; 3
    1d54:	31 05       	cpc	r19, r1
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d58:	45 c0       	rjmp	.+138    	; 0x1de4 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d64:	39 c0       	rjmp	.+114    	; 0x1dd8 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d66:	67 c0       	rjmp	.+206    	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d68:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6c:	26 30       	cpi	r18, 0x06	; 6
    1d6e:	31 05       	cpc	r19, r1
    1d70:	09 f4       	brne	.+2      	; 0x1d74 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d72:	41 c0       	rjmp	.+130    	; 0x1df6 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	87 30       	cpi	r24, 0x07	; 7
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	0c f0       	brlt	.+2      	; 0x1d80 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d7e:	3e c0       	rjmp	.+124    	; 0x1dfc <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d80:	37 c0       	rjmp	.+110    	; 0x1df0 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d82:	2b 81       	ldd	r18, Y+3	; 0x03
    1d84:	3c 81       	ldd	r19, Y+4	; 0x04
    1d86:	2c 30       	cpi	r18, 0x0C	; 12
    1d88:	31 05       	cpc	r19, r1
    1d8a:	09 f4       	brne	.+2      	; 0x1d8e <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d8c:	46 c0       	rjmp	.+140    	; 0x1e1a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	8d 30       	cpi	r24, 0x0D	; 13
    1d94:	91 05       	cpc	r25, r1
    1d96:	5c f4       	brge	.+22     	; 0x1dae <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d98:	2b 81       	ldd	r18, Y+3	; 0x03
    1d9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d9c:	2a 30       	cpi	r18, 0x0A	; 10
    1d9e:	31 05       	cpc	r19, r1
    1da0:	b1 f1       	breq	.+108    	; 0x1e0e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	8b 30       	cpi	r24, 0x0B	; 11
    1da8:	91 05       	cpc	r25, r1
    1daa:	a4 f5       	brge	.+104    	; 0x1e14 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1dac:	2d c0       	rjmp	.+90     	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	2e 30       	cpi	r18, 0x0E	; 14
    1db4:	31 05       	cpc	r19, r1
    1db6:	b9 f1       	breq	.+110    	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	9c 81       	ldd	r25, Y+4	; 0x04
    1dbc:	8e 30       	cpi	r24, 0x0E	; 14
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	7c f1       	brlt	.+94     	; 0x1e20 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc6:	2f 30       	cpi	r18, 0x0F	; 15
    1dc8:	31 05       	cpc	r19, r1
    1dca:	79 f1       	breq	.+94     	; 0x1e2a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	80 31       	cpi	r24, 0x10	; 16
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	69 f1       	breq	.+90     	; 0x1e30 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1dd6:	2f c0       	rjmp	.+94     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1dd8:	87 e0       	ldi	r24, 0x07	; 7
    1dda:	89 83       	std	Y+1, r24	; 0x01
    1ddc:	2e c0       	rjmp	.+92     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dde:	88 e0       	ldi	r24, 0x08	; 8
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	2b c0       	rjmp	.+86     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1de4:	89 e0       	ldi	r24, 0x09	; 9
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	28 c0       	rjmp	.+80     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1dea:	85 e2       	ldi	r24, 0x25	; 37
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	25 c0       	rjmp	.+74     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1df0:	84 e0       	ldi	r24, 0x04	; 4
    1df2:	89 83       	std	Y+1, r24	; 0x01
    1df4:	22 c0       	rjmp	.+68     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1df6:	85 e0       	ldi	r24, 0x05	; 5
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	1f c0       	rjmp	.+62     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1dfc:	86 e0       	ldi	r24, 0x06	; 6
    1dfe:	89 83       	std	Y+1, r24	; 0x01
    1e00:	1c c0       	rjmp	.+56     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e02:	8a e2       	ldi	r24, 0x2A	; 42
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	19 c0       	rjmp	.+50     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	16 c0       	rjmp	.+44     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e0e:	82 e0       	ldi	r24, 0x02	; 2
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	13 c0       	rjmp	.+38     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	89 83       	std	Y+1, r24	; 0x01
    1e18:	10 c0       	rjmp	.+32     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e1a:	8d e2       	ldi	r24, 0x2D	; 45
    1e1c:	89 83       	std	Y+1, r24	; 0x01
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e20:	8d e0       	ldi	r24, 0x0D	; 13
    1e22:	89 83       	std	Y+1, r24	; 0x01
    1e24:	0a c0       	rjmp	.+20     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e26:	19 82       	std	Y+1, r1	; 0x01
    1e28:	08 c0       	rjmp	.+16     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e2a:	8d e3       	ldi	r24, 0x3D	; 61
    1e2c:	89 83       	std	Y+1, r24	; 0x01
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e30:	8b e2       	ldi	r24, 0x2B	; 43
    1e32:	89 83       	std	Y+1, r24	; 0x01
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	0f 90       	pop	r0
    1e44:	cf 91       	pop	r28
    1e46:	df 91       	pop	r29
    1e48:	08 95       	ret

00001e4a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e4a:	df 93       	push	r29
    1e4c:	cf 93       	push	r28
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e52:	83 e0       	ldi	r24, 0x03	; 3
    1e54:	62 e0       	ldi	r22, 0x02	; 2
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	0e 94 ef 0a 	call	0x15de	; 0x15de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	63 e0       	ldi	r22, 0x03	; 3
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 ef 0a 	call	0x15de	; 0x15de <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	64 e0       	ldi	r22, 0x04	; 4
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 ef 0a 	call	0x15de	; 0x15de <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	6f ef       	ldi	r22, 0xFF	; 255
    1e74:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e78:	88 e3       	ldi	r24, 0x38	; 56
    1e7a:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e7e:	8c e0       	ldi	r24, 0x0C	; 12
    1e80:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_sendCommand>
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	ea 97       	sbiw	r28, 0x3a	; 58
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1ea6:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1ea8:	83 e0       	ldi	r24, 0x03	; 3
    1eaa:	62 e0       	ldi	r22, 0x02	; 2
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1eb2:	83 e0       	ldi	r24, 0x03	; 3
    1eb4:	63 e0       	ldi	r22, 0x03	; 3
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	8d ab       	std	Y+53, r24	; 0x35
    1ec6:	9e ab       	std	Y+54, r25	; 0x36
    1ec8:	af ab       	std	Y+55, r26	; 0x37
    1eca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	6d a9       	ldd	r22, Y+53	; 0x35
    1ece:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ed2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4a e7       	ldi	r20, 0x7A	; 122
    1eda:	53 e4       	ldi	r21, 0x43	; 67
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	89 ab       	std	Y+49, r24	; 0x31
    1ee6:	9a ab       	std	Y+50, r25	; 0x32
    1ee8:	ab ab       	std	Y+51, r26	; 0x33
    1eea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1eec:	69 a9       	ldd	r22, Y+49	; 0x31
    1eee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ef2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f00:	88 23       	and	r24, r24
    1f02:	2c f4       	brge	.+10     	; 0x1f0e <LCD_sendCommand+0x7e>
		__ticks = 1;
    1f04:	81 e0       	ldi	r24, 0x01	; 1
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	98 ab       	std	Y+48, r25	; 0x30
    1f0a:	8f a7       	std	Y+47, r24	; 0x2f
    1f0c:	3f c0       	rjmp	.+126    	; 0x1f8c <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1f0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f10:	7a a9       	ldd	r23, Y+50	; 0x32
    1f12:	8b a9       	ldd	r24, Y+51	; 0x33
    1f14:	9c a9       	ldd	r25, Y+52	; 0x34
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	3f ef       	ldi	r19, 0xFF	; 255
    1f1a:	4f e7       	ldi	r20, 0x7F	; 127
    1f1c:	57 e4       	ldi	r21, 0x47	; 71
    1f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f22:	18 16       	cp	r1, r24
    1f24:	4c f5       	brge	.+82     	; 0x1f78 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f26:	6d a9       	ldd	r22, Y+53	; 0x35
    1f28:	7e a9       	ldd	r23, Y+54	; 0x36
    1f2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e2       	ldi	r20, 0x20	; 32
    1f34:	51 e4       	ldi	r21, 0x41	; 65
    1f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	bc 01       	movw	r22, r24
    1f40:	cd 01       	movw	r24, r26
    1f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	98 ab       	std	Y+48, r25	; 0x30
    1f4c:	8f a7       	std	Y+47, r24	; 0x2f
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <LCD_sendCommand+0xde>
    1f50:	89 e1       	ldi	r24, 0x19	; 25
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9e a7       	std	Y+46, r25	; 0x2e
    1f56:	8d a7       	std	Y+45, r24	; 0x2d
    1f58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_sendCommand+0xcc>
    1f60:	9e a7       	std	Y+46, r25	; 0x2e
    1f62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f66:	98 a9       	ldd	r25, Y+48	; 0x30
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	98 ab       	std	Y+48, r25	; 0x30
    1f6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f70:	98 a9       	ldd	r25, Y+48	; 0x30
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	69 f7       	brne	.-38     	; 0x1f50 <LCD_sendCommand+0xc0>
    1f76:	14 c0       	rjmp	.+40     	; 0x1fa0 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f78:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	98 ab       	std	Y+48, r25	; 0x30
    1f8a:	8f a7       	std	Y+47, r24	; 0x2f
    1f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f90:	9c a7       	std	Y+44, r25	; 0x2c
    1f92:	8b a7       	std	Y+43, r24	; 0x2b
    1f94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_sendCommand+0x108>
    1f9c:	9c a7       	std	Y+44, r25	; 0x2c
    1f9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fa0:	83 e0       	ldi	r24, 0x03	; 3
    1fa2:	64 e0       	ldi	r22, 0x04	; 4
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e8       	ldi	r26, 0x80	; 128
    1fb0:	bf e3       	ldi	r27, 0x3F	; 63
    1fb2:	8f a3       	std	Y+39, r24	; 0x27
    1fb4:	98 a7       	std	Y+40, r25	; 0x28
    1fb6:	a9 a7       	std	Y+41, r26	; 0x29
    1fb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	6f a1       	ldd	r22, Y+39	; 0x27
    1fbc:	78 a5       	ldd	r23, Y+40	; 0x28
    1fbe:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a e7       	ldi	r20, 0x7A	; 122
    1fc8:	53 e4       	ldi	r21, 0x43	; 67
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8b a3       	std	Y+35, r24	; 0x23
    1fd4:	9c a3       	std	Y+36, r25	; 0x24
    1fd6:	ad a3       	std	Y+37, r26	; 0x25
    1fd8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fda:	6b a1       	ldd	r22, Y+35	; 0x23
    1fdc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fde:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_sendCommand+0x16c>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9a a3       	std	Y+34, r25	; 0x22
    1ff8:	89 a3       	std	Y+33, r24	; 0x21
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    1ffc:	6b a1       	ldd	r22, Y+35	; 0x23
    1ffe:	7c a1       	ldd	r23, Y+36	; 0x24
    2000:	8d a1       	ldd	r24, Y+37	; 0x25
    2002:	9e a1       	ldd	r25, Y+38	; 0x26
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	6f a1       	ldd	r22, Y+39	; 0x27
    2016:	78 a5       	ldd	r23, Y+40	; 0x28
    2018:	89 a5       	ldd	r24, Y+41	; 0x29
    201a:	9a a5       	ldd	r25, Y+42	; 0x2a
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9a a3       	std	Y+34, r25	; 0x22
    203a:	89 a3       	std	Y+33, r24	; 0x21
    203c:	0f c0       	rjmp	.+30     	; 0x205c <LCD_sendCommand+0x1cc>
    203e:	89 e1       	ldi	r24, 0x19	; 25
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	98 a3       	std	Y+32, r25	; 0x20
    2044:	8f 8f       	std	Y+31, r24	; 0x1f
    2046:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2048:	98 a1       	ldd	r25, Y+32	; 0x20
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_sendCommand+0x1ba>
    204e:	98 a3       	std	Y+32, r25	; 0x20
    2050:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	89 a1       	ldd	r24, Y+33	; 0x21
    2054:	9a a1       	ldd	r25, Y+34	; 0x22
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9a a3       	std	Y+34, r25	; 0x22
    205a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	9a a1       	ldd	r25, Y+34	; 0x22
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <LCD_sendCommand+0x1ae>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	6b a1       	ldd	r22, Y+35	; 0x23
    2068:	7c a1       	ldd	r23, Y+36	; 0x24
    206a:	8d a1       	ldd	r24, Y+37	; 0x25
    206c:	9e a1       	ldd	r25, Y+38	; 0x26
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9a a3       	std	Y+34, r25	; 0x22
    2078:	89 a3       	std	Y+33, r24	; 0x21
    207a:	89 a1       	ldd	r24, Y+33	; 0x21
    207c:	9a a1       	ldd	r25, Y+34	; 0x22
    207e:	9e 8f       	std	Y+30, r25	; 0x1e
    2080:	8d 8f       	std	Y+29, r24	; 0x1d
    2082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2084:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_sendCommand+0x1f6>
    208a:	9e 8f       	std	Y+30, r25	; 0x1e
    208c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	6a ad       	ldd	r22, Y+58	; 0x3a
    2092:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <GPIO_writePort>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e8       	ldi	r26, 0x80	; 128
    209c:	bf e3       	ldi	r27, 0x3F	; 63
    209e:	89 8f       	std	Y+25, r24	; 0x19
    20a0:	9a 8f       	std	Y+26, r25	; 0x1a
    20a2:	ab 8f       	std	Y+27, r26	; 0x1b
    20a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20a6:	69 8d       	ldd	r22, Y+25	; 0x19
    20a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4a e7       	ldi	r20, 0x7A	; 122
    20b4:	53 e4       	ldi	r21, 0x43	; 67
    20b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	8d 8b       	std	Y+21, r24	; 0x15
    20c0:	9e 8b       	std	Y+22, r25	; 0x16
    20c2:	af 8b       	std	Y+23, r26	; 0x17
    20c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20c6:	6d 89       	ldd	r22, Y+21	; 0x15
    20c8:	7e 89       	ldd	r23, Y+22	; 0x16
    20ca:	8f 89       	ldd	r24, Y+23	; 0x17
    20cc:	98 8d       	ldd	r25, Y+24	; 0x18
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e8       	ldi	r20, 0x80	; 128
    20d4:	5f e3       	ldi	r21, 0x3F	; 63
    20d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20da:	88 23       	and	r24, r24
    20dc:	2c f4       	brge	.+10     	; 0x20e8 <LCD_sendCommand+0x258>
		__ticks = 1;
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 8b       	std	Y+20, r25	; 0x14
    20e4:	8b 8b       	std	Y+19, r24	; 0x13
    20e6:	3f c0       	rjmp	.+126    	; 0x2166 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    20e8:	6d 89       	ldd	r22, Y+21	; 0x15
    20ea:	7e 89       	ldd	r23, Y+22	; 0x16
    20ec:	8f 89       	ldd	r24, Y+23	; 0x17
    20ee:	98 8d       	ldd	r25, Y+24	; 0x18
    20f0:	20 e0       	ldi	r18, 0x00	; 0
    20f2:	3f ef       	ldi	r19, 0xFF	; 255
    20f4:	4f e7       	ldi	r20, 0x7F	; 127
    20f6:	57 e4       	ldi	r21, 0x47	; 71
    20f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20fc:	18 16       	cp	r1, r24
    20fe:	4c f5       	brge	.+82     	; 0x2152 <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2100:	69 8d       	ldd	r22, Y+25	; 0x19
    2102:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2104:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2106:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e2       	ldi	r20, 0x20	; 32
    210e:	51 e4       	ldi	r21, 0x41	; 65
    2110:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	bc 01       	movw	r22, r24
    211a:	cd 01       	movw	r24, r26
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9c 8b       	std	Y+20, r25	; 0x14
    2126:	8b 8b       	std	Y+19, r24	; 0x13
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <LCD_sendCommand+0x2b8>
    212a:	89 e1       	ldi	r24, 0x19	; 25
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9a 8b       	std	Y+18, r25	; 0x12
    2130:	89 8b       	std	Y+17, r24	; 0x11
    2132:	89 89       	ldd	r24, Y+17	; 0x11
    2134:	9a 89       	ldd	r25, Y+18	; 0x12
    2136:	01 97       	sbiw	r24, 0x01	; 1
    2138:	f1 f7       	brne	.-4      	; 0x2136 <LCD_sendCommand+0x2a6>
    213a:	9a 8b       	std	Y+18, r25	; 0x12
    213c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    213e:	8b 89       	ldd	r24, Y+19	; 0x13
    2140:	9c 89       	ldd	r25, Y+20	; 0x14
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	9c 8b       	std	Y+20, r25	; 0x14
    2146:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	69 f7       	brne	.-38     	; 0x212a <LCD_sendCommand+0x29a>
    2150:	14 c0       	rjmp	.+40     	; 0x217a <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2152:	6d 89       	ldd	r22, Y+21	; 0x15
    2154:	7e 89       	ldd	r23, Y+22	; 0x16
    2156:	8f 89       	ldd	r24, Y+23	; 0x17
    2158:	98 8d       	ldd	r25, Y+24	; 0x18
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9c 8b       	std	Y+20, r25	; 0x14
    2164:	8b 8b       	std	Y+19, r24	; 0x13
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	98 8b       	std	Y+16, r25	; 0x10
    216c:	8f 87       	std	Y+15, r24	; 0x0f
    216e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2170:	98 89       	ldd	r25, Y+16	; 0x10
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	f1 f7       	brne	.-4      	; 0x2172 <LCD_sendCommand+0x2e2>
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    217a:	83 e0       	ldi	r24, 0x03	; 3
    217c:	64 e0       	ldi	r22, 0x04	; 4
    217e:	40 e0       	ldi	r20, 0x00	; 0
    2180:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	a0 e8       	ldi	r26, 0x80	; 128
    218a:	bf e3       	ldi	r27, 0x3F	; 63
    218c:	8b 87       	std	Y+11, r24	; 0x0b
    218e:	9c 87       	std	Y+12, r25	; 0x0c
    2190:	ad 87       	std	Y+13, r26	; 0x0d
    2192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2194:	6b 85       	ldd	r22, Y+11	; 0x0b
    2196:	7c 85       	ldd	r23, Y+12	; 0x0c
    2198:	8d 85       	ldd	r24, Y+13	; 0x0d
    219a:	9e 85       	ldd	r25, Y+14	; 0x0e
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a e7       	ldi	r20, 0x7A	; 122
    21a2:	53 e4       	ldi	r21, 0x43	; 67
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8f 83       	std	Y+7, r24	; 0x07
    21ae:	98 87       	std	Y+8, r25	; 0x08
    21b0:	a9 87       	std	Y+9, r26	; 0x09
    21b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21b4:	6f 81       	ldd	r22, Y+7	; 0x07
    21b6:	78 85       	ldd	r23, Y+8	; 0x08
    21b8:	89 85       	ldd	r24, Y+9	; 0x09
    21ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e8       	ldi	r20, 0x80	; 128
    21c2:	5f e3       	ldi	r21, 0x3F	; 63
    21c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21c8:	88 23       	and	r24, r24
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <LCD_sendCommand+0x346>
		__ticks = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
    21d4:	3f c0       	rjmp	.+126    	; 0x2254 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    21d6:	6f 81       	ldd	r22, Y+7	; 0x07
    21d8:	78 85       	ldd	r23, Y+8	; 0x08
    21da:	89 85       	ldd	r24, Y+9	; 0x09
    21dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	3f ef       	ldi	r19, 0xFF	; 255
    21e2:	4f e7       	ldi	r20, 0x7F	; 127
    21e4:	57 e4       	ldi	r21, 0x47	; 71
    21e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21ea:	18 16       	cp	r1, r24
    21ec:	4c f5       	brge	.+82     	; 0x2240 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e2       	ldi	r20, 0x20	; 32
    21fc:	51 e4       	ldi	r21, 0x41	; 65
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	bc 01       	movw	r22, r24
    2208:	cd 01       	movw	r24, r26
    220a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	9e 83       	std	Y+6, r25	; 0x06
    2214:	8d 83       	std	Y+5, r24	; 0x05
    2216:	0f c0       	rjmp	.+30     	; 0x2236 <LCD_sendCommand+0x3a6>
    2218:	89 e1       	ldi	r24, 0x19	; 25
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	9c 83       	std	Y+4, r25	; 0x04
    221e:	8b 83       	std	Y+3, r24	; 0x03
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_sendCommand+0x394>
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	69 f7       	brne	.-38     	; 0x2218 <LCD_sendCommand+0x388>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2240:	6f 81       	ldd	r22, Y+7	; 0x07
    2242:	78 85       	ldd	r23, Y+8	; 0x08
    2244:	89 85       	ldd	r24, Y+9	; 0x09
    2246:	9a 85       	ldd	r25, Y+10	; 0x0a
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	9a 83       	std	Y+2, r25	; 0x02
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_sendCommand+0x3d0>
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2268:	ea 96       	adiw	r28, 0x3a	; 58
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	ea 97       	sbiw	r28, 0x3a	; 58
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2290:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2292:	83 e0       	ldi	r24, 0x03	; 3
    2294:	62 e0       	ldi	r22, 0x02	; 2
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	63 e0       	ldi	r22, 0x03	; 3
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    22a6:	80 e0       	ldi	r24, 0x00	; 0
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	a0 e8       	ldi	r26, 0x80	; 128
    22ac:	bf e3       	ldi	r27, 0x3F	; 63
    22ae:	8d ab       	std	Y+53, r24	; 0x35
    22b0:	9e ab       	std	Y+54, r25	; 0x36
    22b2:	af ab       	std	Y+55, r26	; 0x37
    22b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b6:	6d a9       	ldd	r22, Y+53	; 0x35
    22b8:	7e a9       	ldd	r23, Y+54	; 0x36
    22ba:	8f a9       	ldd	r24, Y+55	; 0x37
    22bc:	98 ad       	ldd	r25, Y+56	; 0x38
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	4a e7       	ldi	r20, 0x7A	; 122
    22c4:	53 e4       	ldi	r21, 0x43	; 67
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	89 ab       	std	Y+49, r24	; 0x31
    22d0:	9a ab       	std	Y+50, r25	; 0x32
    22d2:	ab ab       	std	Y+51, r26	; 0x33
    22d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22d6:	69 a9       	ldd	r22, Y+49	; 0x31
    22d8:	7a a9       	ldd	r23, Y+50	; 0x32
    22da:	8b a9       	ldd	r24, Y+51	; 0x33
    22dc:	9c a9       	ldd	r25, Y+52	; 0x34
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	40 e8       	ldi	r20, 0x80	; 128
    22e4:	5f e3       	ldi	r21, 0x3F	; 63
    22e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ea:	88 23       	and	r24, r24
    22ec:	2c f4       	brge	.+10     	; 0x22f8 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	98 ab       	std	Y+48, r25	; 0x30
    22f4:	8f a7       	std	Y+47, r24	; 0x2f
    22f6:	3f c0       	rjmp	.+126    	; 0x2376 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    22f8:	69 a9       	ldd	r22, Y+49	; 0x31
    22fa:	7a a9       	ldd	r23, Y+50	; 0x32
    22fc:	8b a9       	ldd	r24, Y+51	; 0x33
    22fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	4c f5       	brge	.+82     	; 0x2362 <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	6d a9       	ldd	r22, Y+53	; 0x35
    2312:	7e a9       	ldd	r23, Y+54	; 0x36
    2314:	8f a9       	ldd	r24, Y+55	; 0x37
    2316:	98 ad       	ldd	r25, Y+56	; 0x38
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e2       	ldi	r20, 0x20	; 32
    231e:	51 e4       	ldi	r21, 0x41	; 65
    2320:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	bc 01       	movw	r22, r24
    232a:	cd 01       	movw	r24, r26
    232c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	98 ab       	std	Y+48, r25	; 0x30
    2336:	8f a7       	std	Y+47, r24	; 0x2f
    2338:	0f c0       	rjmp	.+30     	; 0x2358 <LCD_displayCharacter+0xde>
    233a:	89 e1       	ldi	r24, 0x19	; 25
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e a7       	std	Y+46, r25	; 0x2e
    2340:	8d a7       	std	Y+45, r24	; 0x2d
    2342:	8d a5       	ldd	r24, Y+45	; 0x2d
    2344:	9e a5       	ldd	r25, Y+46	; 0x2e
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_displayCharacter+0xcc>
    234a:	9e a7       	std	Y+46, r25	; 0x2e
    234c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2350:	98 a9       	ldd	r25, Y+48	; 0x30
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	98 ab       	std	Y+48, r25	; 0x30
    2356:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2358:	8f a5       	ldd	r24, Y+47	; 0x2f
    235a:	98 a9       	ldd	r25, Y+48	; 0x30
    235c:	00 97       	sbiw	r24, 0x00	; 0
    235e:	69 f7       	brne	.-38     	; 0x233a <LCD_displayCharacter+0xc0>
    2360:	14 c0       	rjmp	.+40     	; 0x238a <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2362:	69 a9       	ldd	r22, Y+49	; 0x31
    2364:	7a a9       	ldd	r23, Y+50	; 0x32
    2366:	8b a9       	ldd	r24, Y+51	; 0x33
    2368:	9c a9       	ldd	r25, Y+52	; 0x34
    236a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	98 ab       	std	Y+48, r25	; 0x30
    2374:	8f a7       	std	Y+47, r24	; 0x2f
    2376:	8f a5       	ldd	r24, Y+47	; 0x2f
    2378:	98 a9       	ldd	r25, Y+48	; 0x30
    237a:	9c a7       	std	Y+44, r25	; 0x2c
    237c:	8b a7       	std	Y+43, r24	; 0x2b
    237e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2380:	9c a5       	ldd	r25, Y+44	; 0x2c
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	f1 f7       	brne	.-4      	; 0x2382 <LCD_displayCharacter+0x108>
    2386:	9c a7       	std	Y+44, r25	; 0x2c
    2388:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	64 e0       	ldi	r22, 0x04	; 4
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	8f a3       	std	Y+39, r24	; 0x27
    239e:	98 a7       	std	Y+40, r25	; 0x28
    23a0:	a9 a7       	std	Y+41, r26	; 0x29
    23a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6f a1       	ldd	r22, Y+39	; 0x27
    23a6:	78 a5       	ldd	r23, Y+40	; 0x28
    23a8:	89 a5       	ldd	r24, Y+41	; 0x29
    23aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a e7       	ldi	r20, 0x7A	; 122
    23b2:	53 e4       	ldi	r21, 0x43	; 67
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8b a3       	std	Y+35, r24	; 0x23
    23be:	9c a3       	std	Y+36, r25	; 0x24
    23c0:	ad a3       	std	Y+37, r26	; 0x25
    23c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23c4:	6b a1       	ldd	r22, Y+35	; 0x23
    23c6:	7c a1       	ldd	r23, Y+36	; 0x24
    23c8:	8d a1       	ldd	r24, Y+37	; 0x25
    23ca:	9e a1       	ldd	r25, Y+38	; 0x26
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9a a3       	std	Y+34, r25	; 0x22
    23e2:	89 a3       	std	Y+33, r24	; 0x21
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    23e6:	6b a1       	ldd	r22, Y+35	; 0x23
    23e8:	7c a1       	ldd	r23, Y+36	; 0x24
    23ea:	8d a1       	ldd	r24, Y+37	; 0x25
    23ec:	9e a1       	ldd	r25, Y+38	; 0x26
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2400:	78 a5       	ldd	r23, Y+40	; 0x28
    2402:	89 a5       	ldd	r24, Y+41	; 0x29
    2404:	9a a5       	ldd	r25, Y+42	; 0x2a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9a a3       	std	Y+34, r25	; 0x22
    2424:	89 a3       	std	Y+33, r24	; 0x21
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_displayCharacter+0x1cc>
    2428:	89 e1       	ldi	r24, 0x19	; 25
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	98 a3       	std	Y+32, r25	; 0x20
    242e:	8f 8f       	std	Y+31, r24	; 0x1f
    2430:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2432:	98 a1       	ldd	r25, Y+32	; 0x20
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_displayCharacter+0x1ba>
    2438:	98 a3       	std	Y+32, r25	; 0x20
    243a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	89 a1       	ldd	r24, Y+33	; 0x21
    243e:	9a a1       	ldd	r25, Y+34	; 0x22
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9a a3       	std	Y+34, r25	; 0x22
    2444:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	89 a1       	ldd	r24, Y+33	; 0x21
    2448:	9a a1       	ldd	r25, Y+34	; 0x22
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_displayCharacter+0x1ae>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6b a1       	ldd	r22, Y+35	; 0x23
    2452:	7c a1       	ldd	r23, Y+36	; 0x24
    2454:	8d a1       	ldd	r24, Y+37	; 0x25
    2456:	9e a1       	ldd	r25, Y+38	; 0x26
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9a a3       	std	Y+34, r25	; 0x22
    2462:	89 a3       	std	Y+33, r24	; 0x21
    2464:	89 a1       	ldd	r24, Y+33	; 0x21
    2466:	9a a1       	ldd	r25, Y+34	; 0x22
    2468:	9e 8f       	std	Y+30, r25	; 0x1e
    246a:	8d 8f       	std	Y+29, r24	; 0x1d
    246c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    246e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_displayCharacter+0x1f6>
    2474:	9e 8f       	std	Y+30, r25	; 0x1e
    2476:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2478:	82 e0       	ldi	r24, 0x02	; 2
    247a:	6a ad       	ldd	r22, Y+58	; 0x3a
    247c:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <GPIO_writePort>
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	a0 e8       	ldi	r26, 0x80	; 128
    2486:	bf e3       	ldi	r27, 0x3F	; 63
    2488:	89 8f       	std	Y+25, r24	; 0x19
    248a:	9a 8f       	std	Y+26, r25	; 0x1a
    248c:	ab 8f       	std	Y+27, r26	; 0x1b
    248e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2490:	69 8d       	ldd	r22, Y+25	; 0x19
    2492:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2494:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2496:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	53 e4       	ldi	r21, 0x43	; 67
    24a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	8d 8b       	std	Y+21, r24	; 0x15
    24aa:	9e 8b       	std	Y+22, r25	; 0x16
    24ac:	af 8b       	std	Y+23, r26	; 0x17
    24ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e8       	ldi	r20, 0x80	; 128
    24be:	5f e3       	ldi	r21, 0x3F	; 63
    24c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c4:	88 23       	and	r24, r24
    24c6:	2c f4       	brge	.+10     	; 0x24d2 <LCD_displayCharacter+0x258>
		__ticks = 1;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9c 8b       	std	Y+20, r25	; 0x14
    24ce:	8b 8b       	std	Y+19, r24	; 0x13
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24d2:	6d 89       	ldd	r22, Y+21	; 0x15
    24d4:	7e 89       	ldd	r23, Y+22	; 0x16
    24d6:	8f 89       	ldd	r24, Y+23	; 0x17
    24d8:	98 8d       	ldd	r25, Y+24	; 0x18
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	3f ef       	ldi	r19, 0xFF	; 255
    24de:	4f e7       	ldi	r20, 0x7F	; 127
    24e0:	57 e4       	ldi	r21, 0x47	; 71
    24e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e6:	18 16       	cp	r1, r24
    24e8:	4c f5       	brge	.+82     	; 0x253c <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ea:	69 8d       	ldd	r22, Y+25	; 0x19
    24ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e2       	ldi	r20, 0x20	; 32
    24f8:	51 e4       	ldi	r21, 0x41	; 65
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	bc 01       	movw	r22, r24
    2504:	cd 01       	movw	r24, r26
    2506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250a:	dc 01       	movw	r26, r24
    250c:	cb 01       	movw	r24, r22
    250e:	9c 8b       	std	Y+20, r25	; 0x14
    2510:	8b 8b       	std	Y+19, r24	; 0x13
    2512:	0f c0       	rjmp	.+30     	; 0x2532 <LCD_displayCharacter+0x2b8>
    2514:	89 e1       	ldi	r24, 0x19	; 25
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	9a 8b       	std	Y+18, r25	; 0x12
    251a:	89 8b       	std	Y+17, r24	; 0x11
    251c:	89 89       	ldd	r24, Y+17	; 0x11
    251e:	9a 89       	ldd	r25, Y+18	; 0x12
    2520:	01 97       	sbiw	r24, 0x01	; 1
    2522:	f1 f7       	brne	.-4      	; 0x2520 <LCD_displayCharacter+0x2a6>
    2524:	9a 8b       	std	Y+18, r25	; 0x12
    2526:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	9c 89       	ldd	r25, Y+20	; 0x14
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	9c 8b       	std	Y+20, r25	; 0x14
    2530:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	69 f7       	brne	.-38     	; 0x2514 <LCD_displayCharacter+0x29a>
    253a:	14 c0       	rjmp	.+40     	; 0x2564 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253c:	6d 89       	ldd	r22, Y+21	; 0x15
    253e:	7e 89       	ldd	r23, Y+22	; 0x16
    2540:	8f 89       	ldd	r24, Y+23	; 0x17
    2542:	98 8d       	ldd	r25, Y+24	; 0x18
    2544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	9c 8b       	std	Y+20, r25	; 0x14
    254e:	8b 8b       	std	Y+19, r24	; 0x13
    2550:	8b 89       	ldd	r24, Y+19	; 0x13
    2552:	9c 89       	ldd	r25, Y+20	; 0x14
    2554:	98 8b       	std	Y+16, r25	; 0x10
    2556:	8f 87       	std	Y+15, r24	; 0x0f
    2558:	8f 85       	ldd	r24, Y+15	; 0x0f
    255a:	98 89       	ldd	r25, Y+16	; 0x10
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	f1 f7       	brne	.-4      	; 0x255c <LCD_displayCharacter+0x2e2>
    2560:	98 8b       	std	Y+16, r25	; 0x10
    2562:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2564:	83 e0       	ldi	r24, 0x03	; 3
    2566:	64 e0       	ldi	r22, 0x04	; 4
    2568:	40 e0       	ldi	r20, 0x00	; 0
    256a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <GPIO_writePin>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 e8       	ldi	r26, 0x80	; 128
    2574:	bf e3       	ldi	r27, 0x3F	; 63
    2576:	8b 87       	std	Y+11, r24	; 0x0b
    2578:	9c 87       	std	Y+12, r25	; 0x0c
    257a:	ad 87       	std	Y+13, r26	; 0x0d
    257c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2580:	7c 85       	ldd	r23, Y+12	; 0x0c
    2582:	8d 85       	ldd	r24, Y+13	; 0x0d
    2584:	9e 85       	ldd	r25, Y+14	; 0x0e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a e7       	ldi	r20, 0x7A	; 122
    258c:	53 e4       	ldi	r21, 0x43	; 67
    258e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8f 83       	std	Y+7, r24	; 0x07
    2598:	98 87       	std	Y+8, r25	; 0x08
    259a:	a9 87       	std	Y+9, r26	; 0x09
    259c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259e:	6f 81       	ldd	r22, Y+7	; 0x07
    25a0:	78 85       	ldd	r23, Y+8	; 0x08
    25a2:	89 85       	ldd	r24, Y+9	; 0x09
    25a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e8       	ldi	r20, 0x80	; 128
    25ac:	5f e3       	ldi	r21, 0x3F	; 63
    25ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25b2:	88 23       	and	r24, r24
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <LCD_displayCharacter+0x346>
		__ticks = 1;
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	9e 83       	std	Y+6, r25	; 0x06
    25bc:	8d 83       	std	Y+5, r24	; 0x05
    25be:	3f c0       	rjmp	.+126    	; 0x263e <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	3f ef       	ldi	r19, 0xFF	; 255
    25cc:	4f e7       	ldi	r20, 0x7F	; 127
    25ce:	57 e4       	ldi	r21, 0x47	; 71
    25d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25d4:	18 16       	cp	r1, r24
    25d6:	4c f5       	brge	.+82     	; 0x262a <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25da:	7c 85       	ldd	r23, Y+12	; 0x0c
    25dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25de:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e 83       	std	Y+6, r25	; 0x06
    25fe:	8d 83       	std	Y+5, r24	; 0x05
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <LCD_displayCharacter+0x3a6>
    2602:	89 e1       	ldi	r24, 0x19	; 25
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9c 83       	std	Y+4, r25	; 0x04
    2608:	8b 83       	std	Y+3, r24	; 0x03
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_displayCharacter+0x394>
    2612:	9c 83       	std	Y+4, r25	; 0x04
    2614:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8d 81       	ldd	r24, Y+5	; 0x05
    2618:	9e 81       	ldd	r25, Y+6	; 0x06
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9e 83       	std	Y+6, r25	; 0x06
    261e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8d 81       	ldd	r24, Y+5	; 0x05
    2622:	9e 81       	ldd	r25, Y+6	; 0x06
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <LCD_displayCharacter+0x388>
    2628:	14 c0       	rjmp	.+40     	; 0x2652 <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	6f 81       	ldd	r22, Y+7	; 0x07
    262c:	78 85       	ldd	r23, Y+8	; 0x08
    262e:	89 85       	ldd	r24, Y+9	; 0x09
    2630:	9a 85       	ldd	r25, Y+10	; 0x0a
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9e 83       	std	Y+6, r25	; 0x06
    263c:	8d 83       	std	Y+5, r24	; 0x05
    263e:	8d 81       	ldd	r24, Y+5	; 0x05
    2640:	9e 81       	ldd	r25, Y+6	; 0x06
    2642:	9a 83       	std	Y+2, r25	; 0x02
    2644:	89 83       	std	Y+1, r24	; 0x01
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	9a 81       	ldd	r25, Y+2	; 0x02
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_displayCharacter+0x3d0>
    264e:	9a 83       	std	Y+2, r25	; 0x02
    2650:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2652:	ea 96       	adiw	r28, 0x3a	; 58
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <LCD_displayString+0x6>
    266a:	0f 92       	push	r0
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	9b 83       	std	Y+3, r25	; 0x03
    2672:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2674:	19 82       	std	Y+1, r1	; 0x01
    2676:	0e c0       	rjmp	.+28     	; 0x2694 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	9b 81       	ldd	r25, Y+3	; 0x03
    2682:	fc 01       	movw	r30, r24
    2684:	e2 0f       	add	r30, r18
    2686:	f3 1f       	adc	r31, r19
    2688:	80 81       	ld	r24, Z
    268a:	0e 94 3d 11 	call	0x227a	; 0x227a <LCD_displayCharacter>
		i++;
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	8f 5f       	subi	r24, 0xFF	; 255
    2692:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	28 2f       	mov	r18, r24
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	8a 81       	ldd	r24, Y+2	; 0x02
    269c:	9b 81       	ldd	r25, Y+3	; 0x03
    269e:	fc 01       	movw	r30, r24
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	80 81       	ld	r24, Z
    26a6:	88 23       	and	r24, r24
    26a8:	39 f7       	brne	.-50     	; 0x2678 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    26aa:	0f 90       	pop	r0
    26ac:	0f 90       	pop	r0
    26ae:	0f 90       	pop	r0
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	08 95       	ret

000026b6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26b6:	df 93       	push	r29
    26b8:	cf 93       	push	r28
    26ba:	00 d0       	rcall	.+0      	; 0x26bc <LCD_moveCursor+0x6>
    26bc:	00 d0       	rcall	.+0      	; 0x26be <LCD_moveCursor+0x8>
    26be:	0f 92       	push	r0
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	8a 83       	std	Y+2, r24	; 0x02
    26c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	28 2f       	mov	r18, r24
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	3d 83       	std	Y+5, r19	; 0x05
    26d0:	2c 83       	std	Y+4, r18	; 0x04
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	91 05       	cpc	r25, r1
    26da:	c1 f0       	breq	.+48     	; 0x270c <LCD_moveCursor+0x56>
    26dc:	2c 81       	ldd	r18, Y+4	; 0x04
    26de:	3d 81       	ldd	r19, Y+5	; 0x05
    26e0:	22 30       	cpi	r18, 0x02	; 2
    26e2:	31 05       	cpc	r19, r1
    26e4:	2c f4       	brge	.+10     	; 0x26f0 <LCD_moveCursor+0x3a>
    26e6:	8c 81       	ldd	r24, Y+4	; 0x04
    26e8:	9d 81       	ldd	r25, Y+5	; 0x05
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	61 f0       	breq	.+24     	; 0x2706 <LCD_moveCursor+0x50>
    26ee:	19 c0       	rjmp	.+50     	; 0x2722 <LCD_moveCursor+0x6c>
    26f0:	2c 81       	ldd	r18, Y+4	; 0x04
    26f2:	3d 81       	ldd	r19, Y+5	; 0x05
    26f4:	22 30       	cpi	r18, 0x02	; 2
    26f6:	31 05       	cpc	r19, r1
    26f8:	69 f0       	breq	.+26     	; 0x2714 <LCD_moveCursor+0x5e>
    26fa:	8c 81       	ldd	r24, Y+4	; 0x04
    26fc:	9d 81       	ldd	r25, Y+5	; 0x05
    26fe:	83 30       	cpi	r24, 0x03	; 3
    2700:	91 05       	cpc	r25, r1
    2702:	61 f0       	breq	.+24     	; 0x271c <LCD_moveCursor+0x66>
    2704:	0e c0       	rjmp	.+28     	; 0x2722 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	89 83       	std	Y+1, r24	; 0x01
    270a:	0b c0       	rjmp	.+22     	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	80 5c       	subi	r24, 0xC0	; 192
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	80 5f       	subi	r24, 0xF0	; 240
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	80 5b       	subi	r24, 0xB0	; 176
    2720:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	80 68       	ori	r24, 0x80	; 128
    2726:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_sendCommand>
}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <LCD_displayStringRowColumn+0x6>
    2740:	00 d0       	rcall	.+0      	; 0x2742 <LCD_displayStringRowColumn+0x8>
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	6a 83       	std	Y+2, r22	; 0x02
    274a:	5c 83       	std	Y+4, r21	; 0x04
    274c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	6a 81       	ldd	r22, Y+2	; 0x02
    2752:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
}
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    276c:	df 93       	push	r29
    276e:	cf 93       	push	r28
    2770:	cd b7       	in	r28, 0x3d	; 61
    2772:	de b7       	in	r29, 0x3e	; 62
    2774:	62 97       	sbiw	r28, 0x12	; 18
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	f8 94       	cli
    277a:	de bf       	out	0x3e, r29	; 62
    277c:	0f be       	out	0x3f, r0	; 63
    277e:	cd bf       	out	0x3d, r28	; 61
    2780:	9a 8b       	std	Y+18, r25	; 0x12
    2782:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2784:	89 89       	ldd	r24, Y+17	; 0x11
    2786:	9a 89       	ldd	r25, Y+18	; 0x12
    2788:	9e 01       	movw	r18, r28
    278a:	2f 5f       	subi	r18, 0xFF	; 255
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	b9 01       	movw	r22, r18
    2790:	4a e0       	ldi	r20, 0x0A	; 10
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 7c 15 	call	0x2af8	; 0x2af8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	0e 94 32 13 	call	0x2664	; 0x2664 <LCD_displayString>
}
    27a0:	62 96       	adiw	r28, 0x12	; 18
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	de bf       	out	0x3e, r29	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	cd bf       	out	0x3d, r28	; 61
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27ba:	81 e0       	ldi	r24, 0x01	; 1
    27bc:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <LCD_sendCommand>
}
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <UART_Init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_Init(const UART_ConfigType * Config_Ptr)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <UART_Init+0x6>
    27cc:	00 d0       	rcall	.+0      	; 0x27ce <UART_Init+0x8>
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
    27d2:	9c 83       	std	Y+4, r25	; 0x04
    27d4:	8b 83       	std	Y+3, r24	; 0x03
	UCSRA =0;
    27d6:	eb e2       	ldi	r30, 0x2B	; 43
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	10 82       	st	Z, r1
	UCSRB =0;
    27dc:	ea e2       	ldi	r30, 0x2A	; 42
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	10 82       	st	Z, r1
	UCSRC =0;
    27e2:	e0 e4       	ldi	r30, 0x40	; 64
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	10 82       	st	Z, r1
	uint16 ubrr_value = 0;
    27e8:	1a 82       	std	Y+2, r1	; 0x02
    27ea:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    27ec:	eb e2       	ldi	r30, 0x2B	; 43
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	82 e0       	ldi	r24, 0x02	; 2
    27f2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB =  (1<<RXEN) | (1<<TXEN);
    27f4:	ea e2       	ldi	r30, 0x2A	; 42
    27f6:	f0 e0       	ldi	r31, 0x00	; 0
    27f8:	88 e1       	ldi	r24, 0x18	; 24
    27fa:	80 83       	st	Z, r24
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = According to dynamically configured parity bits number
	 * USBS    = According to dynamically configured stop bits number
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    27fc:	e0 e4       	ldi	r30, 0x40	; 64
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 e8       	ldi	r24, 0x80	; 128
    2802:	80 83       	st	Z, r24

	UCSRC |= Config_Ptr->UART_StopBits;
    2804:	a0 e4       	ldi	r26, 0x40	; 64
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e0 e4       	ldi	r30, 0x40	; 64
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	90 81       	ld	r25, Z
    280e:	eb 81       	ldd	r30, Y+3	; 0x03
    2810:	fc 81       	ldd	r31, Y+4	; 0x04
    2812:	84 81       	ldd	r24, Z+4	; 0x04
    2814:	89 2b       	or	r24, r25
    2816:	8c 93       	st	X, r24

	UCSRC |= Config_Ptr->UART_Parity;
    2818:	a0 e4       	ldi	r26, 0x40	; 64
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e0 e4       	ldi	r30, 0x40	; 64
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	90 81       	ld	r25, Z
    2822:	eb 81       	ldd	r30, Y+3	; 0x03
    2824:	fc 81       	ldd	r31, Y+4	; 0x04
    2826:	85 81       	ldd	r24, Z+5	; 0x05
    2828:	89 2b       	or	r24, r25
    282a:	8c 93       	st	X, r24
	
	/************************** Frame Size Description *********************
	 * UCSZ2:0 = According to dynamically configured character size
	 * RXB8 & TXB8 enabled only for 9-bit data mode
	 ***********************************************************************/
	switch(Config_Ptr->UART_CharacterSize){
    282c:	eb 81       	ldd	r30, Y+3	; 0x03
    282e:	fc 81       	ldd	r31, Y+4	; 0x04
    2830:	86 81       	ldd	r24, Z+6	; 0x06
    2832:	88 2f       	mov	r24, r24
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	87 30       	cpi	r24, 0x07	; 7
    2838:	91 05       	cpc	r25, r1
    283a:	79 f4       	brne	.+30     	; 0x285a <UART_Init+0x94>

	case NINE_BIT:

		UCSRB |= (1<<UCSZ2) | (1<<RXB8) | (1<<TXB8);
    283c:	aa e2       	ldi	r26, 0x2A	; 42
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	ea e2       	ldi	r30, 0x2A	; 42
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	87 60       	ori	r24, 0x07	; 7
    2848:	8c 93       	st	X, r24
		UCSRC |= (1<<UCSZ0) | (1<<UCSZ1);
    284a:	a0 e4       	ldi	r26, 0x40	; 64
    284c:	b0 e0       	ldi	r27, 0x00	; 0
    284e:	e0 e4       	ldi	r30, 0x40	; 64
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	80 81       	ld	r24, Z
    2854:	86 60       	ori	r24, 0x06	; 6
    2856:	8c 93       	st	X, r24
    2858:	0a c0       	rjmp	.+20     	; 0x286e <UART_Init+0xa8>
		break;

	default:
		UCSRC |= Config_Ptr->UART_CharacterSize;
    285a:	a0 e4       	ldi	r26, 0x40	; 64
    285c:	b0 e0       	ldi	r27, 0x00	; 0
    285e:	e0 e4       	ldi	r30, 0x40	; 64
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	90 81       	ld	r25, Z
    2864:	eb 81       	ldd	r30, Y+3	; 0x03
    2866:	fc 81       	ldd	r31, Y+4	; 0x04
    2868:	86 81       	ldd	r24, Z+6	; 0x06
    286a:	89 2b       	or	r24, r25
    286c:	8c 93       	st	X, r24

	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr -> UART_BaudRate * 8UL))) - 1);
    286e:	eb 81       	ldd	r30, Y+3	; 0x03
    2870:	fc 81       	ldd	r31, Y+4	; 0x04
    2872:	80 81       	ld	r24, Z
    2874:	91 81       	ldd	r25, Z+1	; 0x01
    2876:	a2 81       	ldd	r26, Z+2	; 0x02
    2878:	b3 81       	ldd	r27, Z+3	; 0x03
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	aa 1f       	adc	r26, r26
    2880:	bb 1f       	adc	r27, r27
    2882:	88 0f       	add	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	aa 1f       	adc	r26, r26
    2888:	bb 1f       	adc	r27, r27
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	aa 1f       	adc	r26, r26
    2890:	bb 1f       	adc	r27, r27
    2892:	9c 01       	movw	r18, r24
    2894:	ad 01       	movw	r20, r26
    2896:	80 e4       	ldi	r24, 0x40	; 64
    2898:	92 e4       	ldi	r25, 0x42	; 66
    289a:	af e0       	ldi	r26, 0x0F	; 15
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	bc 01       	movw	r22, r24
    28a0:	cd 01       	movw	r24, r26
    28a2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <__udivmodsi4>
    28a6:	da 01       	movw	r26, r20
    28a8:	c9 01       	movw	r24, r18
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	9a 83       	std	Y+2, r25	; 0x02
    28ae:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    28b0:	e0 e4       	ldi	r30, 0x40	; 64
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	89 81       	ldd	r24, Y+1	; 0x01
    28b6:	9a 81       	ldd	r25, Y+2	; 0x02
    28b8:	89 2f       	mov	r24, r25
    28ba:	99 27       	eor	r25, r25
    28bc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    28be:	e9 e2       	ldi	r30, 0x29	; 41
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	80 83       	st	Z, r24
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	0f 90       	pop	r0
    28cc:	0f 90       	pop	r0
    28ce:	cf 91       	pop	r28
    28d0:	df 91       	pop	r29
    28d2:	08 95       	ret

000028d4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    28d4:	df 93       	push	r29
    28d6:	cf 93       	push	r28
    28d8:	0f 92       	push	r0
    28da:	cd b7       	in	r28, 0x3d	; 61
    28dc:	de b7       	in	r29, 0x3e	; 62
    28de:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    28e0:	eb e2       	ldi	r30, 0x2B	; 43
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	88 2f       	mov	r24, r24
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	80 72       	andi	r24, 0x20	; 32
    28ec:	90 70       	andi	r25, 0x00	; 0
    28ee:	00 97       	sbiw	r24, 0x00	; 0
    28f0:	b9 f3       	breq	.-18     	; 0x28e0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    28f2:	ec e2       	ldi	r30, 0x2C	; 44
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    28fa:	0f 90       	pop	r0
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    290a:	eb e2       	ldi	r30, 0x2B	; 43
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	88 23       	and	r24, r24
    2912:	dc f7       	brge	.-10     	; 0x290a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2914:	ec e2       	ldi	r30, 0x2C	; 44
    2916:	f0 e0       	ldi	r31, 0x00	; 0
    2918:	80 81       	ld	r24, Z
}
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <UART_sendString+0x6>
    2926:	0f 92       	push	r0
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	9b 83       	std	Y+3, r25	; 0x03
    292e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2930:	19 82       	std	Y+1, r1	; 0x01
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	fc 01       	movw	r30, r24
    2940:	e2 0f       	add	r30, r18
    2942:	f3 1f       	adc	r31, r19
    2944:	80 81       	ld	r24, Z
    2946:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <UART_sendByte>
		i++;
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	28 2f       	mov	r18, r24
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	8a 81       	ldd	r24, Y+2	; 0x02
    2958:	9b 81       	ldd	r25, Y+3	; 0x03
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	80 81       	ld	r24, Z
    2962:	88 23       	and	r24, r24
    2964:	39 f7       	brne	.-50     	; 0x2934 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	00 d0       	rcall	.+0      	; 0x297c <UART_receiveString+0xa>
    297c:	0f 92       	push	r0
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	9b 83       	std	Y+3, r25	; 0x03
    2984:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2986:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2988:	89 81       	ldd	r24, Y+1	; 0x01
    298a:	28 2f       	mov	r18, r24
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	8a 81       	ldd	r24, Y+2	; 0x02
    2990:	9b 81       	ldd	r25, Y+3	; 0x03
    2992:	8c 01       	movw	r16, r24
    2994:	02 0f       	add	r16, r18
    2996:	13 1f       	adc	r17, r19
    2998:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
    299c:	f8 01       	movw	r30, r16
    299e:	80 83       	st	Z, r24
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	8f 5f       	subi	r24, 0xFF	; 255
    29a6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	8a 81       	ldd	r24, Y+2	; 0x02
    29b0:	9b 81       	ldd	r25, Y+3	; 0x03
    29b2:	8c 01       	movw	r16, r24
    29b4:	02 0f       	add	r16, r18
    29b6:	13 1f       	adc	r17, r19
    29b8:	0e 94 81 14 	call	0x2902	; 0x2902 <UART_recieveByte>
    29bc:	f8 01       	movw	r30, r16
    29be:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    29c0:	89 81       	ldd	r24, Y+1	; 0x01
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	8a 81       	ldd	r24, Y+2	; 0x02
    29c8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ca:	fc 01       	movw	r30, r24
    29cc:	e2 0f       	add	r30, r18
    29ce:	f3 1f       	adc	r31, r19
    29d0:	80 81       	ld	r24, Z
    29d2:	83 32       	cpi	r24, 0x23	; 35
    29d4:	31 f7       	brne	.-52     	; 0x29a2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	8a 81       	ldd	r24, Y+2	; 0x02
    29de:	9b 81       	ldd	r25, Y+3	; 0x03
    29e0:	fc 01       	movw	r30, r24
    29e2:	e2 0f       	add	r30, r18
    29e4:	f3 1f       	adc	r31, r19
    29e6:	10 82       	st	Z, r1
}
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	cf 91       	pop	r28
    29f0:	df 91       	pop	r29
    29f2:	1f 91       	pop	r17
    29f4:	0f 91       	pop	r16
    29f6:	08 95       	ret

000029f8 <__divmodhi4>:
    29f8:	97 fb       	bst	r25, 7
    29fa:	09 2e       	mov	r0, r25
    29fc:	07 26       	eor	r0, r23
    29fe:	0a d0       	rcall	.+20     	; 0x2a14 <__divmodhi4_neg1>
    2a00:	77 fd       	sbrc	r23, 7
    2a02:	04 d0       	rcall	.+8      	; 0x2a0c <__divmodhi4_neg2>
    2a04:	2e d0       	rcall	.+92     	; 0x2a62 <__udivmodhi4>
    2a06:	06 d0       	rcall	.+12     	; 0x2a14 <__divmodhi4_neg1>
    2a08:	00 20       	and	r0, r0
    2a0a:	1a f4       	brpl	.+6      	; 0x2a12 <__divmodhi4_exit>

00002a0c <__divmodhi4_neg2>:
    2a0c:	70 95       	com	r23
    2a0e:	61 95       	neg	r22
    2a10:	7f 4f       	sbci	r23, 0xFF	; 255

00002a12 <__divmodhi4_exit>:
    2a12:	08 95       	ret

00002a14 <__divmodhi4_neg1>:
    2a14:	f6 f7       	brtc	.-4      	; 0x2a12 <__divmodhi4_exit>
    2a16:	90 95       	com	r25
    2a18:	81 95       	neg	r24
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	08 95       	ret

00002a1e <__udivmodsi4>:
    2a1e:	a1 e2       	ldi	r26, 0x21	; 33
    2a20:	1a 2e       	mov	r1, r26
    2a22:	aa 1b       	sub	r26, r26
    2a24:	bb 1b       	sub	r27, r27
    2a26:	fd 01       	movw	r30, r26
    2a28:	0d c0       	rjmp	.+26     	; 0x2a44 <__udivmodsi4_ep>

00002a2a <__udivmodsi4_loop>:
    2a2a:	aa 1f       	adc	r26, r26
    2a2c:	bb 1f       	adc	r27, r27
    2a2e:	ee 1f       	adc	r30, r30
    2a30:	ff 1f       	adc	r31, r31
    2a32:	a2 17       	cp	r26, r18
    2a34:	b3 07       	cpc	r27, r19
    2a36:	e4 07       	cpc	r30, r20
    2a38:	f5 07       	cpc	r31, r21
    2a3a:	20 f0       	brcs	.+8      	; 0x2a44 <__udivmodsi4_ep>
    2a3c:	a2 1b       	sub	r26, r18
    2a3e:	b3 0b       	sbc	r27, r19
    2a40:	e4 0b       	sbc	r30, r20
    2a42:	f5 0b       	sbc	r31, r21

00002a44 <__udivmodsi4_ep>:
    2a44:	66 1f       	adc	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	1a 94       	dec	r1
    2a4e:	69 f7       	brne	.-38     	; 0x2a2a <__udivmodsi4_loop>
    2a50:	60 95       	com	r22
    2a52:	70 95       	com	r23
    2a54:	80 95       	com	r24
    2a56:	90 95       	com	r25
    2a58:	9b 01       	movw	r18, r22
    2a5a:	ac 01       	movw	r20, r24
    2a5c:	bd 01       	movw	r22, r26
    2a5e:	cf 01       	movw	r24, r30
    2a60:	08 95       	ret

00002a62 <__udivmodhi4>:
    2a62:	aa 1b       	sub	r26, r26
    2a64:	bb 1b       	sub	r27, r27
    2a66:	51 e1       	ldi	r21, 0x11	; 17
    2a68:	07 c0       	rjmp	.+14     	; 0x2a78 <__udivmodhi4_ep>

00002a6a <__udivmodhi4_loop>:
    2a6a:	aa 1f       	adc	r26, r26
    2a6c:	bb 1f       	adc	r27, r27
    2a6e:	a6 17       	cp	r26, r22
    2a70:	b7 07       	cpc	r27, r23
    2a72:	10 f0       	brcs	.+4      	; 0x2a78 <__udivmodhi4_ep>
    2a74:	a6 1b       	sub	r26, r22
    2a76:	b7 0b       	sbc	r27, r23

00002a78 <__udivmodhi4_ep>:
    2a78:	88 1f       	adc	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	5a 95       	dec	r21
    2a7e:	a9 f7       	brne	.-22     	; 0x2a6a <__udivmodhi4_loop>
    2a80:	80 95       	com	r24
    2a82:	90 95       	com	r25
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	08 95       	ret

00002a8a <__prologue_saves__>:
    2a8a:	2f 92       	push	r2
    2a8c:	3f 92       	push	r3
    2a8e:	4f 92       	push	r4
    2a90:	5f 92       	push	r5
    2a92:	6f 92       	push	r6
    2a94:	7f 92       	push	r7
    2a96:	8f 92       	push	r8
    2a98:	9f 92       	push	r9
    2a9a:	af 92       	push	r10
    2a9c:	bf 92       	push	r11
    2a9e:	cf 92       	push	r12
    2aa0:	df 92       	push	r13
    2aa2:	ef 92       	push	r14
    2aa4:	ff 92       	push	r15
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	cf 93       	push	r28
    2aac:	df 93       	push	r29
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	ca 1b       	sub	r28, r26
    2ab4:	db 0b       	sbc	r29, r27
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	09 94       	ijmp

00002ac2 <__epilogue_restores__>:
    2ac2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ac4:	39 88       	ldd	r3, Y+17	; 0x11
    2ac6:	48 88       	ldd	r4, Y+16	; 0x10
    2ac8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2aca:	6e 84       	ldd	r6, Y+14	; 0x0e
    2acc:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ace:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ad0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ad2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ad4:	b9 84       	ldd	r11, Y+9	; 0x09
    2ad6:	c8 84       	ldd	r12, Y+8	; 0x08
    2ad8:	df 80       	ldd	r13, Y+7	; 0x07
    2ada:	ee 80       	ldd	r14, Y+6	; 0x06
    2adc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ade:	0c 81       	ldd	r16, Y+4	; 0x04
    2ae0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ae2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ae6:	ce 0f       	add	r28, r30
    2ae8:	d1 1d       	adc	r29, r1
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	ed 01       	movw	r28, r26
    2af6:	08 95       	ret

00002af8 <itoa>:
    2af8:	fb 01       	movw	r30, r22
    2afa:	9f 01       	movw	r18, r30
    2afc:	e8 94       	clt
    2afe:	42 30       	cpi	r20, 0x02	; 2
    2b00:	c4 f0       	brlt	.+48     	; 0x2b32 <itoa+0x3a>
    2b02:	45 32       	cpi	r20, 0x25	; 37
    2b04:	b4 f4       	brge	.+44     	; 0x2b32 <itoa+0x3a>
    2b06:	4a 30       	cpi	r20, 0x0A	; 10
    2b08:	29 f4       	brne	.+10     	; 0x2b14 <itoa+0x1c>
    2b0a:	97 fb       	bst	r25, 7
    2b0c:	1e f4       	brtc	.+6      	; 0x2b14 <itoa+0x1c>
    2b0e:	90 95       	com	r25
    2b10:	81 95       	neg	r24
    2b12:	9f 4f       	sbci	r25, 0xFF	; 255
    2b14:	64 2f       	mov	r22, r20
    2b16:	77 27       	eor	r23, r23
    2b18:	0e 94 31 15 	call	0x2a62	; 0x2a62 <__udivmodhi4>
    2b1c:	80 5d       	subi	r24, 0xD0	; 208
    2b1e:	8a 33       	cpi	r24, 0x3A	; 58
    2b20:	0c f0       	brlt	.+2      	; 0x2b24 <itoa+0x2c>
    2b22:	89 5d       	subi	r24, 0xD9	; 217
    2b24:	81 93       	st	Z+, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	a1 f7       	brne	.-24     	; 0x2b14 <itoa+0x1c>
    2b2c:	16 f4       	brtc	.+4      	; 0x2b32 <itoa+0x3a>
    2b2e:	5d e2       	ldi	r21, 0x2D	; 45
    2b30:	51 93       	st	Z+, r21
    2b32:	10 82       	st	Z, r1
    2b34:	c9 01       	movw	r24, r18
    2b36:	0c 94 9d 15 	jmp	0x2b3a	; 0x2b3a <strrev>

00002b3a <strrev>:
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	67 2f       	mov	r22, r23
    2b40:	71 91       	ld	r23, Z+
    2b42:	77 23       	and	r23, r23
    2b44:	e1 f7       	brne	.-8      	; 0x2b3e <strrev+0x4>
    2b46:	32 97       	sbiw	r30, 0x02	; 2
    2b48:	04 c0       	rjmp	.+8      	; 0x2b52 <strrev+0x18>
    2b4a:	7c 91       	ld	r23, X
    2b4c:	6d 93       	st	X+, r22
    2b4e:	70 83       	st	Z, r23
    2b50:	62 91       	ld	r22, -Z
    2b52:	ae 17       	cp	r26, r30
    2b54:	bf 07       	cpc	r27, r31
    2b56:	c8 f3       	brcs	.-14     	; 0x2b4a <strrev+0x10>
    2b58:	08 95       	ret

00002b5a <_exit>:
    2b5a:	f8 94       	cli

00002b5c <__stop_program>:
    2b5c:	ff cf       	rjmp	.-2      	; 0x2b5c <__stop_program>
